# Query: // 

9198 results - 177 files

admin\internat.php:
  107:                     // Check if the user is logged in
  109:                         // Determine the appropriate href based on the user's role
  112:                                 $href = 'decharge.php'; // Adjust the link for students
  237:         // Room data for each floor
  303:         let currentBuilding = 'boys'; // Default to Boys' Building
  304:         let currentFloor = 1; // Default to Ground Floor
  306:         // Room dimensions and layout
  313:         // Calculate total width and height
  317:         // Create SVG container
  323:         // Draw building border
  331:         // Function to update room layout based on the selected floor
  335:             // Clear existing room groups
  338:             // Create rooms for the selected floor
  351:             // Draw rooms
  357:                 .style("fill", d => getRoomColor(d.id, boysBuilding, currentFloor)) // Assign color dynamically
  360:             // Draw room numbers
  369:             // Draw bathroom
  374:                 .attr("x", 0); // Adjust the position based on room layout
  376:             // Draw stairs
  381:                 .attr("x", totalWidth - 50); // Adjust the position based on room layout
  383:             // Draw divider line
  392:         // Initial room layout for the default floor
  398:         // Function to handle building change
  401:             currentFloor = 1; // Reset floor to Ground Floor when changing building
  405:         // Function to handle floor change
  407:             // Assuming you have a reference to the selected option element
  411:         // Event listener for document click to close the dropdown
  416:             // Check if the clicked element is not inside the dropdown or its container
  418:                 // Close the dropdown by unchecking the checkbox
  423:         // Event listener for radio inputs to close the dropdown when a value is selected
  427:                 // Close the dropdown by unchecking the checkbox

includes\demanderChambre.php:
  12:     // Check if a demand with the same ID exists
  19:     // Check if a student with the same name exists in the same room
  26:     // Check if a student is external 

includes\pdf.php:
    3: // Include the main TCPDF library (search for installation path).
   39: // create new PDF document
   42: // set document information
   49: // remove default header/footer
   55: // set default monospaced font
   58: // set auto page breaks
   61: // ---------------------------------------------------------
   62: // Set font
   63: // dejavusans is a UTF-8 Unicode font, if you only need to
   64: // print standard ASCII chars, you can use core fonts like
   65: // helvetica or times to reduce file size.
   68: // Add a page
   69: // This method has several options, check the source code documentation for more information.
   72: // set text shadow effect
   75: // Set some content to print
  127: // Print text using writeHTMLCell()
  130: // ---------------------------------------------------------
  132: // Close and output PDF document
  133: // This method has several options, check the source code documentation for more information.
  137: // END OF FILE

includes\update.php:
  18:     // Remove the trailing comma and space from the query string

includes\user_info.php:
    3: // echo $_SESSION['status'];
    4: // echo $_SESSION['role'];
    5: // echo $_SESSION['user_id'];
   11: // Check if user is logged in
   40:         // $count_query = "SELECT COUNT(*) as count FROM cart WHERE user_id = '$user_id'";
   41:         // $count_result = mysqli_query($mysqli, $count_query);
   42:         // $count_row = mysqli_fetch_assoc($count_result);
   43:         // $cart_count = $count_row['count'];
  106:     // elseif (isset($_GET['id'])) {
  108:     // Check if user ID is set
  109: //     $id = $_GET['id'];
  110:     // Connect to database
  111:     // Get customer details from database
  112: //     $result = $conn->query("SELECT * FROM user_info WHERE id='$id'");
  114: //     if ($result->num_rows == 1) {
  115: //         $row = $result->fetch_assoc();
  116: //         $name = $row['name'];
  117: //         $email = $row['email'];
  118: //         $image = $row['image'];
  119: //         $country = $row['country'];
  120: //         $address = $row['address'];
  121: //         $postal_code = $row['postal_code'];
  122: //         $phone = $row['phone'];
  124: //         // check if user's image exists, otherwise display default image
  125: //         if (file_exists($image)) {
  126: //             $user_image = $image;
  127: //         } else {
  128: //             $user_image = 'images/default_user.png';
  129: //         }
  130: //     }
  131: // }

js\countrySelect.js:
     1: // wrap in UMD - see https://github.com/umdjs/umd/blob/master/jqueryPlugin.js
    14: 	var pluginName = "countrySelect", id = 1, // give each instance its own ID for namespaced event handling
    16: 		// Default country
    18: 		// Position the selected flag inside or outside of the input
    20: 		// don't display these countries
    22: 		// Display only these countries
    24: 		// The countries at the top of the list. Defaults to United States and United Kingdom
    26: 		// localized country names e.g. { 'de': 'Deutschland' }
    28: 		// Set the dropdown's width to be the same as the input. This is automatically enabled for small screens.
    41: 	// keep track of if the window.load event has fired as impossible to check after the fact
    49: 		// event namespace
    56: 			// Process all the data: onlyCountries, excludeCountries, preferredCountries, defaultCountry etc
    58: 			// Generate the markup
    60: 			// Set the initial state of the input value and the selected flag
    62: 			// Start all of the event listeners: input keyup, selectedFlag click
    64: 			// Return this when the auto country is resolved.
    66: 			// Get auto country.
    68: 			// Keep track as the user types
    76: 		// prepare all of the country data, including onlyCountries, excludeCountries, preferredCountries and
    77: 		// defaultCountry options
    79: 			// set the instances country data objects
    81: 			// set the preferredCountries property
    83: 			// translate countries according to localizedCountries option
    85: 			// sort countries by name
    90: 		// process onlyCountries array if present
   113: 		// Process preferred countries - iterate through the preferences,
   114: 		// fetching the country data for each one
   125: 		// Translate Countries by object literal provided on config
   134: 		// sort by country name
   138: 		// generate all of the markup for the plugin: the selected flag overlay, and the dropdown
   140: 			// Country input
   142: 			// containers (mostly for positioning)
   153: 			// currently selected flag (displayed to left of input)
   160: 			// CSS triangle
   164: 			// country list contains: preferred countries, then divider, then all countries
   175: 			// Add the hidden input for the country code
   181: 			// now we can grab the dropdown height, and hide it properly
   183: 			// set the dropdown width according to the input if responsiveDropdown option is present or if it's a small screen
   193: 			// this is useful in lots of places
   196: 		// add a country <li> to the countryList <ul> container
   198: 			// Generate DOM elements as a large temp string, so that there is only
   199: 			// one DOM insert event
   201: 			// for each country
   203: 				// open the list item
   205: 				// add the flag
   207: 				// and the country name
   209: 				// close the list item
   214: 		// set the initial state of the input value and the selected flag
   218: 			// If the input is pre-populated, then just update the selected flag
   222: 			// If the country code input is pre-populated, update the name and the selected flag
   229: 				// flag is not set, so set to the default country
   231: 				// check the defaultCountry option, else fall back to the first in the list
   234: 					// Did we not find the requested default country?
   246: 		// initialise the main event listeners: input keyup, and click selected flag
   249: 			// Update flag on keyup.
   250: 			// Use keyup instead of keypress because we want to update on backspace
   251: 			// and instead of keydown because the value hasn't updated when that
   252: 			// event is fired.
   253: 			// NOTE: better to have this one listener all the time instead of
   254: 			// starting it on focus and stopping it on blur, because then you've
   255: 			// got two listeners (focus and blur)
   259: 			// toggle country dropdown on click
   262: 				// only intercept this event if we're opening the dropdown
   263: 				// else let it bubble up to the top ("click-off-to-close" listener)
   264: 				// we cannot just stopPropagation as it may be needed to close another instance
   269: 			// Despite above note, added blur to ensure partially spelled country
   270: 			// with correctly chosen flag is spelled out on blur. Also, correctly
   271: 			// selects flag when field is autofilled
   292: 		// perform the geo ip lookup
   296: 			// 3 options:
   297: 			// 1) already loaded (we're done)
   298: 			// 2) not already started loading (start)
   299: 			// 3) already started loading (do nothing - just wait for loading callback to fire)
   303: 				// don't do this twice!
   309: 						// tell all instances the auto country is ready
   310: 						// TODO: this should just be the current instances
   311: 						// UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight away (e.g. if they have already done the geo ip lookup somewhere else). Using setTimeout means that the current thread of execution will finish before executing this, which allows the plugin to finish initialising.
   319: 		// Focus input and put the cursor at the end
   323: 			// works for Chrome, FF, Safari, IE9+
   329: 		// Show the dropdown
   332: 			// update highlighting and scroll to active list item
   335: 			// show it
   338: 			// bind all the dropdown-related listeners: mouseover, click, click-off, keydown
   340: 			// update the arrow
   343: 		// decide where to position dropdown (depends on position within viewport, and scroll)
   347: 			// dropdownHeight - 1 for border
   351: 		// we only bind dropdown listeners when the dropdown is open
   354: 			// when mouse over a list item, just highlight that one
   355: 			// we add the class "highlight", so if they hit "enter" we know which one to select
   359: 			// listen for country selection
   363: 			// click off to close
   364: 			// (except when this initial opening click is bubbling up)
   365: 			// we cannot just stopPropagation as it may be needed to close another instance
   374: 			// Listen for up/down scrolling, enter to select, or letters to jump to country name.
   375: 			// Use keydown as keypress doesn't fire for non-char keys and we want to catch if they
   376: 			// just hit down and hold it to scroll down (no keyup event).
   377: 			// Listen on the document because that's where key events are triggered if no input has focus
   379: 				// prevent down key from scrolling the whole page,
   380: 				// and enter key from submitting a form etc
   383: 					// up and down to navigate
   386: 					// enter to select
   389: 					// esc to close
   400: 		// Highlight the next/prev item in the list (and ensure it is visible)
   405: 				// skip the divider
   413: 		// select the currently highlighted item
   425: 				// if one is already highlighted, then we want the next one
   432: 				// update highlighting and scroll
   437: 		// Update the selected flag using the input's current value
   440: 			// try and extract valid country from input
   446: 				// Check for ISO codes only
   455: 				// If no previous matches / larger than 2 chars, then search country name
   464: 				// Check if one of the matching countries is already selected
   478: 				// Matching country found
   485: 			// No match found
   486: 			// return false;
   488: 		// remove highlighting from other list items and highlight the given item
   493: 		// find the country data for the given country code
   494: 		// the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array
   504: 		// update the selected flag and the active list item
   510: 			// update the title attribute
   512: 			// update the active list item
   518: 		// called when the user selects a list item from the dropdown
   520: 			// update selected flag and active list item
   524: 			// update input value
   528: 			// focus the input
   531: 		// close the dropdown and unbind any listeners
   534: 			// update the arrow
   536: 			// unbind event listeners
   539: 			// unbind both hover and click listeners
   543: 		// check if an element is visible within its container, else scroll until it is
   550: 				// scroll up
   553: 				// scroll down
   558: 		// Replace any existing country name with the new one
   566: 		// this is called when the geoip call returns
   569: 				// we must set this even if there is an initial val in the input: in case the initial val is invalid and they delete it - they should see their auto country
   571: 				// if there's no initial value in the input, then update the flag
   578: 		// get the country data for the currently selected flag
   580: 			// rely on the fact that we only set 2 classes on the selected flag element:
   581: 			// the first is "flag" and the second is the 2-char country code
   585: 		// update the selected flag
   588: 			// check if already selected
   594: 		// set the input value and update the flag
   599: 		// remove plugin
   601: 			// stop listeners
   604: 			// remove markup
   609: 	// adapted to allow public functions
   610: 	// using https://github.com/jquery-boilerplate/jquery-boilerplate/wiki/Extending-jQuery-Boilerplate
   613: 		// Is the first parameter an object (options), or was omitted,
   614: 		// instantiate a new instance of the plugin.
   622: 			// If the first parameter is a string and it doesn't start
   623: 			// with an underscore or "contains" the `init`-function,
   624: 			// treat this as a call to a public method.
   625: 			// Cache the method call to make it possible to return a value
   629: 				// Tests that there's already a plugin-instance
   630: 				// and checks that the requested public method exists
   632: 					// Call the method of our plugin instance,
   633: 					// and pass it the supplied arguments.
   636: 				// Allow instances to be destroyed via the 'destroy' method
   641: 			// If the earlier cached method gives a value back return the value,
   642: 			// otherwise return this to preserve chainability.
   649: 	// get the country data object
   653: 	// set the country data object
   657: 	// Tell JSHint to ignore this warning: "character may get silently deleted by one or more browsers"
   658: 	// jshint -W100
   659: 	// Array of country objects for the flag dropdown.
   660: 	// Each contains a name and country code (ISO 3166-1 alpha-2).
   662: 	// Note: using single char property names to keep filesize down
   663: 	// n = name
   664: 	// i = iso2 (2-char country code)
  1416:         	n: '', // No country selected

js\displayRooms.js:
  10:     // Create an array to store promises for each AJAX request
  14:         // Push the promise of the AJAX request to the array
  24:     // Use Promise.all() to wait for all promises to resolve
  27:             // Iterate over the received data and update the table
  53:         // Check if there is a student for the current column
  55:             // Add the student column
  62:             // No student for the current column, display "-"
  80: // Function to update the pagination links

js\editRoom.js:
   8:     // Clear the form fields and student list
  12:     // Show the editing popup
  15:     // Handle form submission
  19:         // Get the value from the form
  22:         // Validate the input (you can add more validation as needed)
  24:         // Make an AJAX call to search for the student
  31:                     // Display the list of students
  36:                         // Display the student image
  42:                         // Display the student name
  48:                             // Set the selected student in the input field
  53:                                 // Make another AJAX call to move the student to the selected room
  61:                                         // Add other form fields as needed
  67:                                             // Close the editing popup
  69:                                             // Refresh the room data or update the UI as needed
  70:                                             // You may need to call showPopup or updateRoomLayout function
  96:     // Handle close button click
  98:         // Close the editing popup

js\intlTelInput-jquery.js:
     7: // wrap in UMD
    18:     // Array of country objects for the flag dropdown.
    19:     // Here is the criteria for the plugin to support a given country/territory
    20:     // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    21:     // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes
    22:     // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png
    23:     // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml
    24:     // Each country array has the following information:
    25:     // [
    26:     //    Country name,
    27:     //    iso2 code,
    28:     //    International dial code,
    29:     //    Order (if >1 country with same dial code),
    30:     //    Area codes
    31:     // ]
    33:     // loop over all of the countries above, restructuring the data to be objects with named keys
    70:         // using a global like this allows us to mock it in the tests
    76:     // these vars persist through all instances of the plugin
    79:         // whether or not to allow the dropdown
    81:         // if there is just a dial code in the input: remove it on blur
    83:         // add a placeholder in the input with an example number for the selected country
    85:         // modify the parentClass
    87:         // modify the auto placeholder
    89:         // append menu to specified element
    91:         // don't display these countries
    93:         // format the input value during initialisation and on setNumber
    95:         // geoIp lookup function
    97:         // inject a hidden input with this name, and on submit, populate it with the result of getNumber
    99:         // initial country
   101:         // localized country names e.g. { 'de': 'Deutschland' }
   103:         // don't insert international dial codes
   105:         // display only these countries
   107:         // number type to use for placeholders
   109:         // the countries at the top of the list. defaults to united states and united kingdom
   111:         // display the country dial code next to the selected flag so it's not part of the typed number
   113:         // specify the path to the libphonenumber script to enable validation/formatting
   116:     // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes
   118:     // utility function to iterate over an object. can't use Object.entries or native forEach because
   119:     // of IE11
   126:     // run a method on each instance of the plugin
   132:     // this is our plugin class that we will create an instance of
   133:     // eslint-disable-next-line no-unused-vars
   143:             // process specified options / defaults
   144:             // alternative to Object.assign, which isn't supported by IE11
   156:                 // if in nationalMode, disable options relating to dial codes
   158:                 // if separateDialCode then doesn't make sense to A) insert dial code into input
   159:                 // (autoHideDialCode), and B) display national numbers (because we're displaying the country
   160:                 // dial code next to them)
   164:                 // we cannot just test screen size as some smartphones/website meta tags will report desktop
   165:                 // resolutions
   166:                 // Note: for some reason jasmine breaks if you put this in the main Plugin function with the
   167:                 // rest of these declarations
   168:                 // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'
   171:                     // trigger the mobile dropdown css
   173:                     // on mobile, we want a full screen dropdown, so we must append it to the body
   176:                 // these promises get resolved when their individual requests complete
   177:                 // this way the dev can do something like iti.promise.then(...) to know when all requests are
   178:                 // complete
   190:                     // prevent errors when Promise doesn't exist
   194:                 // in various situations there could be no country selected initially, but we need to be able
   195:                 // to assume this variable exists
   197:                 // process all the data: onlyCountries, excludeCountries, preferredCountries etc
   199:                 // generate the markup
   201:                 // set the initial state of the input value and the selected flag
   203:                 // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click
   205:                 // utils script, and auto country
   211:                 // process onlyCountries or excludeCountries array if present
   213:                 // process the countryCodes map
   215:                 // process the preferredCountries
   217:                 // translate countries according to localizedCountries option
   219:                 // sort countries by name
   233:                 // bail if we already have this country for this countryCode
   237:                 // check for undefined as 0 is falsy
   281:                 // here we store just dial codes
   283:                 // here we store "country codes" (both dial codes and their area codes)
   285:                 // first: add dial codes
   291:                 // next: add area codes
   292:                 // this is a second loop over countries, to make sure we have all of the "root" countries
   293:                 // already in the map, so that we can access them, as each time we add an area code substring
   294:                 // to the map, we also need to include the "root" country's code, as that also matches
   297:                     // area codes
   300:                         // for each area code
   303:                             // for each digit in the area code to add all partial matches as well
   306:                                 // start with the root country, as that also matches this dial code
   310:                             // add the full area code
   339:                 // if autocomplete does not exist on the element and its form, then
   340:                 // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can
   341:                 // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the
   342:                 // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)
   346:                 // containers (mostly for positioning)
   362:                 // selected flag (displayed to left of input)
   379:                     // make element focusable and tab navigable
   384:                     // country dropdown: preferred countries, then divider, then all countries
   400:                     // create dropdownContainer markup
   415:                         // if input name contains square brackets, then give the hidden input the same name,
   416:                         // replacing the contents of the last set of brackets with the given hiddenInput name
   429:                 // we create so many DOM elements, it is faster to build a temp string
   430:                 // and then add everything to the DOM in one go at the end
   432:                 // for each country
   436:                     // open the list item
   438:                     // add the flag
   440:                     // and the country name and dial code
   443:                     // close the list item
   451:                 // fix firefox bug: when first load page (with input with value set to number with intl dial
   452:                 // code) and initialising plugin removes the dial code from the input, then refresh page,
   453:                 // and we try to init plugin again but this time on number without dial code so get grey flag
   461:                 // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the
   462:                 // flag, else fall back to the default country
   466:                     // see if we should select a flag
   471:                             // has intl dial code, is regionless nanp, and no initialCountry, so default to US
   474:                             // no dial code and no initialCountry, so default to first in list
   481:                     // if empty and no nationalMode and no autoHideDialCode then insert the default dial code
   486:                 // NOTE: if initialCountry is set to auto, that will be handled separately
   487:                 // format - note this wont be run after _updateDialCode as that's only called if no val
   520:                 // hack for input nested inside label (which is valid markup): clicking the selected-flag to
   521:                 // open the dropdown would then automatically trigger a 2nd click on the input which would
   522:                 // close it again
   524:                     // if the dropdown is closed, then focus the input, else ignore the click
   529:                 // toggle country dropdown on click
   531:                     // only intercept this event if we're opening the dropdown
   532:                     // else let it bubble up to the top ("click-off-to-close" listener)
   533:                     // we cannot just stopPropagation as it may be needed to close another instance
   539:                 // open dropdown list if currently focused
   543:                         // prevent form from being submitted if "ENTER" was pressed
   545:                         // prevent event from being handled again by document
   549:                     // allow navigation from dropdown to input on TAB
   558:                 // if the user has specified the path to the utils script, fetch it on window.load, else resolve
   560:                     // if the plugin is being initialised after the window.load event has already been fired
   564:                         // wait until the load event so we don't block any other requests e.g. the flags image
   575:                 // 3 options:
   576:                 // 1) already loaded (we're done)
   577:                 // 2) not already started loading (start)
   578:                 // 3) already started loading (do nothing - just wait for loading callback to fire)
   582:                     // don't do this twice!
   587:                             // tell all instances the auto country is ready
   588:                             // TODO: this should just be the current instances
   589:                             // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight
   590:                             // away (e.g. if they have already done the geo ip lookup somewhere else). Using
   591:                             // setTimeout means that the current thread of execution will finish before executing
   592:                             // this, which allows the plugin to finish initialising.
   606:                 // update flag on keyup
   613:                 // update flag on cut/paste events (now supported in all major browsers)
   615:                     // hack because "paste" event is fired before input is updated
   631:                 // on blur or form submit: if just a dial code then remove it
   643:                     // if just a plus, or if just a dial code
   657:                 // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax
   660:                 // can bubble, and is cancellable
   669:                 // update highlighting and scroll to active list item
   674:                 // bind all the dropdown-related listeners: mouseover, click, click-off, keydown
   676:                 // update the arrow
   694:                     // windowTop from https://stackoverflow.com/a/14384091/217866
   698:                     // dropdownFitsBelow = (dropdownBottom < windowBottom)
   701:                     // by default, the dropdown will be below the input. If we want to position it above the
   702:                     // input, we add the dropup class.
   704:                     // if dropdownContainer is enabled, calculate postion
   706:                         // by default the dropdown will be directly over the input because it's not in the flow.
   707:                         // If we want to position it below, we need to add some extra top value.
   709:                         // calculate placement
   712:                         // close menu on window scroll
   727:                 // if we reached the countryList element, then return null
   734:                 // when mouse over a list item, just highlight that one
   735:                 // we add the class "highlight", so if they hit "enter" we know which one to select
   737:                     // handle event delegation, as we're listening for this event on the countryList
   742:                 // listen for country selection
   748:                 // click off to close
   749:                 // (except when this initial opening click is bubbling up)
   750:                 // we cannot just stopPropagation as it may be needed to close another instance
   757:                 // listen for up/down scrolling, enter to select, or letters to jump to country name.
   758:                 // use keydown as keypress doesn't fire for non-char keys and we want to catch if they
   759:                 // just hit down and hold it to scroll down (no keyup event).
   760:                 // listen on the document because that's where key events are triggered if no input has focus
   764:                     // prevent down key from scrolling the whole page,
   765:                     // and enter key from submitting a form etc
   767:                     // up and down to navigate
   769:                         // jump to countries that start with the query string
   773:                         // if the timer hits 1 second, reset the query
   786:                     // skip the divider
   804:                         // update highlighting and scroll
   832:                 // if we're in nationalMode and we already have US/Canada selected, make sure the number starts
   833:                 // with a +1 so _getDialCode will be able to extract the area code
   834:                 // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag
   835:                 // from the number), that means we're initialising the plugin with a number that already has a
   836:                 // dial code, so fine to ignore this bit
   844:                 // update flag if user types area code for another country
   848:                 // try and extract valid dial code from input
   854:                     // check if the right country is already selected. this should be false if the number is
   855:                     // longer than the matched dial code because in this case we need to make sure that if
   856:                     // there are multiple country matches, that the first one is selected (note: we could
   857:                     // just check that here, but it requires the same loop that we already have later)
   860:                     // only update the flag if:
   861:                     // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)
   862:                     // AND
   863:                     // B) the right country is not already selected
   865:                         // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first
   866:                         // non-empty index
   875:                     // invalid dial code, so empty
   876:                     // Note: use getNumeric here because the number has not been formatted yet, so could contain
   877:                     // bad chars
   880:                     // empty, or just a plus, so default
   925:                 // do this first as it will throw an error and stop if countryCode is invalid
   927:                 // update the defaultCountry - we only need the iso2 from now on, so just store that
   932:                 // update the selected country's title attribute
   938:                     // offsetWidth is zero if input is in a hidden container during initialisation
   940:                     // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css
   943:                 // and the input's placeholder
   945:                 // update the active list item
   953:                         // check if there is a preferred item first, else fall back to standard
   961:                 // return if the flag has changed or not
   967:                 // to get the right styling to apply, all we need is a shallow clone of the container,
   968:                 // and then to inject a deep clone of the selectedFlag element
   997:                 // update selected flag and active list item
  1001:                 // focus the input
  1003:                 // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto
  1004:                 // inserting dial code), who try to put the cursor at the beginning the first time
  1016:                 // update the arrow
  1018:                 // unbind key events
  1023:                 // remove menu from container
  1034:                 // windowTop from https://stackoverflow.com/a/14384091/217866
  1045:                     // scroll up
  1049:                     // scroll down
  1059:                 // save having to pass this every time
  1063:                     // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)
  1066:                         // current number contains a valid dial code, so replace it
  1069:                         // current number contains an invalid dial code, so ditch it
  1070:                         // (no way to determine where the invalid dial code ends and the rest of the number begins)
  1074:                     // don't do anything
  1077:                     // nationalMode is disabled
  1079:                         // there is an existing value with no dial code: prefix the new dial code
  1082:                         // no existing value and either they've just selected a list item, or autoHideDialCode is
  1083:                         // disabled: insert new dial code
  1095:                 // only interested in international numbers (starting with a plus)
  1098:                     // iterate over chars
  1101:                         // if char is number (https://stackoverflow.com/a/8935649/217866)
  1104:                             // if current numericChars make a valid dial code
  1107:                                     // store the actual raw string (useful for matching later)
  1113:                                     // if we're just looking for a dial code, we can break as soon as we find one
  1117:                             // stop searching as soon as we can - in this case when we hit max len
  1134:                     // when using separateDialCode, it is visible so is effectively part of the typed number
  1147:                     // if there is a valid dial code
  1149:                         // in case _getDialCode returned an area code as well
  1151:                         // a lot of numbers will have a space separating the dial code and the main number, and
  1152:                         // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get
  1153:                         // rid of it
  1154:                         // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc
  1170:                     // we must set this even if there is an initial val in the input: in case the initial val is
  1171:                     // invalid and they delete it - they should see their auto country
  1173:                     // if there's no initial value in the input, then update the flag
  1183:                 // if the request was successful
  1185:                     // if there's an initial value in the input, then format it
  1198:                     // make sure the dropdown is closed (and unbind listeners)
  1202:                     // label click hack
  1206:                 // unbind hiddenInput listeners
  1208:                 // unbind autoHideDialCode listeners
  1213:                 // unbind key events, and cut/paste events
  1217:                 // remove attribute of id instance: data-intl-tel-input-id
  1219:                 // remove markup (but leave the original input)
  1275:                 // check if already selected
  1285:                 // we must update the flag first, which updates this.selectedCountryData, which is used for
  1286:                 // formatting the number before displaying it
  1305:     // get the country data object
  1309:     // inject a <script> element to load utils.js
  1311:         // inject a new script element into the page
  1326:     // load the utils script
  1328:         // 2 options:
  1329:         // 1) not already started loading (start)
  1330:         // 2) already started loading (do nothing - just wait for the onload callback to fire, which will
  1331:         // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)
  1333:             // only do this once
  1335:             // if we have promises, then return a promise
  1345:     // default options
  1347:     // version
  1350:     // A really lightweight plugin wrapper around the constructor,
  1351:     // preventing against multiple instantiations
  1354:         // Is the first parameter an object (options), or was omitted, instantiate a new instance of the plugin.
  1365:             // If the first parameter is a string and it doesn't start with an underscore treat this as a call to a public method.
  1366:             // Cache the method call to make it possible to return a value
  1370:                 // Tests that there's already a plugin-instance and checks that the requested public method exists
  1372:                     // Call the method of our plugin instance, and pass it the supplied arguments.
  1375:                 // Allow instances to be destroyed via the 'destroy' method
  1378:             // If the earlier cached method gives a value back return the value, otherwise return this to preserve chainability.

js\intlTelInput.js:
     7: // wrap in UMD
    13:         // Array of country objects for the flag dropdown.
    14:         // Here is the criteria for the plugin to support a given country/territory
    15:         // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    16:         // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes
    17:         // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png
    18:         // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml
    19:         // Each country array has the following information:
    20:         // [
    21:         //    Country name,
    22:         //    iso2 code,
    23:         //    International dial code,
    24:         //    Order (if >1 country with same dial code),
    25:         //    Area codes
    26:         // ]
    28:         // loop over all of the countries above, restructuring the data to be objects with named keys
    65:             // using a global like this allows us to mock it in the tests
    71:         // these vars persist through all instances of the plugin
    74:             // whether or not to allow the dropdown
    76:             // if there is just a dial code in the input: remove it on blur
    78:             // add a placeholder in the input with an example number for the selected country
    80:             // modify the parentClass
    82:             // modify the auto placeholder
    84:             // append menu to specified element
    86:             // don't display these countries
    88:             // format the input value during initialisation and on setNumber
    90:             // geoIp lookup function
    92:             // inject a hidden input with this name, and on submit, populate it with the result of getNumber
    94:             // initial country
    96:             // localized country names e.g. { 'de': 'Deutschland' }
    98:             // don't insert international dial codes
   100:             // display only these countries
   102:             // number type to use for placeholders
   104:             // the countries at the top of the list. defaults to united states and united kingdom
   106:             // display the country dial code next to the selected flag so it's not part of the typed number
   108:             // specify the path to the libphonenumber script to enable validation/formatting
   111:         // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes
   113:         // utility function to iterate over an object. can't use Object.entries or native forEach because
   114:         // of IE11
   121:         // run a method on each instance of the plugin
   127:         // this is our plugin class that we will create an instance of
   128:         // eslint-disable-next-line no-unused-vars
   138:                 // process specified options / defaults
   139:                 // alternative to Object.assign, which isn't supported by IE11
   151:                     // if in nationalMode, disable options relating to dial codes
   153:                     // if separateDialCode then doesn't make sense to A) insert dial code into input
   154:                     // (autoHideDialCode), and B) display national numbers (because we're displaying the country
   155:                     // dial code next to them)
   159:                     // we cannot just test screen size as some smartphones/website meta tags will report desktop
   160:                     // resolutions
   161:                     // Note: for some reason jasmine breaks if you put this in the main Plugin function with the
   162:                     // rest of these declarations
   163:                     // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'
   166:                         // trigger the mobile dropdown css
   168:                         // on mobile, we want a full screen dropdown, so we must append it to the body
   171:                     // these promises get resolved when their individual requests complete
   172:                     // this way the dev can do something like iti.promise.then(...) to know when all requests are
   173:                     // complete
   185:                         // prevent errors when Promise doesn't exist
   189:                     // in various situations there could be no country selected initially, but we need to be able
   190:                     // to assume this variable exists
   192:                     // process all the data: onlyCountries, excludeCountries, preferredCountries etc
   194:                     // generate the markup
   196:                     // set the initial state of the input value and the selected flag
   198:                     // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click
   200:                     // utils script, and auto country
   206:                     // process onlyCountries or excludeCountries array if present
   208:                     // process the countryCodes map
   210:                     // process the preferredCountries
   212:                     // translate countries according to localizedCountries option
   214:                     // sort countries by name
   228:                     // bail if we already have this country for this countryCode
   232:                     // check for undefined as 0 is falsy
   276:                     // here we store just dial codes
   278:                     // here we store "country codes" (both dial codes and their area codes)
   280:                     // first: add dial codes
   286:                     // next: add area codes
   287:                     // this is a second loop over countries, to make sure we have all of the "root" countries
   288:                     // already in the map, so that we can access them, as each time we add an area code substring
   289:                     // to the map, we also need to include the "root" country's code, as that also matches
   292:                         // area codes
   295:                             // for each area code
   298:                                 // for each digit in the area code to add all partial matches as well
   301:                                     // start with the root country, as that also matches this dial code
   305:                                 // add the full area code
   334:                     // if autocomplete does not exist on the element and its form, then
   335:                     // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can
   336:                     // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the
   337:                     // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)
   341:                     // containers (mostly for positioning)
   357:                     // selected flag (displayed to left of input)
   374:                         // make element focusable and tab navigable
   379:                         // country dropdown: preferred countries, then divider, then all countries
   395:                         // create dropdownContainer markup
   410:                             // if input name contains square brackets, then give the hidden input the same name,
   411:                             // replacing the contents of the last set of brackets with the given hiddenInput name
   424:                     // we create so many DOM elements, it is faster to build a temp string
   425:                     // and then add everything to the DOM in one go at the end
   427:                     // for each country
   431:                         // open the list item
   433:                         // add the flag
   435:                         // and the country name and dial code
   438:                         // close the list item
   446:                     // fix firefox bug: when first load page (with input with value set to number with intl dial
   447:                     // code) and initialising plugin removes the dial code from the input, then refresh page,
   448:                     // and we try to init plugin again but this time on number without dial code so get grey flag
   456:                     // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the
   457:                     // flag, else fall back to the default country
   461:                         // see if we should select a flag
   466:                                 // has intl dial code, is regionless nanp, and no initialCountry, so default to US
   469:                                 // no dial code and no initialCountry, so default to first in list
   476:                         // if empty and no nationalMode and no autoHideDialCode then insert the default dial code
   481:                     // NOTE: if initialCountry is set to auto, that will be handled separately
   482:                     // format - note this wont be run after _updateDialCode as that's only called if no val
   515:                     // hack for input nested inside label (which is valid markup): clicking the selected-flag to
   516:                     // open the dropdown would then automatically trigger a 2nd click on the input which would
   517:                     // close it again
   519:                         // if the dropdown is closed, then focus the input, else ignore the click
   524:                     // toggle country dropdown on click
   526:                         // only intercept this event if we're opening the dropdown
   527:                         // else let it bubble up to the top ("click-off-to-close" listener)
   528:                         // we cannot just stopPropagation as it may be needed to close another instance
   534:                     // open dropdown list if currently focused
   538:                             // prevent form from being submitted if "ENTER" was pressed
   540:                             // prevent event from being handled again by document
   544:                         // allow navigation from dropdown to input on TAB
   553:                     // if the user has specified the path to the utils script, fetch it on window.load, else resolve
   555:                         // if the plugin is being initialised after the window.load event has already been fired
   559:                             // wait until the load event so we don't block any other requests e.g. the flags image
   570:                     // 3 options:
   571:                     // 1) already loaded (we're done)
   572:                     // 2) not already started loading (start)
   573:                     // 3) already started loading (do nothing - just wait for loading callback to fire)
   577:                         // don't do this twice!
   582:                                 // tell all instances the auto country is ready
   583:                                 // TODO: this should just be the current instances
   584:                                 // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight
   585:                                 // away (e.g. if they have already done the geo ip lookup somewhere else). Using
   586:                                 // setTimeout means that the current thread of execution will finish before executing
   587:                                 // this, which allows the plugin to finish initialising.
   601:                     // update flag on keyup
   608:                     // update flag on cut/paste events (now supported in all major browsers)
   610:                         // hack because "paste" event is fired before input is updated
   626:                     // on blur or form submit: if just a dial code then remove it
   638:                         // if just a plus, or if just a dial code
   652:                     // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax
   655:                     // can bubble, and is cancellable
   664:                     // update highlighting and scroll to active list item
   669:                     // bind all the dropdown-related listeners: mouseover, click, click-off, keydown
   671:                     // update the arrow
   689:                         // windowTop from https://stackoverflow.com/a/14384091/217866
   693:                         // dropdownFitsBelow = (dropdownBottom < windowBottom)
   696:                         // by default, the dropdown will be below the input. If we want to position it above the
   697:                         // input, we add the dropup class.
   699:                         // if dropdownContainer is enabled, calculate postion
   701:                             // by default the dropdown will be directly over the input because it's not in the flow.
   702:                             // If we want to position it below, we need to add some extra top value.
   704:                             // calculate placement
   707:                             // close menu on window scroll
   722:                     // if we reached the countryList element, then return null
   729:                     // when mouse over a list item, just highlight that one
   730:                     // we add the class "highlight", so if they hit "enter" we know which one to select
   732:                         // handle event delegation, as we're listening for this event on the countryList
   737:                     // listen for country selection
   743:                     // click off to close
   744:                     // (except when this initial opening click is bubbling up)
   745:                     // we cannot just stopPropagation as it may be needed to close another instance
   752:                     // listen for up/down scrolling, enter to select, or letters to jump to country name.
   753:                     // use keydown as keypress doesn't fire for non-char keys and we want to catch if they
   754:                     // just hit down and hold it to scroll down (no keyup event).
   755:                     // listen on the document because that's where key events are triggered if no input has focus
   759:                         // prevent down key from scrolling the whole page,
   760:                         // and enter key from submitting a form etc
   762:                         // up and down to navigate
   764:                             // jump to countries that start with the query string
   768:                             // if the timer hits 1 second, reset the query
   781:                         // skip the divider
   799:                             // update highlighting and scroll
   827:                     // if we're in nationalMode and we already have US/Canada selected, make sure the number starts
   828:                     // with a +1 so _getDialCode will be able to extract the area code
   829:                     // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag
   830:                     // from the number), that means we're initialising the plugin with a number that already has a
   831:                     // dial code, so fine to ignore this bit
   839:                     // update flag if user types area code for another country
   843:                     // try and extract valid dial code from input
   849:                         // check if the right country is already selected. this should be false if the number is
   850:                         // longer than the matched dial code because in this case we need to make sure that if
   851:                         // there are multiple country matches, that the first one is selected (note: we could
   852:                         // just check that here, but it requires the same loop that we already have later)
   855:                         // only update the flag if:
   856:                         // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)
   857:                         // AND
   858:                         // B) the right country is not already selected
   860:                             // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first
   861:                             // non-empty index
   870:                         // invalid dial code, so empty
   871:                         // Note: use getNumeric here because the number has not been formatted yet, so could contain
   872:                         // bad chars
   875:                         // empty, or just a plus, so default
   920:                     // do this first as it will throw an error and stop if countryCode is invalid
   922:                     // update the defaultCountry - we only need the iso2 from now on, so just store that
   927:                     // update the selected country's title attribute
   933:                         // offsetWidth is zero if input is in a hidden container during initialisation
   935:                         // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css
   938:                     // and the input's placeholder
   940:                     // update the active list item
   948:                             // check if there is a preferred item first, else fall back to standard
   956:                     // return if the flag has changed or not
   962:                     // to get the right styling to apply, all we need is a shallow clone of the container,
   963:                     // and then to inject a deep clone of the selectedFlag element
   992:                     // update selected flag and active list item
   996:                     // focus the input
   998:                     // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto
   999:                     // inserting dial code), who try to put the cursor at the beginning the first time
  1011:                     // update the arrow
  1013:                     // unbind key events
  1018:                     // remove menu from container
  1029:                     // windowTop from https://stackoverflow.com/a/14384091/217866
  1040:                         // scroll up
  1044:                         // scroll down
  1054:                     // save having to pass this every time
  1058:                         // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)
  1061:                             // current number contains a valid dial code, so replace it
  1064:                             // current number contains an invalid dial code, so ditch it
  1065:                             // (no way to determine where the invalid dial code ends and the rest of the number begins)
  1069:                         // don't do anything
  1072:                         // nationalMode is disabled
  1074:                             // there is an existing value with no dial code: prefix the new dial code
  1077:                             // no existing value and either they've just selected a list item, or autoHideDialCode is
  1078:                             // disabled: insert new dial code
  1090:                     // only interested in international numbers (starting with a plus)
  1093:                         // iterate over chars
  1096:                             // if char is number (https://stackoverflow.com/a/8935649/217866)
  1099:                                 // if current numericChars make a valid dial code
  1102:                                         // store the actual raw string (useful for matching later)
  1108:                                         // if we're just looking for a dial code, we can break as soon as we find one
  1112:                                 // stop searching as soon as we can - in this case when we hit max len
  1129:                         // when using separateDialCode, it is visible so is effectively part of the typed number
  1142:                         // if there is a valid dial code
  1144:                             // in case _getDialCode returned an area code as well
  1146:                             // a lot of numbers will have a space separating the dial code and the main number, and
  1147:                             // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get
  1148:                             // rid of it
  1149:                             // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc
  1165:                         // we must set this even if there is an initial val in the input: in case the initial val is
  1166:                         // invalid and they delete it - they should see their auto country
  1168:                         // if there's no initial value in the input, then update the flag
  1178:                     // if the request was successful
  1180:                         // if there's an initial value in the input, then format it
  1193:                         // make sure the dropdown is closed (and unbind listeners)
  1197:                         // label click hack
  1201:                     // unbind hiddenInput listeners
  1203:                     // unbind autoHideDialCode listeners
  1208:                     // unbind key events, and cut/paste events
  1212:                     // remove attribute of id instance: data-intl-tel-input-id
  1214:                     // remove markup (but leave the original input)
  1270:                     // check if already selected
  1280:                     // we must update the flag first, which updates this.selectedCountryData, which is used for
  1281:                     // formatting the number before displaying it
  1300:         // get the country data object
  1304:         // inject a <script> element to load utils.js
  1306:             // inject a new script element into the page
  1321:         // load the utils script
  1323:             // 2 options:
  1324:             // 1) not already started loading (start)
  1325:             // 2) already started loading (do nothing - just wait for the onload callback to fire, which will
  1326:             // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)
  1328:                 // only do this once
  1330:                 // if we have promises, then return a promise
  1340:         // default options
  1342:         // version
  1344:         // convenience wrapper

js\moveStudent.js:
   1: // Function to move a student to another room
   3:     // Prompt the user for the new room number
   6:     // Check if the input is valid
   8:         // Send AJAX request to move student
  22:                     // Close the info popup
  42: // Function to close the popup

js\navbar.js:
    9:         // Validate that all variables exist
   12:                 // show navbar
   14:                 // change icon
   16:                 // add padding to body
   18:                 // add padding to header
   22:             // Close the navbar if clicked outside
   26:                     // Hide the navbar
   28:                     // Reset icon
   30:                     // Remove padding from body and header
   51:     // Your code to run since DOM is loaded and ready
   54: // ---------Responsive-navbar-active-animation-----------
   99: // --------------add active class-on another-page move----------
  101:     // Get current path and find target link
  104:     // Account for home page with empty path
  110:     // Add active class to target link

js\notifications.js:
  21:         // Display a message when there are no notifications
  35:     // Attach the click event listener to the document to close the dropdown
  43: // Click event for the notification icon

js\search.js:
   2:     // Store references to the search box and results elements
   6:     // Bind a keyup event to the search box
  10:         if (search_term.trim() !== '') { // Check if search term is not empty
  44:         } else { // Hide results if search term is empty
  49:     // Bind a click event to the document object
  51:         // Check if the click occurred outside of the search box and its results

js\showPopup.js:
   7:     // Fetch student data using AJAX
  14:             // Set room number in popup
  17:             // Set images and student info in popup
  20:             // Add student data to popup
  22:                 // Check if the image field is empty, assign a default avatar
  33:             // Add "Edit Room" button
  44:             // Show the popup
  47:             // Close the info popup when clicking outside

js\showPopupStudent.js:
   6:     // Fetch student data using AJAX
  12:             // Set room number in popup
  15:             // Set images and student info in popup
  18:             // Add student data to popup
  20:                 // Check if the image field is empty, assign a default avatar
  31:             // Add "Edit Room" button
  43:             // Show the popup
  46:             // Close the info popup when clicking outside

js\showStudentInfo.js:
   1: // Function to show more information about a specific student
   4:     // Fetch additional student info using AJAX
  10:             // Display additional information in a new popup
  12:             // const building = (studentInfo.genre == 'boy') ? 'boy'
  13:             // $designation = ($genre == 'boy') ? 'Etudiant :' : 'Etudiante :';
  44:             // Show the popup
  47:             // Close the info popup when clicking outside

js\StudentShowPopup.js:
  11:   // Fetch student data using AJAX
  18:       // Set room number in popup
  21:       // Set images and student info in popup
  24:       // Add student data to popup
  26:         // Check if the image field is empty, assign a default avatar
  39:       // Add "Edit Room" button
  61:       // Show the popup
  64:       // Close the info popup when clicking outside

js\StudentShowStudentInfo.js:
   1: // Function to show more information about a specific student
   4:   // Fetch additional student info using AJAX
  10:       // Display additional information in a new popup
  30:       // Show the popup
  33:       // Close the info popup when clicking outside

students\index.php:
  196:         // Room data for each floor
  262:         let currentFloor = 1; // Default to Ground Floor
  264:         // Room dimensions and layout
  271:         // Calculate total width and height
  275:         // Create SVG container
  281:         // Draw building border
  289:         // Function to update room layout based on the selected floor
  293:             // Clear existing room groups
  296:             // Create rooms for the selected floor
  309:             // Draw rooms
  315:                 .style("fill", d => getRoomColor(d.id, boysBuilding, currentFloor)) // Assign color dynamically
  318:             // Draw room numbers
  327:             // Draw bathroom
  332:                 .attr("x", 0); // Adjust the position based on room layout
  334:             // Draw stairs
  339:                 .attr("x", totalWidth - 50); // Adjust the position based on room layout
  341:             // Draw divider line
  350:         // Initial room layout for the default floor
  357:         // Function to handle floor change
  359:             // Assuming you have a reference to the selected option element
  363:         // Event listener for document click to close the dropdown
  368:             // Check if the clicked element is not inside the dropdown or its container
  370:                 // Close the dropdown by unchecking the checkbox
  375:         // Event listener for radio inputs to close the dropdown when a value is selected
  379:                 // Close the dropdown by unchecking the checkbox

TCPDF-main\CHANGELOG.TXT:
   176: 	- Fix for security vulnerability: Using the phar:// wrapper it was possible to trigger the unserialization of user provided data.
  1390: // -------------------------------------------------------------------

TCPDF-main\tcpdf_autoconfig.php:
    3: // File name   : tcpdf_autoconfig.php
    4: // Version     : 1.1.1
    5: // Begin       : 2013-05-16
    6: // Last Update : 2014-12-18
    7: // Authors     : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2011-2014 Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the License
   25: // along with TCPDF. If not, see
   26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
   28: // See LICENSE.TXT file for more information.
   29: // -------------------------------------------------------------------
   31: // Description : Try to automatically configure some TCPDF
   32: //               constants if not defined.
   43: // DOCUMENT_ROOT fix for IIS Webserver
   50: 		// define here your DOCUMENT_ROOT path if the previous fails (e.g. '/var/www')
   59: // Load main configuration file only if the K_TCPDF_EXTERNAL_CONFIG constant is set to false.
   61: 	// define a list of default config files in order of priority
   80: 	$k_path_url = K_PATH_MAIN; // default value for console mode
  240: // END OF FILE

TCPDF-main\tcpdf_barcodes_1d.php:
     3: // File name   : tcpdf_barcodes_1d.php
     4: // Version     : 1.0.027
     5: // Begin       : 2008-06-09
     6: // Last Update : 2014-10-20
     7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
     8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
     9: // -------------------------------------------------------------------
    10: // Copyright (C) 2008-2014 Nicola Asuni - Tecnick.com LTD
    12: // This file is part of TCPDF software library.
    14: // TCPDF is free software: you can redistribute it and/or modify it
    15: // under the terms of the GNU Lesser General Public License as
    16: // published by the Free Software Foundation, either version 3 of the
    17: // License, or (at your option) any later version.
    19: // TCPDF is distributed in the hope that it will be useful, but
    20: // WITHOUT ANY WARRANTY; without even the implied warranty of
    21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    22: // See the GNU Lesser General Public License for more details.
    24: // You should have received a copy of the GNU Lesser General Public License
    25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
    27: // See LICENSE.TXT file for more information.
    28: // -------------------------------------------------------------------
    30: // Description : PHP class to creates array representations for
    31: //               common 1D barcodes to be used with TCPDF.
    94: 		// send headers
    97: 		header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
    99: 		header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
   115: 		// replace table for special characters
   122: 		// print bars
   129: 				// draw a vertical bar
   149: 		// print bars
   156: 				// draw a vertical bar
   174: 		// send headers
   176: 		header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
   178: 		header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
   193: 		// calculate image size
   197: 			// GD library
   214: 		// print bars
   221: 				// draw a vertical bar
   251: 			case 'C39': { // CODE 39 - ANSI MH10.8M-1983 - USD-3 - 3 of 9.
   255: 			case 'C39+': { // CODE 39 with checksum
   259: 			case 'C39E': { // CODE 39 EXTENDED
   263: 			case 'C39E+': { // CODE 39 EXTENDED + CHECKSUM
   267: 			case 'C93': { // CODE 93 - USS-93
   271: 			case 'S25': { // Standard 2 of 5
   275: 			case 'S25+': { // Standard 2 of 5 + CHECKSUM
   279: 			case 'I25': { // Interleaved 2 of 5
   283: 			case 'I25+': { // Interleaved 2 of 5 + CHECKSUM
   287: 			case 'C128': { // CODE 128
   291: 			case 'C128A': { // CODE 128 A
   295: 			case 'C128B': { // CODE 128 B
   299: 			case 'C128C': { // CODE 128 C
   303: 			case 'EAN2': { // 2-Digits UPC-Based Extension
   307: 			case 'EAN5': { // 5-Digits UPC-Based Extension
   311: 			case 'EAN8': { // EAN 8
   315: 			case 'EAN13': { // EAN 13
   319: 			case 'UPCA': { // UPC-A
   323: 			case 'UPCE': { // UPC-E
   327: 			case 'MSI': { // MSI (Variation of Plessey code)
   331: 			case 'MSI+': { // MSI + CHECKSUM (modulo 11)
   335: 			case 'POSTNET': { // POSTNET
   339: 			case 'PLANET': { // PLANET
   343: 			case 'RMS4CC': { // RMS4CC (Royal Mail 4-state Customer Code) - CBC (Customer Bar Code)
   347: 			case 'KIX': { // KIX (Klant index - Customer index)
   351: 			case 'IMB': { // IMB - Intelligent Mail Barcode - Onecode - USPS-B-3200
   355: 			case 'IMBPRE': { // IMB - Intelligent Mail Barcode - Onecode - USPS-B-3200- pre-processed
   359: 			case 'CODABAR': { // CODABAR
   363: 			case 'CODE11': { // CODE 11
   367: 			case 'PHARMA': { // PHARMACODE
   371: 			case 'PHARMA2T': { // PHARMACODE TWO-TRACKS
   440: 			// extended mode
   447: 			// checksum
   450: 		// add start and stop codes
   458: 				// invalid character
   463: 					$t = true; // bar
   465: 					$t = false; // space
   472: 			// intercharacter gap
   561: 		$chr[48] = '131112'; // 0
   562: 		$chr[49] = '111213'; // 1
   563: 		$chr[50] = '111312'; // 2
   564: 		$chr[51] = '111411'; // 3
   565: 		$chr[52] = '121113'; // 4
   566: 		$chr[53] = '121212'; // 5
   567: 		$chr[54] = '121311'; // 6
   568: 		$chr[55] = '111114'; // 7
   569: 		$chr[56] = '131211'; // 8
   570: 		$chr[57] = '141111'; // 9
   571: 		$chr[65] = '211113'; // A
   572: 		$chr[66] = '211212'; // B
   573: 		$chr[67] = '211311'; // C
   574: 		$chr[68] = '221112'; // D
   575: 		$chr[69] = '221211'; // E
   576: 		$chr[70] = '231111'; // F
   577: 		$chr[71] = '112113'; // G
   578: 		$chr[72] = '112212'; // H
   579: 		$chr[73] = '112311'; // I
   580: 		$chr[74] = '122112'; // J
   581: 		$chr[75] = '132111'; // K
   582: 		$chr[76] = '111123'; // L
   583: 		$chr[77] = '111222'; // M
   584: 		$chr[78] = '111321'; // N
   585: 		$chr[79] = '121122'; // O
   586: 		$chr[80] = '131121'; // P
   587: 		$chr[81] = '212112'; // Q
   588: 		$chr[82] = '212211'; // R
   589: 		$chr[83] = '211122'; // S
   590: 		$chr[84] = '211221'; // T
   591: 		$chr[85] = '221121'; // U
   592: 		$chr[86] = '222111'; // V
   593: 		$chr[87] = '112122'; // W
   594: 		$chr[88] = '112221'; // X
   595: 		$chr[89] = '122121'; // Y
   596: 		$chr[90] = '123111'; // Z
   597: 		$chr[45] = '121131'; // -
   598: 		$chr[46] = '311112'; // .
   600: 		$chr[36] = '321111'; // $
   601: 		$chr[47] = '112131'; // /
   602: 		$chr[43] = '113121'; // +
   603: 		$chr[37] = '211131'; // %
   604: 		$chr[128] = '121221'; // ($)
   605: 		$chr[129] = '311121'; // (/)
   606: 		$chr[130] = '122211'; // (+)
   607: 		$chr[131] = '312111'; // (%)
   608: 		$chr[42] = '111141'; // start-stop
   651: 		// checksum
   653: 		// add start and stop codes
   661: 				// invalid character
   666: 					$t = true; // bar
   668: 					$t = false; // space
   695: 		// translate special characters
   698: 		// calculate check digit C
   712: 		// calculate check digit K
   726: 		// resto respecial characters
   781: 			// add checksum
   798: 		$seq = '110'; // left guard
   803: 				// invalid character
   808: 		$seq .= '1001'; // right guard
   834: 			// add checksum
   838: 			// add leading zero if code-length is odd
   846: 				// invalid character
   871: 					$t = true; // bar
   873: 					$t = false; // space
   907: 			// add checksum
   911: 			// add leading zero if code-length is odd
   914: 		// add start and stop codes
   924: 				// invalid character
   927: 			// create a bar-space sequence
   936: 					$t = true; // bar
   938: 					$t = false; // space
  1068: 		// ASCII characters for code A (ASCII 00 - 95)
  1074: 		// ASCII characters for code B (ASCII 32 - 127)
  1076: 		// special codes
  1079: 		// array of symbols
  1081: 		// length of the code
  1084: 			case 'A': { // MODE A
  1099: 			case 'B': { // MODE B
  1114: 			case 'C': { // MODE C
  1122: 					// the length must be even
  1135: 			default: { // MODE AUTO
  1136: 				// split code into sequences
  1138: 				// get numeric sequences (if any)
  1146: 							// non numeric sequence
  1149: 						// numeric sequence
  1152: 							// the length must be even
  1162: 					// text code (non C mode)
  1165: 				// process the sequence
  1173: 									// single character shift
  1175: 									// mark shift
  1216: 									// single character shift
  1218: 									// mark shift
  1251: 		// calculate check character
  1256: 		// add check character
  1258: 		// add stop sequence
  1261: 		// add start code at the beginning
  1263: 		// build barcode array
  1269: 					$t = true; // bar
  1271: 					$t = false; // space
  1290: 		// get A sequences (if any)
  1298: 					// B sequence
  1301: 				// A sequence
  1310: 			// only B sequence
  1329: 			$len = 12; // UPC-A
  1330: 			$upce = true; // UPC-E mode
  1336: 		// calculate check digit
  1356: 			// add check digit
  1359: 			// wrong checkdigit
  1363: 			// UPC-A
  1368: 			// convert UPC-A to UPC-E
  1371: 				// manufacturer code ends in 000, 100, or 200
  1376: 					// manufacturer code ends in 00
  1381: 						// manufacturer code ends in 0
  1384: 						// manufacturer code does not end in zero
  1392: 			'A'=>array( // left odd parity
  1403: 			'B'=>array( // left even parity
  1414: 			'C'=>array( // right
  1464: 		$seq = '101'; // left guard bar
  1471: 			$seq .= '010101'; // right guard bar
  1485: 			$seq .= '01010'; // center guard bar
  1489: 			$seq .= '101'; // right guard bar
  1497: 					$t = true; // bar
  1499: 					$t = false; // space
  1522: 		// calculate check digit
  1533: 			'A'=>array( // left odd parity
  1544: 			'B'=>array( // left even parity
  1576: 		$seq = '1011'; // left guard bar
  1579: 			$seq .= '01'; // separator
  1595: 		// bar length
  1628: 		// calculate checksum
  1639: 		// start bar
  1652: 		// end bar
  1669: 		// bar mode
  1670: 		// 1 = pos 1, length 2
  1671: 		// 2 = pos 1, length 3
  1672: 		// 3 = pos 2, length 1
  1673: 		// 4 = pos 2, length 2
  1716: 			// table for checksum calculation (row,col)
  1769: 			// start bar
  1804: 			// stop bar
  1854: 					$t = true; // bar
  1856: 					$t = false; // space
  1894: 		// calculate check digit C
  1916: 			// calculate check digit K
  1945: 					$t = true; // bar
  1947: 					$t = false; // space
  2065: 		// Conversion of Routing Code
  2093: 		// convert to hexadecimal
  2095: 		// pad to get 13 bytes
  2097: 		// convert string to array of bytes
  2101: 		// calculate frame check sequence
  2103: 		// exclude first 2 bits from first byte
  2106: 		// convert binary data to codewords
  2119: 		// generate lookup tables
  2122: 		// convert codewords to characters
  2132: 				// bitwise invert
  2139: 		// build bars
  2146: 				// full bar (F)
  2150: 				// ascender (A)
  2154: 				// descender (D)
  2158: 				// tracker (T)
  2183: 		// build bars
  2189: 					// full bar
  2195: 					// ascender
  2201: 					// descender
  2207: 					// tracker (short)
  2270: 		$genpoly = 0x0F35; // generator polynomial
  2271: 		$fcs = 0x07FF; // Frame Check Sequence
  2272: 		// do most significant byte skipping the 2 most significant bits
  2283: 		// do rest of bytes
  2324: 		$lli = 0; // LUT lower index
  2325: 		$lui = $size - 1; // LUT upper index
  2331: 			// if we don't have the right number of bits on, go on to the next value
  2334: 				// if the reverse is less than count, we have already visited this pair before
  2336: 					// If count is symmetric, place it at the first free slot from the end of the list.
  2337: 					// Otherwise, place it at the first free slot from the beginning of the list AND place $reverse ath the next free slot from the beginning of the list
  2353: } // end of class
  2355: // END OF FILE

TCPDF-main\tcpdf_barcodes_2d.php:
    3: // File name   : tcpdf_barcodes_2d.php
    4: // Version     : 1.0.015
    5: // Begin       : 2009-04-07
    6: // Last Update : 2014-05-20
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2009-2014 Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the GNU Lesser General Public License
   25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
   27: // See LICENSE.TXT file for more information.
   28: // -------------------------------------------------------------------
   30: // Description : PHP class to creates array representations for
   31: //               2D barcodes to be used with TCPDF.
   88: 		// send headers
   91: 		header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
   93: 		header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
  109: 		// replace table for special characters
  116: 		// print barcode elements
  118: 		// for each row
  121: 			// for each column
  124: 					// draw a single barcode cell
  146: 		// print barcode elements
  148: 		// for each row
  151: 			// for each column
  154: 					// draw a single barcode cell
  174: 		// send headers
  176: 		header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
  178: 		header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
  194: 		// calculate image size
  198: 			// GD library
  215: 		// print barcode elements
  217: 		// for each row
  220: 			// for each column
  223: 					// draw a single barcode cell
  256: 			case 'DATAMATRIX': { // DATAMATRIX (ISO/IEC 16022)
  263: 			case 'PDF417': { // PDF417 (ISO/IEC 15438:2006)
  266: 					$aspectratio = 2; // default aspect ratio (width / height)
  271: 					$ecl = -1; // default error correction level (auto)
  275: 				// set macro block
  284: 							// add option
  294: 			case 'QRCODE': { // QR-CODE
  297: 					$mode[1] = 'L'; // Ddefault: Low error correction
  305: 			case 'RAW2': { // RAW MODE
  306: 				// remove spaces
  312: 					// comma-separated rows
  314: 				} else { // RAW2
  315: 					// rows enclosed in square parentheses
  328: 			case 'TEST': { // TEST MODE
  345: } // end of class
  348: // END OF FILE

TCPDF-main\tcpdf_import.php:
    3: // File name   : tcpdf_import.php
    4: // Version     : 1.0.001
    5: // Begin       : 2011-05-23
    6: // Last Update : 2013-09-17
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2011-2013 Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the License
   25: // along with TCPDF. If not, see
   26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
   28: // See LICENSE.TXT file for more information.
   29: // -------------------------------------------------------------------
   31: // Description : This is a PHP class extension of the TCPDF library to
   32: //               import existing PDF documents.
   45: // include the TCPDF class
   47: // include PDF parser class
   69: 		// load document
   74: 		// configuration parameters for parser
   81: 			// parse PDF data
   86: 		// get the parsed data
   88: 		// release some memory
   91: 		// ...
   94: 		print_r($data); // DEBUG
  100: } // END OF CLASS
  103: // END OF FILE

TCPDF-main\tcpdf_parser.php:
    3: // File name   : tcpdf_parser.php
    4: // Version     : 1.0.16
    5: // Begin       : 2011-05-23
    6: // Last Update : 2015-04-28
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT GNU-LGPLv3
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2011-2015 Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the License
   25: // along with TCPDF. If not, see
   26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
   28: // See LICENSE.TXT file for more information.
   29: // -------------------------------------------------------------------
   31: // Description : This is a PHP class for parsing PDF documents.
   43: // include class for decoding filters
   90: // -----------------------------------------------------------------------------
  106: 		// find the pdf header starting position
  110: 		// get PDF content string
  112: 		// get length
  114: 		// set configuration parameters
  116: 		// get xref and trailer data
  118: 		// parse all document objects
  122: 				// decode objects with positive offset
  126: 		// release some memory
  171: 			// find last startxref
  178: 			// Already pointing at the xref table
  181: 			// Cross-Reference Stream object
  184: 			// startxref found
  189: 		// check xref position
  191: 			// Cross-Reference
  194: 			// Cross-Reference Stream
  212: 		$startxref += 4; // 4 is the length of the word 'xref'
  213: 		// skip initial white space chars: \x00 null (NUL), \x09 horizontal tab (HT), \x0A line feed (LF), \x0C form feed (FF), \x0D carriage return (CR), \x20 space (SP)
  215: 		// initialize object number
  217: 		// search for cross-reference entries or subsection
  220: 				// we are on another section
  225: 				// create unique object index: [object number]_[generation number]
  227: 				// check if object already exist
  229: 					// store object offset position
  236: 				// object number (index)
  240: 		// get trailer data
  244: 				// get only the last updated version
  246: 				// parse trailer_data
  266: 				// get previous xref
  284: 		// try to read Cross-Reference Stream
  288: 			// get only the last updated version
  307: 				// first object number in the subsection
  309: 				// number of entries in the subsection
  312: 				// get previous xref offset
  315: 				// number of bytes (in the decoded stream) of the corresponding field
  345: 		// decode data
  347: 			// number of bytes in a row
  349: 			// convert the stream into an array of integers
  351: 			// split the rows
  353: 			// initialize decoded array
  355: 			// initialize first row with zeros
  357: 			// for each row apply PNG unpredictor
  359: 				// initialize new row
  361: 				// get PNG predictor value
  363: 				// for each byte on the row
  365: 					// new index
  376: 						case 10: { // PNG prediction (on encoding, PNG None on all rows)
  380: 						case 11: { // PNG prediction (on encoding, PNG Sub on all rows)
  384: 						case 12: { // PNG prediction (on encoding, PNG Up on all rows)
  388: 						case 13: { // PNG prediction (on encoding, PNG Average on all rows)
  392: 						case 14: { // PNG prediction (on encoding, PNG Paeth on all rows)
  393: 							// initial estimate
  395: 							// distances
  400: 							// return minimum distance
  417: 						default: { // PNG prediction (on encoding, PNG optimum)
  424: 			} // end for each row
  425: 			// complete decoding
  427: 			// for every row
  429: 				// initialize new row
  432: 					// default type field
  435: 				$i = 0; // count bytes in the row
  436: 				// for every column
  438: 					// for every byte on the column
  448: 			// fill xref
  456: 					case 0: { // (f) linked list of free objects
  459: 					case 1: { // (n) objects that are in use but are not compressed
  460: 						// create unique object index: [object number]_[generation number]
  462: 						// check if object already exist
  464: 							// store object offset position
  469: 					case 2: { // compressed objects
  470: 						// $row[1] = object number of the object stream in which this object is stored
  471: 						// $row[2] = index of this object within the object stream
  476: 					default: { // null objects
  482: 		} // end decoding data
  484: 			// get previous xref
  498: 		$objtype = ''; // object type to be returned
  499: 		$objval = ''; // object value to be returned
  500: 		// skip initial white space chars: \x00 null (NUL), \x09 horizontal tab (HT), \x0A line feed (LF), \x0C form feed (FF), \x0D carriage return (CR), \x20 space (SP)
  502: 		// get first char
  504: 		// get object type
  506: 			case '%': { // \x25 PERCENT SIGN
  507: 				// skip comment and search for next token
  515: 			case '/': { // \x2F SOLIDUS
  516: 				// name object
  520: 					$objval = $matches[1]; // unescaped value
  525: 			case '(':   // \x28 LEFT PARENTHESIS
  526: 			case ')': { // \x29 RIGHT PARENTHESIS
  527: 				// literal string object
  539: 							case '\\': { // REVERSE SOLIDUS (5Ch) (Backslash)
  540: 								// skip next character
  544: 							case '(': { // LEFT PARENHESIS (28h)
  548: 							case ')': { // RIGHT PARENTHESIS (29h)
  560: 			case '[':   // \x5B LEFT SQUARE BRACKET
  561: 			case ']': { // \x5D RIGHT SQUARE BRACKET
  562: 				// array object
  566: 					// get array content
  569: 						// get element
  574: 					// remove closing delimiter
  579: 			case '<':   // \x3C LESS-THAN SIGN
  580: 			case '>': { // \x3E GREATER-THAN SIGN
  582: 					// dictionary object
  586: 						// get array content
  589: 							// get element
  594: 						// remove closing delimiter
  598: 					// hexadecimal string object
  602: 						// remove white space characters
  613: 					// indirect object
  617: 					// null object
  622: 					// boolean true object
  627: 					// boolean false object
  632: 					// start stream object
  643: 					// end stream object
  647: 					// indirect object reference
  652: 					// object start
  657: 					// numeric object
  684: 		// ignore leading zeros
  687: 			// an indirect reference to an undefined object shall be considered a reference to the null object
  690: 		// starting position of object content
  692: 		// get array of object content
  694: 		$i = 0; // object main index
  697:                         // get element
  700: 			// decode stream using stream's dictionary information
  707: 		// remove closing delimiter
  709: 		// return raw object content
  722: 			// reference to indirect object
  724: 				// this object has been already parsed
  727: 				// parse new object
  744: 		// get stream length and filters
  753: 					// get declared stream length
  760: 					// resolve indirect object
  763: 						// single filter
  766: 						// array of filters
  776: 		// decode the stream
  790: 				// add missing filter to array
  811: } // END OF TCPDF_PARSER CLASS
  814: // END OF FILE

TCPDF-main\tcpdf.php:
      3: // File name   : tcpdf.php
      4: // Version     : 6.6.5
      5: // Begin       : 2002-08-03
      6: // Last Update : 2023-09-06
      7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
      8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
      9: // -------------------------------------------------------------------
     10: // Copyright (C) 2002-2023 Nicola Asuni - Tecnick.com LTD
     12: // This file is part of TCPDF software library.
     14: // TCPDF is free software: you can redistribute it and/or modify it
     15: // under the terms of the GNU Lesser General Public License as
     16: // published by the Free Software Foundation, either version 3 of the
     17: // License, or (at your option) any later version.
     19: // TCPDF is distributed in the hope that it will be useful, but
     20: // WITHOUT ANY WARRANTY; without even the implied warranty of
     21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
     22: // See the GNU Lesser General Public License for more details.
     24: // You should have received a copy of the License
     25: // along with TCPDF. If not, see
     26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
     28: // See LICENSE.TXT file for more information.
     29: // -------------------------------------------------------------------
     31: // Description :
     32: //   This is a PHP class for generating PDF documents without requiring external extensions.
     34: // NOTE:
     35: //   This class was originally derived in 2002 from the Public
     36: //   Domain FPDF class by Olivier Plathey (http://www.fpdf.org),
     37: //   but now is almost entirely rewritten and contains thousands of
     38: //   new lines of code and hundreds new features.
     40: // Main features:
     41: //  * no external libraries are required for the basic functions;
     42: //  * all standard page formats, custom page formats, custom margins and units of measure;
     43: //  * UTF-8 Unicode and Right-To-Left languages;
     44: //  * TrueTypeUnicode, TrueType, Type1 and CID-0 fonts;
     45: //  * font subsetting;
     46: //  * methods to publish some XHTML + CSS code, Javascript and Forms;
     47: //  * images, graphic (geometric figures) and transformation methods;
     48: //  * supports JPEG, PNG and SVG images natively, all images supported by GD (GD, GD2, GD2PART, GIF, JPEG, PNG, BMP, XBM, XPM) and all images supported via ImageMagick (http://www.imagemagick.org/www/formats.html)
     49: //  * 1D and 2D barcodes: CODE 39, ANSI MH10.8M-1983, USD-3, 3 of 9, CODE 93, USS-93, Standard 2 of 5, Interleaved 2 of 5, CODE 128 A/B/C, 2 and 5 Digits UPC-Based Extension, EAN 8, EAN 13, UPC-A, UPC-E, MSI, POSTNET, PLANET, RMS4CC (Royal Mail 4-state Customer Code), CBC (Customer Bar Code), KIX (Klant index - Customer index), Intelligent Mail Barcode, Onecode, USPS-B-3200, CODABAR, CODE 11, PHARMACODE, PHARMACODE TWO-TRACKS, Datamatrix, QR-Code, PDF417;
     50: //  * JPEG and PNG ICC profiles, Grayscale, RGB, CMYK, Spot Colors and Transparencies;
     51: //  * automatic page header and footer management;
     52: //  * document encryption up to 256 bit and digital signature certifications;
     53: //  * transactions to UNDO commands;
     54: //  * PDF annotations, including links, text and file attachments;
     55: //  * text rendering modes (fill, stroke and clipping);
     56: //  * multiple columns mode;
     57: //  * no-write page regions;
     58: //  * bookmarks, named destinations and table of content;
     59: //  * text hyphenation;
     60: //  * text stretching and spacing (tracking);
     61: //  * automatic page break, line break and text alignments including justification;
     62: //  * automatic page numbering and page groups;
     63: //  * move and delete pages;
     64: //  * page compression (requires php-zlib extension);
     65: //  * XOBject Templates;
     66: //  * Layers and object visibility.
    110: // TCPDF configuration
    112: // TCPDF static font methods and data
    114: // TCPDF static font methods and data
    116: // TCPDF static color methods and data
    118: // TCPDF static image methods and data
    120: // TCPDF static methods and data
    123: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    139: 	// Protected properties
    715: 	// variables for html parser
    804: 	// --- Variables used for document encryption:
    841: 	// --- bookmark ---
    857: 	// --- javascript and form ---
   1862: 	// METHODS
   1880: 		// set file ID for trailer
   1887: 		// set pdf/a mode
   1890: 			$this->pdfa_version = $pdfa;  // 1 or 3
   1895: 		// set language direction
   1898: 		// some checks
   1900: 		// initialization of properties
   1928: 		// encryption values
   1931: 		// standard Unicode fonts
   1948: 		// set scale factor
   1950: 		// set page format and orientation
   1952: 		// page margins (1 cm)
   1957: 		// internal cell padding
   1960: 		// cell margins
   1962: 		// line width (0.2 mm)
   1968: 		// automatic page break
   1970: 		// full width display mode
   1972: 		// compression
   1974: 		// set default PDF version number
   1985: 		// signature
   1991: 		// user's rights
   1999: 		// set default JPEG quality
   2001: 		// initialize some settings
   2003: 		// set default font
   2007: 		// check if PCRE Unicode support is enabled
   2009: 			// PCRE unicode support is turned ON
   2010: 			// \s     : any whitespace character
   2011: 			// \p{Z}  : any separator
   2012: 			// \p{Lo} : Unicode letter or ideograph that does not have lowercase and uppercase variants. Is used to chunk chinese words.
   2013: 			// \xa0   : Unicode Character 'NO-BREAK SPACE' (U+00A0)
   2017: 			// PCRE unicode support is turned OFF
   2021: 		// set document creation and modification timestamp
   2024: 		// get default graphic vars
   2037: 		// cleanup
   2051: 			// points
   2057: 			// millimeters
   2062: 			// centimeters
   2067: 			// inches
   2072: 			// unsupported unit
   2141: 			// remove inherited values
   2145: 			// get page measures from format name
   2150: 			// the boundaries of the physical medium on which the page shall be displayed or printed
   2160: 						// default value
   2169: 			// the visible region of default user space
   2173: 			// the region to which the contents of the page shall be clipped when output in a production environment
   2177: 			// the intended dimensions of the finished page after trimming
   2181: 			// the page's meaningful content (including potential white space)
   2185: 			// specify the colours and other visual characteristics that should be used in displaying guidelines on the screen for the various page boundaries
   2190: 				// The number of degrees by which the page shall be rotated clockwise when displayed or printed. The value shall be a multiple of 90.
   2194: 				// The page's preferred zoom (magnification) factor
   2198: 				// The style and duration of the visual transition to use when moving from another page to the given page during a presentation
   2200: 					// The page's display duration
   2205: 					// The transition style that shall be used when moving to this page from another during a presentation
   2235: 					// The duration of the transition effect, in seconds
   2255: 			// the boundaries of the physical medium on which the page shall be displayed or printed
   2259: 			// the visible region of default user space
   2263: 			// the region to which the contents of the page shall be clipped when output in a production environment
   2267: 			// the intended dimensions of the finished page after trimming
   2271: 			// the page's meaningful content (including potential white space)
   2275: 			// The number of degrees by which the page shall be rotated clockwise when displayed or printed. The value shall be a multiple of 90.
   2279: 			// The page's preferred zoom (magnification) factor
   2283: 			// landscape
   2286: 			// portrait
   2305: 			// swap X and Y coordinates (change page orientation)
   2321: 				// default value = 2 cm
   2326: 		// store page dimensions
   2362: 		// get pattern parts
   2369: 		// set pattern modifiers
   2607: 			// overwrite original values
   2757: 			// convert string to array
   2774: 		// store current cell padding
   2776: 		// select border mode
   2783: 		// process borders
   2787: 				// get border width
   2790: 			$adj = 0; // line width inside the cell
   2806: 			// correct internal cell padding if required to avoid overlap between text and lines
   3001: 		// unset all class variables
   3039: 			// save current graphic settings
   3055: 			// restore graphic settings
   3058: 		// close page
   3060: 		// close document
   3062: 		// unset all class variables (except critical ones)
   3080: 			// save current graphic settings
   3095: 			// restore graphic settings
   3102: 				// account for booklet mode
   3183: 			// we are inside an XObject template
   3192: 		// terminate previous page
   3194: 		// start new page
   3206: 		// check if page is already closed
   3210: 		// print page footer
   3212: 		// close page
   3214: 		// mark page as closed
   3235: 		// move page numbers of documents to be attached
   3237: 			// move reference to unexistent pages (used for page attachments)
   3238: 			// adjust outlines
   3245: 			// adjust dests
   3252: 			// adjust links
   3261: 			// this page has been already added
   3266: 		// start a new page
   3272: 		// save current graphic settings
   3274: 		// start new page
   3276: 		// mark page as open
   3278: 		// restore graphic settings
   3280: 		// mark this point
   3282: 		// print page header
   3284: 		// restore graphic settings
   3286: 		// mark this point
   3288: 		// print table header (if any)
   3290: 		// set mark for empty page check
   3473: 			// start a new XObject Template
   3497: 			// set starting margin for text data cell
   3505: 			// header title
   3509: 			// header string
   3513: 			// print an ending header line
   3524: 		// print header template
   3528: 			// adjust margins for booklet mode
   3538: 			// reset header xobject template at each page
   3641: 		// save current graphic settings
   3643: 		// mark this point
   3677: 		// restore graphic settings
   3681: 		// calculate footer length
   3703: 			// multi column mode
   3707: 			// restore the original top-margin
   3713: 			// set margins
   3725: 			// account for special "cell" mode
   3735: 				// set the correct graphic style
   3740: 			// print table header
   3743: 			// set new top margin to skip the table headers
   3747: 			// store end of header position
   3843: 			// we are inside an XObject template
   3899: 			// component: grey, RGB red or CMYK cyan
   3901: 			// component: RGB green or CMYK magenta
   3903: 			// component: RGB blue or CMYK yellow
   3905: 			// component: CMYK black
   3907: 			// color name
   3972: 		// set default values
   3985: 		// set color by case
   3988: 			// Grey scale
   3994: 			// RGB
   4007: 				// CMYK
   4012: 				// SPOT COLOR
   4130: 		// store current values
   4137: 		// convert UTF-8 array to Latin1 if required
   4141: 		$w = 0; // total width
   4142: 		$wa = array(); // array of characters widths
   4144: 			// character width
   4149: 		// restore previous values
   4169: 		// get raw width
   4172: 			// increase/decrease font spacing
   4176: 			// fixed stretching mode
   4192: 			// SHY character will not be printed
   4198: 			// default width
   4201: 			// default width
   4266: 		// move embedded styles on $style
   4275: 		// normalize family name
   4284: 			// all fonts must be embedded
   4289: 		// underline
   4295: 		// line-through (deleted)
   4301: 		// overline
   4307: 		// bold
   4311: 		// oblique
   4319: 		// check if the font has been already added
   4323: 				// we are inside an XObject template
   4328: 		// get specified font directory (if any)
   4338: 		// true when the font style variation is missing
   4340: 		// search and include font file
   4342: 			// build a standard filenames for specified font
   4347: 				// try to remove the style part
   4352: 		// include font file
   4374: 		// check font parameters
   4378: 		// SET default parameters
   4405: 			// set default width
   4429: 		// set name if unset
   4433: 		// create artificial font style variations if missing (only works with non-embedded fonts)
   4435: 			// style variations
   4438: 			// artificial bold
   4441: 					// from normal to bold
   4444: 					// bold
   4448: 			// artificial italic
   4462: 		// check if the array of characters bounding boxes is defined
   4466: 		// initialize subsetchars
   4470: 			// we are inside an XObject template
   4497: 				// update fontkeys that are sharing this font file
   4532: 		// try to add font (if not already added)
   4537: 			// save subset chars of the previous font
   4554: 		// font size in points
   4556: 		// font size in user units
   4558: 		// calculate some font metrics
   4572: 			// core font
   4599: 			// Find max width
   4645: 			// glyph is defined ... use zero width & height for glyphs without outlines
   4708: 			// get character code
   4745: 				// this character is missing on the selected font
   4747: 					// we have available substitutions
   4782: 		// create a new internal link
   4801: 			// this page number will not be changed when moving/add/deleting pages
   4845: 			// store parameters for later use on template
   4855: 		// check page for no-write regions and adapt page margins if necessary
   4857: 		// recalculate coordinates to account for graphic transformations
   4868: 						// top left
   4873: 						// top right
   4878: 						// bottom left
   4883: 						// bottom right
   4888: 						// new coordinates (rectangle area)
   4915: 		// Add widgets annotation's icons
   4935: 			// embedded files are not allowed in PDF/A mode version 1 and 2
   4944: 					// update name tree
   4946: 					// embedded file specification object
   4954: 					// embedded file object
   5005: 		// restore previous rendering mode
   5021: 			// multi column mode
   5023: 				// go to next column
   5026: 				// add a new page
   5028: 				// set first column
   5031: 			// avoid page breaking from checkPageBreak()
   5075: 			// account for columns mode
   5111: 		// apply text shadow if enabled
   5113: 			// save data
   5120: 			// print shadow
   5170: 		// replace 'NO-BREAK SPACE' (U+00A0) character with a simple space
   5185: 		// check page for no-write regions and adapt page margins if necessary
   5195: 		// cell vertical alignment
   5198: 				// font top
   5201: 						// top
   5206: 						// bottom
   5213: 						// center
   5221: 				// font baseline
   5224: 						// top
   5229: 						// bottom
   5236: 						// center
   5244: 				// font bottom
   5247: 						// top
   5252: 						// bottom
   5259: 						// center
   5267: 				// cell bottom
   5273: 				// cell center
   5279: 				// cell top
   5283: 		// text vertical alignment
   5286: 				// top
   5291: 				// bottom
   5298: 				// center
   5312: 		// fill and borders
   5314: 			// full border
   5330: 		// draw borders
   5338: 					$unicode = TCPDF_FONTS::UTF8StringToArray($txt, $this->isunicode, $this->CurrentFont); // array of UTF-8 unicode values
   5340: 					// replace thai chars (if any)
   5342: 						// number of chars
   5344: 						// po pla, for far, for fan
   5346: 						// do chada, to patak
   5348: 						// mai hun arkad, sara i, sara ii, sara ue, sara uee
   5350: 						// mai ek, mai tho, mai tri, mai chattawa, karan
   5352: 						// sara u, sara uu, pinthu
   5363: 										// sara um
   5365: 											// tonemark at upper left
   5368: 											// tonemark at upper right (normal position)
   5372: 										// tonemark at lower left
   5376: 											// tonemark at upper left
   5379: 											// tonemark at upper right (normal position)
   5383: 										// tonemark at lower right
   5387: 									// add lower left nikhahit and sara aa
   5398: 										// lower left mai hun arkad
   5401: 										// lower left
   5404: 										// lower left mai tai koo
   5407: 										// normal character
   5411: 									// lower vowel
   5414: 									// yo ying without lower part
   5417: 									// tho santan without lower part
   5423: 								// non-thai character
   5428: 						// update font subsetchars
   5430: 					} // end of K_THAI_TOPCHARS
   5435: 			// get current text width (considering general font stretching and spacing)
   5438: 			// check for stretch mode
   5440: 				// calculate ratio between cell width and text width
   5446: 				// check if stretching is required
   5448: 					// the text will be stretched to fit cell width
   5450: 						// set new character spacing
   5453: 						// set new horizontal stretching
   5456: 					// recalculate text width (the text fills the entire cell)
   5458: 					// reset alignment
   5463: 				// apply font stretching
   5467: 				// increase/decrease font spacing
   5473: 			// rendering mode
   5475: 			// count number of spaces
   5477: 			// Justification
   5481: 					// get string width without spaces
   5483: 					// calculate average space width
   5486: 						// word spacing is affected by stretching
   5489: 					// set word position to be used with TJ operator
   5493: 					// get string width
   5495: 					// new space width
   5498: 						// word spacing (Tw) is affected by stretching
   5501: 					// set word spacing
   5506: 			// replace carriage return characters
   5545: 			// print text
   5547: 			if (isset($uniblock)) { // @phpstan-ignore-line
   5548: 				// print overlapping characters as separate string
   5549: 				$xshift = 0; // horizontal shift
   5552: 				foreach ($uniblock as $uk => $uniarr) { // @phpstan-ignore-line
   5554: 						// x space to skip
   5556: 							// justification shift
   5559: 						$xshift += $this->GetArrStringWidth($uniarr); // + shift justification
   5561: 						// character to print
   5584: 		// output cell
   5586: 			// output cell
   5589: 				// reset font spacing mode
   5593: 				// reset font stretching mode
   5597: 		// reset word spacing
   5601: 		// reset stretching and spacing
   5616: 			// go left or right by case
   5640: 			// add the new char on the subset list
   5642: 			// return the new character
   5645: 		// return the old char
   5662: 		$s = ''; // string to be returned
   5669: 		// calculate coordinates for border
   5685: 			// convert string to array
   5701: 				// apply border style
   5747: 			// draw borders by case
   5751: 				if (strpos($border,'B') === false) { // LTR
   5757: 				} elseif (strpos($border,'L') === false) { // TRB
   5763: 				} elseif (strpos($border,'T') === false) { // RBL
   5769: 				} elseif (strpos($border,'R') === false) { // BLT
   5777: 				if ((strpos($border,'L') !== false) AND (strpos($border,'T') !== false)) { // LT
   5782: 				} elseif ((strpos($border,'T') !== false) AND (strpos($border,'R') !== false)) { // TR
   5787: 				} elseif ((strpos($border,'R') !== false) AND (strpos($border,'B') !== false)) { // RB
   5792: 				} elseif ((strpos($border,'B') !== false) AND (strpos($border,'L') !== false)) { // BL
   5797: 				} elseif ((strpos($border,'L') !== false) AND (strpos($border,'R') !== false)) { // LR
   5804: 				} elseif ((strpos($border,'T') !== false) AND (strpos($border,'B') !== false)) { // TB
   5812: 			} else { // strlen($border) == 1
   5813: 				if (strpos($border,'L') !== false) { // L
   5817: 				} elseif (strpos($border,'T') !== false) { // T
   5821: 				} elseif (strpos($border,'R') !== false) { // R
   5825: 				} elseif (strpos($border,'B') !== false) { // B
   5832: 				// reset border style to previous value
   5867: 		// adjust internal padding
   5875: 			// reset row height
   5879: 			$this->setY($y); // set y in order to convert negative y values to positive ones
   5884: 			// spit cell in more pages/columns
   5886: 			$resth = ($h - $newh); // cell to be printed on the next page/column
   5889: 		// get current page number
   5891: 		// get current column
   5898: 		// check page for no-write regions and adapt page margins if necessary
   5900: 		// apply margins
   5909: 		// set width
   5917: 		// store original margin values
   5930: 			// add top padding
   5933: 		if ($ishtml) { // ******* Write HTML text
   5936: 		} else { // ******* Write simple text
   5939: 				// ajust height values
   5943: 			// vertical alignment
   5945: 				// get text height
   5948: 					// try to reduce font size to fit text on cell (use a quick search algorithm)
   5951: 					$diff_epsilon = (1 / $this->k); // one point (min resolution)
   5952: 					$maxit = (2 * min(100, max(10, intval($fmax)))); // max number of iterations
   5970: 						// premature exit, we get the minimum font value to fit the cell
   5981: 						// text vertically centered
   5984: 						// text vertically aligned on bottom
   5991: 				// restore font size
   5996: 			// add bottom padding
   5999: 		// Get end-of-text Y position
   6001: 		// get latest page number
   6008: 					// add a page (or trig AcceptPageBreak() for multicolumn mode)
   6021: 		// get latest column
   6026: 		// disable page regions check
   6029: 		// get border modes
   6033: 		// design borders around HTML cells.
   6034: 		for ($page = $startpage; $page <= $endpage; ++$page) { // for each page
   6038: 				// single-column mode
   6042: 			// account for margin changes
   6051: 				// single page
   6052: 				for ($column = $startcolumn; $column <= $endcolumn; ++$column) { // for each column
   6061: 					if ($startcolumn == $endcolumn) { // single column
   6065: 					} elseif ($column == $startcolumn) { // first column
   6069: 					} elseif ($column == $endcolumn) { // end column
   6075: 					} else { // middle column
   6081: 				} // end for each column
   6082: 			} elseif ($page == $startpage) { // first page
   6083: 				for ($column = $startcolumn; $column < $this->num_columns; ++$column) { // for each column
   6092: 					if ($column == $startcolumn) { // first column
   6096: 					} else { // middle column
   6102: 				} // end for each column
   6103: 			} elseif ($page == $endpage) { // last page
   6104: 				for ($column = 0; $column <= $endcolumn; ++$column) { // for each column
   6114: 						// end column
   6121: 						// middle column
   6127: 				} // end for each column
   6128: 			} else { // middle page
   6129: 				for ($column = 0; $column < $this->num_columns; ++$column) { // for each column
   6140: 				} // end for each column
   6144: 				// draw border and fill
   6146: 					// we are inside an XObject template
   6177: 		} // end for each page
   6178: 		// restore page regions check
   6180: 		// Get end-of-cell Y position
   6182: 		// restore previous values
   6186: 			// restore original margins
   6190: 				// check for margin variations between pages (i.e. booklet mode)
   6206: 			// go left or right by case
   6237: 			// empty string
   6240: 		// adjust internal padding
   6256: 			// reset row height
   6308: 	 *  // store current object
   6310: 	 *  // store starting values
   6313: 	 *  // call your printing functions with your parameters
   6314: 	 *  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   6316: 	 *  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   6317: 	 *  // get the new Y
   6320: 	 *  // calculate height
   6328: 	 *  			// first page
   6331: 	 *  			// last page
   6338: 	 *  // restore previous object
   6352: 		// adjust internal padding
   6385: 		// check page for no-write regions and adapt page margins if necessary
   6388: 			// fix empty text
   6392: 			// set default margins
   6395: 		// remove carriage returns
   6397: 		// check if string contains arabic text
   6403: 		// check if string contains RTL text
   6409: 		// get a char width
   6410: 		$chrwidth = $this->GetCharWidth(46); // dot character
   6411: 		// get array of unicode values
   6413: 		// calculate maximum width for a single character on string
   6417: 		// get array of chars
   6419: 		// get the number of characters
   6421: 		// replacement for SHY character (minus symbol)
   6424: 		// widht for SHY replacement
   6426: 		// page width
   6428: 		// calculate remaining line width ($w)
   6434: 		// max column width
   6440: 			// the maximum width character do not fit on column
   6443: 		// minimum row height
   6445: 		// max Y
   6448: 		$i = 0; // character position
   6449: 		$j = 0; // current starting position
   6450: 		$sep = -1; // position of the last blank space
   6451: 		$prevsep = $sep; // previous separator
   6452: 		$shy = false; // true if the last blank is a soft hypen (SHY)
   6453: 		$prevshy = $shy; // previous shy mode
   6454: 		$l = 0; // current string length
   6457: 		$pc = 0; // previous character
   6458: 		// for each character
   6465: 			if ($c == 10) { // 10 = "\n" = new line
   6499: 				// Skip newlines at the beginning of a page or column
   6514: 				// account for margin changes
   6530: 				// 160 is the non-breaking space.
   6531: 				// 173 is SHY (Soft Hypen).
   6532: 				// \p{Z} or \p{Separator}: any kind of Unicode whitespace or invisible separator.
   6533: 				// \p{Lo} or \p{Other_Letter}: a Unicode letter or ideograph that does not have lowercase and uppercase variants.
   6534: 				// \p{Lo} is needed because Chinese characters are packed next to each other without spaces in between.
   6545: 					// update last blank space position
   6548: 					// check if is a SHY
   6563: 				// update string length
   6565: 					// with bidirectional algorithm some chars may be changed affecting the line length
   6566: 					// *** very slow ***
   6576: 					// we have reached the end of column
   6578: 						// check if the line was already started
   6581: 							// print a void cell and go to next line
   6588: 							// truncate the word because do not fit on column
   6622: 						// word wrapping
   6628: 						// check the length of the next string
   6632: 							// truncate the word because do not fit on a full page width
   6665: 							// word wrapping
   6667: 								// add hypen (minus symbol) at the end of the line
   6701: 							// print the line
   6711: 								// return the remaining text
   6721: 					// account for margin changes
   6744: 			// save last character
   6747: 		} // end while i < nb
   6748: 		// print last substring (if any)
   6836: 			// set maximum width
   6843: 			// set maximum height
   6849: 		// resize the block to be vertically contained on a single page or single column
   6856: 			// resize the block to be horizontally contained on a single page or single column
   6865: 		// Check whether we need a new page or new column first as this does not fit
   6877: 		// resize the block to be contained on the remaining available page or column space
   6879: 			// fallback to avoid division by zero
   6941: 		// check page for no-write regions and adapt page margins if necessary
   6943: 		$exurl = ''; // external streams
   6946:         // Make sure the file variable is not empty or null because accessing $file[0] later
   6947:         // results in error when running PHP 7.4
   6951: 		// check if we are passing an image as file or string
   6953: 			// image from string
   6955: 		} else { // image file
   6957: 				// image as external stream
   6961: 			// check if file exist and it is valid
   6972: 			// copy image to cache
   6990: 				// get measures from specified data
   6998: 		// file hash
   7000: 		// get original image width and height in pixels
   7002: 		// calculate image width and height on document
   7004: 			// convert image size to document unit
   7013: 				// set default alignment
   7016: 			// scale image dimensions proportionally to fit within the ($w, $h) box
   7018: 				// store current height
   7020: 				// calculate new height
   7022: 				// height difference
   7024: 				// vertical alignment
   7039: 				// store current width
   7041: 				// calculate new width
   7043: 				// width difference
   7045: 				// horizontal alignment
   7070: 		// fit the image on available space
   7072: 		// calculate new minimum dimensions in pixels
   7075: 		// check if resize is necessary (resize is used only to reduce the image)
   7083: 		// check if image has been already added on document
   7087: 			// get existing image data
   7090: 				// check if the newer image is larger
   7097: 			// create temp image file (without alpha channel)
   7099: 			// create temp alpha file
   7101: 			// check for cached images
   7103: 				// get existing image data
   7105: 				// check if the newer image is larger
   7111: 					// embed mask image
   7113: 					// embed image, masked with previously embedded mask
   7126: 			// Specific image handlers (defined on TCPDF_IMAGES CLASS)
   7128: 			// GD image handler function
   7132: 				// TCPDF image functions
   7141: 					// GD library
   7164: 					// ImageMagick library
   7168: 							// image from string
   7171: 							// get SVG file content
   7175: 							// get width and height
   7224: 				// unable to process image
   7228: 				// force grayscale
   7237: 			// array of alternative images
   7239: 			// add image to document
   7242: 		// set alignment
   7246: 		// set alignment
   7258: 			// image is not displayed
   7263: 			// only non-alternative immages will be set
   7281: 		// set pointer to align the next text/objects
   7308: 			// we are inside an XObject template
   7336: 		// create temp images
   7340: 		// create temp image file (without alpha channel)
   7342: 		// create temp alpha file
   7346: 		// ImageMagick extension
   7349: 				// ImageMagick library
   7352: 				// clone image object
   7354: 				// extract alpha channel
   7358: 					$img->separateImageChannel(8); // 8 = (imagick::CHANNEL_ALPHA | imagick::CHANNEL_OPACITY | imagick::CHANNEL_MATTE);
   7363: 				// remove alpha channel
   7367: 					$imga->separateImageChannel(39); // 39 = (imagick::CHANNEL_ALL & ~(imagick::CHANNEL_ALPHA | imagick::CHANNEL_OPACITY | imagick::CHANNEL_MATTE));
   7373: 				// Imagemagick fails, try with GD
   7377: 		// GD extension
   7380: 				// generate images
   7383: 				// generate gray scale palette (0 -> 255)
   7387: 				// extract alpha channel
   7391: 						// get and correct gamma color
   7398: 				// extract image without alpha channel
   7405: 				// GD fails
   7416: 		// embed mask image
   7418: 		// embed image, masked with previously embedded mask
   7432: 			// GD alpha is only 7 bit (0 -> 127)
   7434: 			// correct gamma
   7436: 			// store the latest values on cache to improve performances
   7438: 				// remove one element from the cache array
   7456: 			// revove vertical space from the top of the column
   7658: 			// *** apply digital signature to the document ***
   7659: 			// get the document content
   7661: 			// remove last newline
   7663: 			// remove filler space
   7665: 			// define the ByteRange
   7672: 			// replace the ByteRange
   7676: 			// write the document to a temporary folder
   7685: 			// get digital signature via openssl library
   7692: 			// read signature
   7694: 			// extract signature
   7699: 			// decode signature
   7701: 			// add TSA timestamp to signature
   7703: 			// convert signature to hex
   7706: 			// Add signature to the document
   7712: 				// Send PDF to the standard output
   7717: 					// send output to a browser
   7723: 					//header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
   7725: 					header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
   7736: 				// download PDF as file
   7745: 				//header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
   7747: 				header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
   7749: 				// force download dialog
   7758: 				// use the Content-Disposition header to supply a recommended filename
   7768: 				// save PDF to a local file
   7776: 					// send headers to browser
   7779: 					//header('Cache-Control: public, must-revalidate, max-age=0'); // HTTP/1.1
   7781: 					header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
   7786: 					// send headers to browser
   7796: 					header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); // Date in the past
   7798: 					// force download dialog
   7807: 					// use the Content-Disposition header to supply a recommended filename
   7815: 				// return PDF as base64 mime multi-part email attachment (RFC 2045)
   7825: 				// returns PDF as a string
   7849: 			// remove all temporary files
   7912: 		// build array of Unicode + ASCII variants (the order is important)
   7952: 				// find position of compensation factor
   7956: 					// end of alias
   7958: 					// string to be replaced
   7960: 					// get compensation factor
   7999: 		// get internal aliases for page numbers
   8011: 			// get current page
   8014: 			// set replacements for total pages number
   8018: 			$pdiff = 0; // difference used for right shift alignment of page numbers
   8019: 			$gdiff = 0; // difference used for right shift alignment of page group numbers
   8032: 				// replace page numbers
   8040: 			// replace page numbers
   8047: 			// replace right shift alias
   8049: 			// replace EPS marker
   8100: 				// page transitions
   8170: 			// add radiobutton groups
   8180: 			// set reference for signature object
   8186: 					// set reference for empty signature objects
   8204: 		// reset object counter
   8207: 				// set page annotations
   8210: 					// create annotation object for grouping radiobuttons
   8218: 							// read only
   8222: 							$annots .= ' /F 4'; // default print for PDF/A
   8247: 						// store object id to be used on Parent entry of Kids
   8257: 					// create new annotation object
   8329: 						// force print flag for PDF/A mode
   8337: 						// appearance stream
   8341: 								// $apmode can be: n = normal; r = rollover; d = down;
   8346: 										// reference to XObject that define the appearance for this mode-state
   8352: 									// reference to XObject that define the appearance for this mode
   8418: 						// this is a markup type
   8439: 					// Annotation types
   8482: 									// internal destination
   8485: 									// embedded PDF file
   8489: 									// embedded generic file
   8496: 										// relative link to a PDF file
   8497: 										$dest = '[0 /Fit]'; // default page 0
   8499: 											// check for named destination
   8505: 										// external URI link
   8510: 								// internal link ID
   8603: 								// embedded files are not allowed in PDF/A mode version 1 and 2
   8618: 								// index (zero-based) of the annotation in the Annots array of this page
   8629: 								// ... TO BE COMPLETED ...
   8630: 								// /R /C /B /E /CO /CP
   8709: 							} // end MK
   8710: 							// --- Entries for field dictionaries ---
   8712: 								// set parent
   8726: 									// array of bit settings
   8833: 					// create new annotation object
   8836: 						// store reference of form object
   8841: 		} // end for each page
   8891: 			// search and get font file to embedd
   8899: 						// strip first binary header
   8903: 						// strip second binary header
   8908: 						// uncompress font
   8911: 					// merge subset characters
   8912: 					$subsetchars = array(); // used chars
   8917: 					// rebuild a font subset
   8919: 					// calculate new font length
   8922: 						// recompress font
   8949: 				// standard core font
   8959: 					// add default font for annotations
   8966: 				// additional Type1 or TrueType font
   8985: 				// Widths
   9014: 				// additional types
   9035: 			// change name for font subsetting
   9041: 		// Type0 Font
   9042: 		// A composite font composed of other fonts, organized hierarchically
   9054: 		// ToUnicode map for Identity-H
   9056: 		// ToUnicode Object
   9062: 		// CIDFontType2
   9063: 		// A CIDFont whose glyph descriptions are based on TrueType font technology
   9068: 		// A dictionary containing entries that define the character collection of the CIDFont.
   9074: 		$out .= ' /DW '.$font['dw']; // default width
   9082: 		// Font descriptor
   9083: 		// A font descriptor describing the CIDFont default metrics other than its glyph widths
   9095: 			// A stream containing a TrueType font
   9104: 			// Embed CIDToGIDMap
   9105: 			// A specification of the mapping from CIDs to glyph indices
   9106: 			// search and get CTG font file to embedd
   9108: 			// search and get ctg font file to embedd
   9115: 			if (substr($fontfile, -2) == '.z') { // check file extension
   9116: 				// Decompresses data encoded using the public-domain
   9117: 				// zlib/deflate compression method, reproducing the
   9118: 				// original text or binary data
   9142: 			// convert unicode to cid.
   9150: 				} // else unknown character
   9210: 			// set object for alternate images array
   9231: 			// set image object
   9242: 			// set color space
   9245: 				// ICC Colour Space
   9249: 				// Indexed Colour Space
   9252: 				// Device Colour Space
   9260: 				// reference to alternate images dictionary
   9264: 				// external stream
   9286: 								// this is not a binary type mask @TODO: create a SMask
   9290: 								// store the first fully transparent value
   9295: 						// grayscale or RGB
   9302: 					// Colour Key Masking
   9314: 				// ICC colour profile
   9320: 				// colour palette
   9354: 					// transparency
   9371: 							// gradient patterns
   9373: 							// gradient shadings
   9380: 				// spot colors
   9388: 				// fonts
   9396: 				// images or nested xobjects
   9409: 					// set transparency group
   9483: 		// layers
   9492: 			// transparency
   9509: 					// gradient patterns
   9511: 					// gradient shadings
   9518: 		// spot colors
   9561: 		// store current isunicode value
   9567: 			// The document's title.
   9571: 			// The name of the person who created the document.
   9575: 			// The subject of the document.
   9579: 			// Keywords associated with the document.
   9583: 			// If the document was converted to PDF from another format, the name of the conforming product that created the original document from which it was converted.
   9586: 		// restore previous isunicode value
   9588: 		// default producer
   9590: 		// The date and time the document was created, in human-readable form
   9592: 		// The date and time the document was most recently modified, in human-readable form
   9594: 		// A name object indicating whether the document has been modified to include trapping information
   9632: 		// store current isunicode value
   9637: 		// set XMP data
   9664: 		// convert doc creation date format
   9670: 		// convert doc modification date format
   9697: 		// XMP extension schemas
   9767: 		// restore previous isunicode value
   9780: 		// put XMP
   9782: 		// if required, add standard sRGB ICC colour profile
   9794: 		// start catalog
   9846: 		// set OutputIntent to sRGB IEC61966-2.1 if required
   9892: 		// AcroForm
   9899: 				// set reference for signature object
   9904: 					// set reference for empty signature objects
   9914: 			// It's better to turn off this value and set the appearance stream for each annotation (/AP) to avoid conflicts with signature fields.
   9939: 			// signatures
  10049: 			// save subset chars of the previous font
  10056: 		// empty signature fields
  10059: 				// widget annotation for empty signature
  10064: 				$out .= ' /P '.$this->page_obj_id[($esa['page'])].' 0 R'; // link to signature appearance page
  10075: 		// Signature
  10077: 			// widget annotation for signature
  10082: 			$out .= ' /P '.$this->page_obj_id[($this->signature_appearance['page'])].' 0 R'; // link to signature appearance page
  10091: 			// signature
  10094: 		// Info
  10096: 		// Catalog
  10098: 		// Cross-ref
  10100: 		// XREF section
  10113: 		// TRAILER
  10128: 		$this->state = 3; // end-of-doc
  10142: 		// initialize array for graphics tranformation positions inside a page buffer
  10149: 				// landscape
  10152: 				// portrait
  10169: 			// start a new group
  10391: 			// default to current object
  10405: 				// we are inside an XObject template
  10408: 				// puts data before page footer
  10413: 				// update footer position
  10416: 				// set page data
  10420: 			// set general data
  10509: 			// convert url to internal link
  10522: 		// store current settings
  10536: 		// restore settings
  10564: 	// ENCRYPTION METHODS ----------------------------------
  10577: 		if ($this->encryptdata['mode'] == 2) { // AES-128
  10578: 			// AES padding
  10579: 			$objkey .= "\x73\x41\x6C\x54"; // sAlT
  10600: 			case 0:   // RC4-40
  10601: 			case 1: { // RC4-128
  10605: 			case 2: { // AES-128
  10609: 			case 3: { // AES-256
  10639: 		// V is a code specifying the algorithm to be used in encrypting and decrypting the document
  10642: 			// The length of the encryption key, in bits. The value shall be a multiple of 8, in the range 40 to 256
  10652: 				// The name of the crypt filter that shall be used when decrypting all strings in the document.
  10655: 			// A dictionary whose keys shall be crypt filter names and whose values shall be the corresponding crypt filter dictionaries.
  10661: 					// The method used
  10679: 					// The event to be used to trigger the authorization that is required to access encryption keys used by this filter.
  10685: 					// The bit length of the encryption key.
  10690: 			// The name of the crypt filter that shall be used by default when decrypting streams.
  10692: 			// The name of the crypt filter that shall be used when decrypting all strings in the document.
  10695: 				// The name of the crypt filter that shall be used when encrypting embedded file streams that do not have their own crypt filter specifier.
  10699: 		// Additional encryption dictionary entries for the standard security handler
  10710: 			if ($this->encryptdata['V'] == 5) { // AES-256
  10715: 			} elseif ($this->encryptdata['V'] == 4) { // AES-128
  10717: 			} elseif ($this->encryptdata['V'] < 2) { // RC-40
  10719: 			} else { // RC-128
  10744: 		if ($this->encryptdata['mode'] == 0) { // RC4-40
  10746: 		} elseif ($this->encryptdata['mode'] < 3) { // RC4-128, AES-128
  10759: 		} elseif ($this->encryptdata['mode'] == 3) { // AES-256
  10761: 			// User Validation Salt
  10763: 			// User Key Salt
  10789: 		if ($this->encryptdata['mode'] < 3) { // RC4-40, RC4-128, AES-128
  10809: 		} elseif ($this->encryptdata['mode'] == 3) { // AES-256
  10811: 			// Owner Validation Salt
  10813: 			// Owner Key Salt
  10840: 		$psw = ''; // password to be returned
  10856: 		if (!$this->encryptdata['pubkey']) { // standard mode
  10857: 			if ($this->encryptdata['mode'] == 3) { // AES-256
  10858: 				// generate 256 bit random key
  10860: 				// truncate passwords
  10863: 				// Compute U value
  10865: 				// Compute UE value
  10867: 				// Compute O value
  10869: 				// Compute OE value
  10871: 				// Compute P value
  10873: 				// Computing the encryption dictionary's Perms (permissions) value
  10874: 				$perms = TCPDF_STATIC::getEncPermissionsString($this->encryptdata['protection']); // bytes 0-3
  10875: 				$perms .= chr(255).chr(255).chr(255).chr(255); // bytes 4-7
  10876: 				if (isset($this->encryptdata['CF']['EncryptMetadata']) AND (!$this->encryptdata['CF']['EncryptMetadata'])) { // byte 8
  10881: 				$perms .= 'adb'; // bytes 9-11
  10882: 				$perms .= 'nick'; // bytes 12-15
  10884: 			} else { // RC4-40, RC4-128, AES-128
  10885: 				// Pad passwords
  10888: 				// Compute O value
  10890: 				// get default permissions (reverse byte order)
  10892: 				// Compute encryption key
  10900: 				// Compute U value
  10902: 				// Compute P value
  10905: 		} else { // Public-Key mode
  10906: 			// random 20-byte seed
  10910: 				// for each public certificate
  10916: 				// get default permissions (reverse byte order)
  10918: 				// envelope data
  10920: 				// write the envelope data to a temporary file
  10933: 				// read encryption signature
  10935: 				// extract signature
  10940: 				// decode signature
  10942: 				// convert signature to hex
  10944: 				// store signature on recipients array
  10946: 				// The bytes of each item in the Recipients array of PKCS#7 objects in the order in which they appear in the array
  10949: 			// calculate encryption key
  10950: 			if ($this->encryptdata['mode'] == 3) { // AES-256
  10952: 			} else { // RC4-40, RC4-128, AES-128
  10974: 			// encryption is not allowed in PDF/A mode
  10979: 			// public-key mode
  10982: 				// public-Key Security requires at least 128 bit
  10988: 			// Set Public-Key filter (available are: Entrust.PPKEF, Adobe.PPKLite, Adobe.PubSec)
  10994: 			// standard mode (password mode)
  11000: 		if ($mode > 1) { // AES
  11011: 				// the Hash extension requires no external libraries and is enabled by default as of PHP 5.1.2.
  11022: 			case 0: { // RC4 40 bit
  11028: 			case 1: { // RC4 128 bit
  11038: 			case 2: { // AES 128 bit
  11049: 			case 3: { // AES 256 bit
  11066: 	// END OF ENCRYPTION FUNCTIONS -------------------------
  11068: 	// START TRANSFORMATIONS SECTION -----------------------
  11084: 			// we are inside an XObject template
  11111: 			// we are inside an XObject template
  11385: 		// add tranformation matrix
  11387: 		// update transformation mark
  11389: 			// we are inside an XObject template
  11400: 	// END TRANSFORMATIONS SECTION -------------------------
  11402: 	// START GRAPHIC FUNCTIONS SECTION ---------------------
  11403: 	// The following section is based on the code provided by David Hernandez Sanz
  11456: 		$s = ''; // string to be returned
  11652: 			// set background color
  11661: 				// remove stroke operator from style
  11839: 			// center of the arc
  11859: 			// reverse rotation
  11862: 			// reverse rotation
  11869: 		// total arcs to draw
  11872: 		// angle of each arc
  11874: 		// center point in PDF coordinates
  11877: 		// starting angle
  11884: 		// first arc point
  11887: 		// first Bezier control point
  11891: 			// line from center to arc starting point
  11894: 			// arc starting point
  11897: 		// draw arcs
  11899: 			// starting angle
  11906: 			// second arc point
  11909: 			// second Bezier control point
  11912: 			// draw arc
  11920: 			// get bounding box coordinates
  11925: 			// move to next point
  11933: 			// get bounding box coordinates
  11998: 		$nc = count($p); // number of coordinates
  11999: 		$np = $nc / 2; // number of points
  12001: 			// close polygon by adding the first 2 points at the end (one line)
  12005: 			// copy style for the last added line
  12025: 					// draw fill
  12033: 				// draw outline
  12209: 			// Not rounded
  12213: 		// Rounded
  12275: 		// getting arrow direction angle
  12276: 		// 0 deg angle is when both arms go along X axis. angle grows clockwise.
  12285: 			// calculate the stopping point for the arrow shaft
  12289: 		// main arrow line / shaft
  12291: 		// left arrowhead arm tip
  12294: 		// right arrowhead arm tip
  12301: 				// draw only arrowhead arms
  12307: 				// draw closed arrowhead, but no fill
  12312: 				// closed and filled arrowhead
  12317: 				// filled arrowhead
  12325: 	// END GRAPHIC FUNCTIONS SECTION -----------------------
  12340: 		// remove unsupported characters
  12362: 			// this page number will not be changed when moving/add/deleting pages
  12466: 			// this page number will not be changed when moving/add/deleting pages
  12484: 		// get sorting columns
  12491: 		// sort outlines by page and original position
  12506: 		// sort bookmarks
  12537: 			// covert HTML title to string
  12558: 				// link
  12561: 						// internal destination
  12564: 						// embedded PDF file
  12568: 						// embedded generic file
  12573: 						// external URI link
  12577: 					// internal link ID
  12584: 				// link to a page
  12587: 			// set font style
  12590: 				// bold
  12594: 				// oblique
  12600: 			// set bookmark color
  12605: 				// black
  12608: 			$out .= ' /Count 0'; // normally closed item
  12618: 	// --- JAVASCRIPT ------------------------------------------------------
  12642: 			// javascript is not allowed in PDF/A mode
  12664: 			// the following two lines are used to avoid form fields duplication after saving
  12665: 			// The addField method only works when releasing user rights (UR3)
  12670: 		// name tree for javascript
  12683: 		// default Javascript object
  12692: 		// additional Javascript objects
  12718: 		// the followind avoid fields duplication after saving the document
  12739: 	// --- FORM FIELDS -----------------------------------------------------
  12786: 		// check page for no-write regions and adapt page margins if necessary
  12792: 		// get default style
  12794: 		// get annotation data
  12796: 		// set default appearance stream
  12800: 		// build appearance stream
  12837: 		// merge options
  12839: 		// remove some conflicting options
  12841: 		// set remaining annotation data
  12845: 		// Additional annotation's parameters (check _putannotsobj() method):
  12907: 		// check page for no-write regions and adapt page margins if necessary
  12921: 		// set font
  12924: 			// all fonts must be embedded
  12929: 		// set data for parent group
  12940: 		// save object ID to be added on Kids entry on parent object
  12942: 		// get default style
  12947: 		// get annotation data
  12949: 		// set additional default options
  12953: 		// build appearance stream
  12964: 		// merge options
  12966: 		// set remaining annotation data
  12975: 		// store readonly flag
  13010: 		// check page for no-write regions and adapt page margins if necessary
  13025: 		// get default style
  13027: 		// get annotation data
  13029: 		// set additional default values
  13033: 		// build appearance stream
  13051: 		// merge options
  13053: 		// set remaining annotation data
  13096: 		// check page for no-write regions and adapt page margins if necessary
  13111: 		// get default style
  13114: 		// get annotation data
  13116: 		// set additional default options
  13120: 		// build appearance stream
  13138: 		// merge options
  13140: 		// set remaining annotation data
  13183: 		// check page for no-write regions and adapt page margins if necessary
  13192: 		// get default style
  13195: 		// get annotation data
  13197: 		// set additional default options
  13200: 			// all fonts must be embedded
  13208: 		// build appearance stream
  13215: 		// merge options
  13217: 		// set remaining annotation data
  13263: 		// check page for no-write regions and adapt page margins if necessary
  13273: 		// get default style
  13278: 		// get annotation data
  13283: 		// build appearance stream
  13287: 		$bw = (2 / $this->k); // border width
  13300: 		// set additional default options
  13311: 		// merge options
  13313: 		// set remaining annotation data
  13320: 				// form action options as on section 12.7.5 of PDF32000_2008.
  13401: 				// Javascript action or raw action command
  13414: 	// --- END FORMS FIELDS ------------------------------------------------
  13435: 			$out .= ' /Reference ['; // array of signature reference dictionaries
  13467: 			$out .= ' >>'; // close TransformParams
  13468: 			// optional digest data (values must be calculated and replaced later)
  13474: 			$out .= ' ]'; // end of reference
  13549: 		// to create self-signed signature: openssl req -x509 -nodes -days 365000 -newkey rsa:1024 -keyout tcpdf.crt -out tcpdf.crt
  13550: 		// to export crt to p12: openssl pkcs12 -export -in tcpdf.crt -out tcpdf.p12
  13551: 		// to convert pfx certificate to pem: openssl
  13552: 		//     OpenSSL> pkcs12 -in <cert.pfx> -out <cert.crt> -nodes
  13555: 		$this->sig_obj_id = $this->n; // signature widget
  13556: 		++$this->n; // signature object ($this->sig_obj_id + 1)
  13719: 		// calculate aproximatively the ratio between widths of aliases and replacements.
  13884: 			// close existing open marked-content layer
  13933: 			// transparencies are not allowed in PDF/A mode
  13936: 		// check if this ExtGState already exist
  13940: 					// we are inside an XObject template
  13943: 				// return reference to existing ExtGState
  13950: 			// we are inside an XObject template
  13964: 			// transparency is not allowed in PDF/A-1 mode
  14010: 			// default value if not set
  14045: 			// transparency is not allowed in PDF/A-1 mode
  14050: 			// default value if not set
  14056: 			// remove trailing slash
  14130: 			// PDF/A-1 mode
  14133:             // PDF/A-2 mode
  14168: 			// expand spot colors
  14181: 		$numbars = count($bars); // number of bars to print
  14185: 		// set bar measures
  14188: 			$wb = $w / $numbars; // bar width
  14189: 			$hb = $h; // bar height
  14190: 			$xd = $wb; // delta x
  14191: 			$yd = 0; // delta y
  14194: 			$wb = $w; // bar width
  14195: 			$hb = $h / $numbars; // bar height
  14196: 			$xd = 0; // delta x
  14197: 			$yd = $hb; // delta y
  14203: 				// set transition colors
  14204: 				case 'A': { // BLACK (GRAYSCALE)
  14209: 				case 'W': { // WHITE (GRAYSCALE)
  14214: 				case 'R': { // RED (RGB)
  14219: 				case 'G': { // GREEN (RGB)
  14224: 				case 'B': { // BLUE (RGB)
  14229: 				case 'C': { // CYAN (CMYK)
  14234: 				case 'M': { // MAGENTA (CMYK)
  14239: 				case 'Y': { // YELLOW (CMYK)
  14244: 				case 'K': { // KEY - BLACK (CMYK)
  14249: 				case 'RGB': { // BLACK REGISTRATION (RGB)
  14254: 				case 'CMYK': { // BLACK REGISTRATION (CMYK)
  14259: 				case 'ALL': { // SPOT COLOR REGISTRATION
  14264: 				case 'NONE': { // SKIP THIS COLOR
  14269: 				default: { // SPECIFIC SPOT COLOR NAME
  14273: 						// in case of error defaults to the registration color
  14281: 					// color gradient
  14285: 					// colored rectangle
  14310: 		// split type in single components
  14322: 		// remove duplicates
  14324: 		$dw = ($w / 4); // horizontal space to leave before the intersection point
  14325: 		$dh = ($h / 4); // vertical space to leave before the intersection point
  14405: 		// line width
  14407: 		// internal radius
  14409: 		// external radius
  14411: 		// Cyan
  14414: 		// Magenta
  14417: 		// Yellow
  14420: 		// Key - black
  14423: 		// registration color
  14426: 		// external circle
  14428: 		// cross lines
  14566: 			// we are inside an XObject template
  14619: 		// color space
  14623: 			case 5:   // SPOT
  14624: 			case 4: { // CMYK
  14631: 			case 3: { // RGB
  14638: 			case 1: { // GRAY SCALE
  14650: 			// offset represents a location along the gradient vector
  14671: 			// exponent for the exponential interpolation function
  14677: 			// set colors
  14680: 				case 5:   // SPOT
  14681: 				case 4: { // CMYK
  14685: 				case 3: { // RGB
  14689: 				case 1: { // GRAY SCALE
  14696: 			// paint luminosity gradient
  14704: 			// we are inside an XObject template
  14757: 				// set transparency functions
  14789: 			// set shading object
  14834: 			// set pattern object
  14842: 			// set shading and pattern for transparency mask
  14844: 				// luminosity pattern
  14856: 				// luminosity XObject
  14879: 				// SMask
  14883: 				// ExtGState
  14977: 			// convert EPS to raster image using GD or ImageMagick libraries
  14986: 		// check page for no-write regions and adapt page margins if necessary
  14989: 		if ($file[0] === '@') { // image from string
  14991: 		} else { // EPS/AI file
  14998: 		// EPS/AI compatibility check (only checks files created by Adobe Illustrator!)
  15010: 		// strip binary bytes in front of PS-header
  15015: 		// find BoundingBox params
  15037: 		// calculate image width and height on document
  15046: 		// fit the image on available space
  15049: 			// convert EPS to raster image using GD or ImageMagick libraries
  15052: 		// set scaling factors
  15055: 		// set alignment
  15057: 		// set alignment
  15088: 		// save the current graphic state
  15090: 		// translate
  15092: 		// scale
  15094: 		// handle pc/unix/mac line endings
  15104: 			// check for spot color names
  15108: 					// extract spot color name
  15110: 					// remove color name from string
  15112: 					// remove pharentesis from color name
  15118: 			// RGB
  15128: 				// check for values outside the bounding box
  15133: 						// skip values outside bounding box
  15168: 				case 'x': {// custom fill color
  15170: 						// CMYK color
  15174: 						// Spot Color (CMYK + tint)
  15182: 				case 'X': { // custom stroke color
  15184: 						// CMYK color
  15188: 						// Spot Color (CMYK + tint)
  15239: 		// restore previous graphic state
  15256: 		// set pointer to align the next text/objects
  15338: 		// save current graphic settings
  15340: 		// create new barcode object
  15349: 		// set default values
  15353: 			// keep this for backward compatibility
  15365: 			// disable stretch
  15376: 			$style['fgcolor'] = array(0,0,0); // default black
  15379: 			$style['bgcolor'] = false; // default transparent
  15403: 		// check page for no-write regions and adapt page margins if necessary
  15412: 		// padding
  15420: 		// horizontal padding
  15428: 		// vertical padding
  15436: 		// calculate xres (single bar width)
  15442: 				$xres = (0.141 * $this->k); // default bar width = 0.4 mm
  15445: 				// correct xres to fit on $w
  15488: 		// height
  15490: 			// set default height
  15495: 			// try to reduce font or padding to fit barcode on available height
  15506: 		// fit the barcode on available space
  15508: 		// set alignment
  15510: 		// set alignment
  15554: 		// barcode is always printed in LTR direction
  15557: 		// print background color
  15563: 		// set foreground color
  15566: 		// print bars
  15570: 				// draw a vertical bar
  15576: 		// print text
  15587: 			// print text
  15595: 		// restore original direction
  15597: 		// restore previous settings
  15599: 		// set pointer to align the next text/objects
  15656: 		// save current graphic settings
  15658: 		// create new barcode object
  15664: 		// set default values
  15669: 			$style['fgcolor'] = array(0,0,0); // default black
  15672: 			$style['bgcolor'] = false; // default transparent
  15677: 		// padding
  15695: 		// cell (module) dimension
  15697: 			$style['module_width'] = 1; // width of a single module in points
  15700: 			$style['module_height'] = 1; // height of a single module in points
  15708: 		// check page for no-write regions and adapt page margins if necessary
  15710: 		// number of barcode columns and rows
  15716: 		// module width and height
  15722: 		// get max dimensions
  15739: 		// set maximum dimensions
  15746: 		// set dimensions
  15755: 		// barcode size (excluding padding)
  15758: 		// dimension of single barcode cell unit
  15763: 				// correct horizontal distortion
  15768: 				// correct vertical distortion
  15774: 		// fit the barcode on available space
  15776: 		// set alignment
  15778: 		// set alignment
  15804: 		// barcode is always printed in LTR direction
  15807: 		// print background color
  15813: 		// set foreground color
  15815: 		// print barcode cells
  15816: 		// for each row
  15819: 			// for each column
  15822: 					// draw a single barcode cell
  15829: 		// restore original direction
  15831: 		// restore previous settings
  15833: 		// set pointer to align the next text/objects
  16042: 		$border = array(); // value to be returned
  16093: 		$cell_padding = array(); // value to be returned
  16147: 		$cell_margin = array(); // value to be returned
  16201: 		$border_spacing = array(); // value to be returned
  16234: 		$val = 0; // value to be returned
  16265: 		$val = 100; // value to be returned
  16392: 		// array of CSS styles ( selector => properties).
  16394: 		// get CSS array defined at previous call
  16402: 		// extract external CSS files
  16410: 					// get 'all' and 'print' media, other media types are discarded
  16411: 					// (all, braille, embossed, handheld, print, projection, screen, speech, tty, tv)
  16415: 							// read CSS data file
  16425: 		// extract style tags
  16431: 				// get 'all' and 'print' media, other media types are discarded
  16432: 				// (all, braille, embossed, handheld, print, projection, screen, speech, tty, tv)
  16439: 		// create a special tag to contain the CSS array (used for table content)
  16441: 		// remove head and style blocks
  16444: 		// define block tags
  16446: 		// define self-closing tags
  16448: 		// remove all unsupported tags (the line below lists all supported tags)
  16451: 		$html = preg_replace('/<pre/', '<xre', $html); // preserve pre tag
  16461: 				// preserve newlines on <pre> tag
  16465: 				// preserve spaces on <pre> tag
  16476: 				// preserve newlines on <textarea> tag
  16501: 		// restore textarea newlines
  16503: 		// remove extra spaces from code
  16514: 		$html = preg_replace('/<xre/', '<pre', $html); // restore pre tag
  16518: 		$html = preg_replace('/<([^\>\/]*)>[\s]/', '<\\1>&nbsp;', $html); // preserve some spaces
  16519: 		$html = preg_replace('/[\s]<\/([^\>]*)>/', '&nbsp;</\\1>', $html); // preserve some spaces
  16520: 		$html = preg_replace('/<su([bp])/', '<zws/><su\\1', $html); // fix sub/sup alignment
  16521: 		$html = preg_replace('/<\/su([bp])>/', '</su\\1><zws/>', $html); // fix sub/sup alignment
  16522: 		$html = preg_replace('/'.$this->re_space['p'].'+/'.$this->re_space['m'], chr(32), $html); // replace multiple spaces with a single space
  16523: 		// trim string
  16525: 		// fix br tag after li
  16527: 		// fix first image tag alignment
  16529: 		// pattern for generic tag
  16531: 		// explodes the string
  16533: 		// count elements
  16537: 		// create an array of elements
  16540: 		// set inheritable properties fot the first void element
  16541: 		// possible inheritable properties are: azimuth, border-collapse, border-spacing, caption-side, color, cursor, direction, empty-cells, font, font-family, font-stretch, font-size, font-size-adjust, font-style, font-variant, font-weight, letter-spacing, line-height, list-style, list-style-image, list-style-position, list-style-type, orphans, page, page-break-inside, quotes, speak, speak-header, text-align, text-indent, text-transform, volume, white-space, widows, word-spacing
  16557: 		$dom[$key]['fgcolor'] = $this->fgcolor; // color
  16565: 		$thead = false; // true when we are inside the THEAD tag
  16568: 		array_push($level, 0); // root
  16574: 				// html tag
  16576: 				// get tag name
  16579: 				// check if we are inside a table header
  16597: 					// *** closing html tag
  16620: 					// set the number of columns in table tag
  16630: 						// mark nested tables
  16632: 						// remove thead sections from nested tables
  16636: 					// store header rows on a new table
  16651: 						// header elements must be always contained in a single page
  16655: 						// remove the nobr attributes from the table header
  16660: 					// *** opening or self-closing html tag
  16664: 						// self-closing tag
  16667: 						// opening tag
  16671: 					// copy some values from parent
  16695: 					// get attributes
  16697: 					$dom[$key]['attribute'] = array(); // reset attribute array
  16702: 						// merge CSS style to current style
  16706: 					// split style attributes
  16708: 						// get style attributes
  16710: 						$dom[$key]['style'] = array(); // reset style attribute array
  16712:                             // in case of duplicate attribute the last replace the previous
  16715: 						// --- get some style attributes ---
  16716: 						// text direction
  16720: 						// display
  16724: 						// font family
  16728: 						// list-style-type
  16735: 						// text-indent
  16742: 						// text-transform
  16746: 						// font size
  16751: 						// font-stretch
  16755: 						// letter-spacing
  16759: 						// line-height (internally is the cell height ratio)
  16763: 								// A normal line height. This is default
  16773: 										// convert to percentage of font height
  16787: 						// font style
  16800: 						// font color
  16806: 						// background color
  16810: 						// text-decoration
  16817: 										// underline
  16820: 										// line-through
  16823: 										// overline
  16831: 						// check for width attribute
  16835: 						// check for height attribute
  16839: 						// check for text alignment
  16843: 						// check for CSS border properties
  16936: 						// check for CSS padding properties
  16947: 						// check for CSS margin properties
  16958: 						// check for CSS border-spacing properties
  16962: 						// page-break-inside
  16966: 						// page-break-before
  16976: 						// page-break-after
  16996: 					// check for font tag
  16998: 						// font family
  17002: 						// font size
  17017: 					// force natural alignment for lists
  17050: 						// headings h1, h2, h3, h4, h5, h6
  17060: 						$dom[$key]['rows'] = 0; // number of rows
  17061: 						$dom[$key]['trids'] = array(); // IDs of TR elements
  17062: 						$dom[$key]['thead'] = ''; // table header rows
  17068: 							// rows on thead block are printed as a separate table
  17076: 							// store the number of rows on table element
  17083: 							// store the TR elements IDs on table element
  17096: 					// text direction
  17100: 					// set foreground color attribute
  17106: 					// set background color attribute
  17110: 					// set stroke color attribute
  17114: 					// check for width attribute
  17118: 					// check for height attribute
  17122: 					// check for text alignment
  17126: 					// check for text rendering mode (the following attributes do not exist in HTML)
  17128: 						// font stroke width
  17132: 						// font fill
  17140: 						// clipping mode
  17147: 				} // end opening tag
  17149: 				// text
  17155: 					// text-transform for unicode requires mb_convert_case (Multibyte String Functions)
  17279: 		// store current values
  17305: 		$reverse_dir = false; // true when the text direction is reversed
  17308: 			// we are inside an XObject template
  17316: 			// we are inside an XObject template
  17326: 			// we are inside the footer
  17352: 		// save previous states
  17363: 			// reset row height
  17371: 				// store the node key
  17374: 					// skip just this self-closing tag
  17377: 					// skip this and all children tags
  17379: 						// skip hidden objects
  17387: 				// check for pagebreak
  17389: 					// add a page (or trig AcceptPageBreak() for multicolumn mode)
  17395: 					// add a page (or trig AcceptPageBreak() for multicolumn mode)
  17404: 					// store current object
  17406: 					// save this method vars
  17450: 			// print THEAD block
  17454: 					// print table header (thead)
  17456: 					// check if we are on a new page or on a new column
  17458: 						// we are on a new page or on a new column and the total object height is less than the available vertical space.
  17459: 						// restore previous object
  17461: 						// restore previous values
  17465: 						// disable table header
  17468: 						// add a page (or trig AcceptPageBreak() for multicolumn mode)
  17471: 							// fix for multicolumn mode
  17476: 						// restore table header
  17478: 						// fix table border properties
  17492: 						// print table header (thead)
  17496: 				// move $key index forward to skip THEAD block
  17507: 				// vertically align image in line
  17509: 					// get image height
  17517: 							// add automatic line break
  17521: 								// go back to evaluate this line break
  17529: 							// check for page break
  17531: 								// fix for multicolumn mode
  17536: 							// fix line splitted over two pages
  17540: 							// line to be moved one page forward
  17545: 							// remove line from previous page
  17550: 							// add line start to current page
  17557: 							// shift the annotations and links
  17584: 					// account for different font size
  17604: 								// fix lines splitted over two pages
  17608: 								// line to be moved one page forward
  17613: 								// remove line start from previous page
  17618: 								// add line start to current page
  17622: 								// shift the annotations and links
  17666: 						// reset row height
  17675: 				// set text rendering mode
  17689: 				// get current position on page buffer
  17710: 			// align lines
  17714: 				// we are at the beginning of a new line
  17721: 					// the last line must be shifted to be aligned as requested
  17724: 						// we are inside an XObject template
  17760: 						// calculate shifting amount
  17772: 						$no = 0; // number of spaces on a line contained on a single block
  17773: 						if ($this->isRTLTextDir()) { // RTL
  17774: 							// remove left space if exist
  17794: 						} else { // LTR
  17795: 							// remove right space if exist
  17820: 							// right alignment on LTR document
  17823: 							// left alignment on RTL document
  17826: 							// Justification
  17828: 								// align text on the left
  17831: 							$ns = 0; // number of spaces
  17833: 							// escape special characters
  17836: 							// search spaces
  17841: 									// restore special characters
  17844: 									// store number of spaces on the strings
  17846: 									// count total spaces on line
  17853: 								// calculate additional space to add to each existing space
  17860: 									// fixed spacing mode
  17875: 									// check if we are inside a string section '[( ... )]'
  17878: 										// set offset to the end of string section
  17903: 											// shift EPS images
  17914: 									// shift blocks of code
  17920: 											// get current X position
  17934: 											// justify block
  17943: 											// justify block
  17955: 											if ($this->isRTLTextDir()) { // RTL
  17965: 											} else { // LTR
  17990: 											// get current X position
  17996: 											// justify block
  18008: 									// shift the annotations and links
  18012: 										// we are inside an XObject template
  18037: 								} // end of while
  18038: 								// remove markers
  18041: 									// multibyte characters
  18044: 										// word spacing is affected by stretching
  18047: 									// escape special characters
  18066: 										// we are inside an XObject template
  18073: 									// non-unicode (single-byte characters)
  18075: 										// word spacing (Tw) is affected by stretching
  18081: 										// we are inside an XObject template
  18089: 						} // end of J
  18090: 					} // end if $startlinex
  18092: 						// shift the line
  18097: 							// we are inside an XObject template
  18107: 							// shift the annotations and links
  18137: 						// we are inside an XObject template
  18165: 			} // end newline
  18171: 					// get text indentation (if any)
  18176: 					// table
  18178: 						// available page width
  18184: 						// get cell spacing
  18193: 						// table width
  18208: 						// total table width without cellspaces
  18210: 						// minimum column width
  18212: 						// array of custom column widths
  18215: 					// table row
  18217: 						// reset column counter
  18220: 					// table cell
  18227: 						// store border info
  18247: 							// minimum cell height
  18260: 							// move $key index forward
  18291: 						// skip row-spanned cells started on the previous rows
  18299: 								// account for margin changes
  18315: 									// set the starting X position of the current cell
  18317: 									// increment column indicator
  18325: 										// set ending Y position for row
  18336: 							// user specified width
  18343: 							// inherit column width
  18350: 						// increment column indicator
  18352: 						// add rowspan information to table element
  18360: 						// push background colors
  18364: 						// store border info
  18369: 						// store some info for multicolumn mode
  18377: 						// ****** write the cell content ******
  18379: 						// restore some values
  18384: 						// update the end of row position
  18406: 							// account for row-spanned cells
  18413: 							// update endy and endpage on rowspanned cells
  18432: 						// opening tag (or self-closing tag)
  18435: 								// we are inside an XObject template
  18448: 				} else { // closing tag
  18460: 				// print list-item
  18479: 				// text
  18483: 					// reverse spaces order
  18484: 					$lsp = ''; // left spaces
  18485: 					$rsp = ''; // right spaces
  18498: 							// right trim except non-breaking space
  18501: 							// left trim except non-breaking space
  18513: 					// replace empty multiple spaces string with a single space
  18525: 						// HTML <a> Link
  18536: 						$wadj = 0; // space to leave for block continuity
  18543: 							// check the next text blocks for continuity
  18553: 										// end of block
  18577: 								// try to split on blank spaces
  18580: 								// set the entire block on new line
  18584: 						// check for reversed text direction
  18586: 							// LTR text on RTL direction or RTL text on LTR direction
  18589: 							$revshift = ($strlinelen + $wadj + 0.000001); // add little quantity for rounding problems
  18597: 						// ****** write only until the end of the line and get the rest ******
  18599: 						// restore default direction
  18601: 							$this->x = $xws; // @phpstan-ignore-line
  18609: 					// store the remaining string on the previous $key position
  18612: 						// used to avoid infinite loop
  18630: 					// add the positive font spacing of the last character (if any)
  18642: 				// check if we are on a new page or on a new column
  18644: 					// we are on a new page or on a new column and the total object height is less than the available vertical space.
  18645: 					// restore previous object
  18647: 					// restore previous values
  18654: 					// add a page (or trig AcceptPageBreak() for multicolumn mode)
  18659: 					$undo = true; // avoid infinite loop
  18664: 		} // end for each $key
  18665: 		// align the last line
  18672: 			// the last line must be shifted to be aligned as requested
  18675: 				// we are inside an XObject template
  18711: 				// calculate shifting amount
  18720: 				$no = 0; // number of spaces on a line contained on a single block
  18721: 				if ($this->isRTLTextDir()) { // RTL
  18722: 					// remove left space if exist
  18742: 				} else { // LTR
  18743: 					// remove right space if exist
  18768: 					// right alignment on LTR document
  18771: 					// left alignment on RTL document
  18774: 			} // end if startlinex
  18776: 				// shift the line
  18781: 					// we are inside an XObject template
  18791: 					// shift the annotations and links
  18805: 		// restore previous values
  18813: 		// restore previous list state
  18840: 		// check for text direction attribute
  18847: 			$hbz = 0; // distance from y to line bottom
  18848: 			$hb = 0; // vertical space between block tags
  18849: 			// calculate vertical space for block tags
  18877: 				// fix vertical space after table
  18880: 			// closing vertical space
  18900: 		// Opening tag
  18908: 					// set table header
  18910: 						// set table header
  18923: 				// store current margins and page
  18939: 					// add a page (or trig AcceptPageBreak() for multicolumn mode)
  18945: 				// array of columns positions
  19014: 					// data stream
  19021:                     // get image type from a local file path
  19026: 						// fix image path
  19038: 							// convert URL to server path
  19041: 							// convert URL to server path
  19045: 					// get image type
  19055: 					// the only alignment supported is "bottom"
  19056: 					// further development is required for other modes.
  19083: 						// convert url to internal link
  19102: 					// currently only support 1 (frame) or a combination of 'LTRB'
  19194: 					// ordered item
  19209: 					// unordered item
  19266: 			// Form fields (since 4.8.000 - 2009-09-07)
  19410: 						// THIS TYPE MUST BE FIXED
  19512: 					// Special tag used to call TCPDF methods
  19532: 		// define tags that support borders and background colors
  19535: 			// set border
  19540: 			// check for pagebreak
  19542: 				// add a page (or trig AcceptPageBreak() for multicolumn mode)
  19547: 				// add a page (or trig AcceptPageBreak() for multicolumn mode)
  19568: 		// maximum x position (used to draw borders)
  19575: 			$hbz = 0; // distance from y to line bottom
  19576: 			$hb = 0; // vertical space between block tags
  19577: 			// calculate vertical space for block tags
  19603: 		// Closing tag
  19619: 				// update row-spanned cells
  19633: 					// report new endy and endpage to the rowspanned cells
  19644: 					// update remaining rowspanned cells
  19659: 						// page jump
  19679: 				// account for booklet mode
  19690: 				// closing tag used for the thead part
  19695: 				// set default border
  19697: 					// set default border
  19703: 				// fix bottom line alignment of last line before page break
  19705: 					// update row-spanned cells
  19719: 						// update row-spanned cells
  19732: 				// for each row
  19741: 					// for each cell on the row
  19774: 						// get border modes
  19778: 						// design borders around HTML cells.
  19779: 						for ($page = $startpage; $page <= $endpage; ++$page) { // for each page
  19783: 								// single-column mode
  19787: 							// account for margin changes
  19795: 							if ($startpage == $endpage) { // single page
  19798: 								for ($column = $startcolumn; $column <= $endcolumn; ++$column) { // for each column
  19800: 									if ($startcolumn == $endcolumn) { // single column
  19805: 									} elseif ($column == $startcolumn) { // first column
  19815: 									} elseif ($column == $endcolumn) { // end column
  19822: 									} else { // middle column
  19831: 								} // end for each column
  19832: 							} elseif ($page == $startpage) { // first page
  19835: 								for ($column = $startcolumn; $column < $this->num_columns; ++$column) { // for each column
  19837: 									if ($column == $startcolumn) { // first column
  19847: 									} else { // middle column
  19856: 								} // end for each column
  19857: 							} elseif ($page == $endpage) { // last page
  19860: 								for ($column = 0; $column <= $endcolumn; ++$column) { // for each column
  19862: 									if ($column == $endcolumn) { // end column
  19869: 									} else { // middle column
  19878: 								} // end for each column
  19879: 							} else { // middle page
  19882: 								for ($column = 0; $column < $this->num_columns; ++$column) { // for each column
  19891: 								} // end for each column
  19895: 								// draw border and fill
  19897: 									// we are inside an XObject template
  19911: 									// draw border and fill
  19926: 						} // end for each page
  19927: 						// restore default border
  19929: 					} // end for each cell on the row
  19945: 				if (!$in_table_head) { // we are not inside a thead section
  19947: 					// reset row height
  19954: 								// the difference is only a font setting
  19959: 							// remove last blank page
  19964: 						// restore top margin
  19968: 						// reset main table header
  20072: 			// Form fields (since 4.8.000 - 2009-09-07)
  20082: 		// draw border and background (if any)
  20086: 			// check for pagebreak
  20088: 				// add a page (or trig AcceptPageBreak() for multicolumn mode)
  20093: 				// add a page (or trig AcceptPageBreak() for multicolumn mode)
  20154: 			// nothing to draw
  20164: 			// get border style
  20167: 				// border for table header
  20172: 			// get background color
  20178: 			// nothing to draw
  20190: 			// draw the border externally respect the sqare edge.
  20216: 		// get latest column
  20221: 		// get border modes
  20225: 		// temporary disable page regions
  20228: 		// design borders around HTML cells.
  20229: 		for ($page = $startpage; $page <= $endpage; ++$page) { // for each page
  20233: 				// single-column mode
  20237: 			// account for margin changes
  20246: 				// single page
  20247: 				for ($column = $startcolumn; $column <= $endcolumn; ++$column) { // for each column
  20249: 					if ($startcolumn == $endcolumn) { // single column
  20253: 					} elseif ($column == $startcolumn) { // first column
  20257: 					} elseif ($column == $endcolumn) { // end column
  20260: 					} else { // middle column
  20265: 				} // end for each column
  20266: 			} elseif ($page == $startpage) { // first page
  20267: 				for ($column = $startcolumn; $column < $this->num_columns; ++$column) { // for each column
  20269: 					if ($column == $startcolumn) { // first column
  20273: 					} else { // middle column
  20278: 				} // end for each column
  20279: 			} elseif ($page == $endpage) { // last page
  20280: 				for ($column = 0; $column <= $endcolumn; ++$column) { // for each column
  20283: 						// end column
  20287: 						// middle column
  20292: 				} // end for each column
  20293: 			} else { // middle page
  20294: 				for ($column = 0; $column < $this->num_columns; ++$column) { // for each column
  20299: 				} // end for each column
  20303: 				// draw border and fill
  20305: 					// we are inside an XObject template
  20335: 		} // end for each page
  20336: 		// restore page regions
  20339: 			// restore background color
  20342: 		// restore pointer position
  20355: 		// check for custom image symbol
  20395: 			// swap left and right margins
  20487: 			// percentage
  20492: 			// relative-size
  20497: 			// height of lower case 'x' (about half the font-size)
  20502: 			// absolute-size
  20507: 			// centimeters
  20512: 			// millimeters
  20517: 			// one pica is 12 points
  20522: 			// points
  20527: 			// pixels
  20561: 			// special symbol used for avoid justification of rect bullet
  20565: 			// set default list type for unordered list
  20569: 			// set default list type for ordered list
  20572: 			// custom image type ('img|type|width|height|image.ext')
  20577: 			// unordered types
  20603: 				$this->_out($prev_line_style); // restore line settings
  20618: 				// 1=>type, 2=>width, 3=>height, 4=>image.ext
  20645: 			// ordered types
  20646: 			// $this->listcount[$this->listnum];
  20647: 			// $textitem
  20684: 			// Types to be implemented (special handling)
  20715: 			// Check whether we need a new page or new column
  20721: 			// print ordered item
  20737: 		// restore colors
  20782: 			// extended
  20846: 			// restore extended values
  21011: 			// store object ID for current font
  21060: 			// close the page before moving it
  21063: 		// move all page-related states
  21099: 			// shift pages down
  21162: 		// adjust outlines
  21173: 		// adjust dests
  21184: 		// adjust links
  21195: 		// adjust javascript
  21214: 		// return to last page
  21230: 		// delete current page
  21267: 			// update remaining pages
  21270: 				// shift pages
  21311: 			// remove last page
  21351: 		// adjust outlines
  21362: 		// adjust dests
  21373: 		// adjust links
  21384: 		// adjust javascript
  21402: 		// return to last page
  21418: 			// default value
  21424: 		// close the last page
  21426: 		// copy all page-related states
  21450: 			// start a new group
  21457: 		// copy outlines
  21464: 		// copy links
  21471: 		// return to last page
  21525: 			// check for extra pages (used for attachments)
  21542: 			// check for page break
  21544: 			// set margins and X position
  21572: 			// write the text
  21588: 				// placemark to be replaced with the correct number
  21612: 			// write the number
  21617: 		// account for booklet mode
  21619: 			// check if a blank page is required before TOC
  21623: 				// add a page at the end (to be moved before TOC)
  21629: 				// add a page at the end
  21638: 				// get page data
  21641: 					// update page numbers
  21643: 					// get page number aliases
  21645: 					// calculate replacement number
  21653: 					// replace aliases with numbers
  21673: 				// save changes
  21676: 			// move pages
  21707: 		// set new style for link
  21713: 		// get the font type used for numbers in each template
  21727: 			// get HTML template
  21732: 				// placemark to be replaced with the correct number
  21739: 			// replace templates with current values
  21742: 			// add link to page
  21744: 			// write bookmark entry
  21747: 		// restore link styles
  21750: 		// move TOC page and replace numbers
  21753: 		// account for booklet mode
  21755: 			// check if a blank page is required before TOC
  21759: 				// add a page at the end (to be moved before TOC)
  21765: 				// add a page at the end
  21774: 				// get page data
  21777: 					// update page numbers
  21779: 					// get page number aliases
  21781: 					// calculate replacement number
  21789: 					// replace aliases with numbers
  21817: 				// save changes
  21820: 			// move pages
  21838: 			// remove previous copy
  21841: 		// record current page number and Y position
  21844: 		// clone current object
  21891: 	// --- MULTI COLUMNS METHODS -----------------------
  21907: 			// maximum column width
  21915: 			// space between columns
  21917: 			// fill the columns array (with, space, starting Y position)
  21970: 				// move Y pointer at the top of the column
  21976: 				// Avoid to write table headers more than once
  21984: 			// set X position of the current column by case
  21986: 			// calculate column X position
  22005: 		// fix for HTML mode
  22007: 		// print HTML table header (if any)
  22010: 				// print table header
  22013: 				// store end of header position
  22023: 		// account for an html table cell over multiple columns
  22062: 		// Ref.: PDF 32000-1:2008 - 9.3.6 Text Rendering Mode
  22063: 		// convert text rendering parameters
  22070: 					// Fill, then stroke text and add to path for clipping
  22073: 					// Fill, then stroke text
  22079: 					// Fill text and add to path for clipping
  22082: 					// Fill text
  22089: 					// Stroke text and add to path for clipping
  22092: 					// Stroke text
  22098: 					// Add text to path for clipping
  22101: 					// Neither fill nor stroke text (invisible)
  22177: 		$hyphenword = array(); // hyphens positions
  22183: 		// some words will be returned as-is
  22186: 			// email
  22191: 			// URL
  22197: 		// surround word with '_' characters
  22210: 						// check if $pattern[$j] is a number = hyphenation level (only numbers from 1 to 5 are valid)
  22217: 							// get hyphenation level
  22219: 							// if two levels from two different patterns match at the same point, the higher one is selected.
  22232: 			// only odd levels indicate allowed hyphenation points
  22234: 				// 173 = soft hyphen character
  22258: 		$word = array(); // last word
  22259: 		$txtarr = array(); // text to be returned
  22260: 		$intag = false; // true if we are inside an HTML tag
  22261: 		$skip = false; // true to skip hyphenation
  22265: 		// get array of characters
  22267: 		// for each char
  22270: 				// letter character
  22273: 				// other type of character
  22275: 					// hypenate the word
  22281: 					// we are inside an HTML tag
  22284: 					// end of HTML tag
  22286: 					// check for style tag
  22287: 					$expected = array(115, 116, 121, 108, 101); // = 'style'
  22288: 					$current = array_slice($txtarr, -6, 5); // last 5 chars
  22291: 						// check if it is a closing tag
  22292: 						$expected = array(47); // = '/'
  22296: 							// closing style tag
  22299: 							// opening style tag
  22307: 			// hypenate the word
  22310: 		// convert char array to string and return
  22411: 		// remove spaces and symbols
  22413: 		// extract all font names
  22415: 		// find first valid font name
  22417: 			// replace font variations
  22422: 			// replace common family names and core fonts
  22436: 		// return current font as default
  22456: 			// we are already inside an XObject template
  22461: 		// XObject ID
  22463: 		// object ID
  22465: 		// store current graphic state
  22467: 		// initialize data
  22478: 		// set new environment
  22504: 		// set group mode
  22521: 			// we are not inside a template
  22525: 		// restore previous graphic state
  22557: 				// close current template
  22560: 				// use the template as resource for the template currently opened
  22564: 		// set default values
  22571: 		// check page for no-write regions and adapt page margins if necessary
  22581: 		// calculate template width and height on document
  22590: 		// fit the template on available space
  22592: 		// set page alignment
  22594: 		// set alignment
  22618: 		// print XObject Template + Transformation matrix
  22620: 		// translate and scale
  22631: 		// set object
  22634: 		// add annotations
  22637: 				// transform original coordinates
  22647: 		// set pointer to align the next text/objects
  22742: 		// empty current regions array
  22744: 		// add regions
  22799: 		// set default values
  22807: 			// no page regions defined
  22813: 		// check for page break
  22815: 			// the content will be printed on a new page
  22832: 		// adjust coordinates and page margins
  22835: 				// check region boundaries
  22837: 					// Y is inside the region
  22838: 					$minv = ($regdata['xb'] - $regdata['xt']) / ($regdata['yb'] - $regdata['yt']); // inverse of angular coefficient
  22843: 					if ($regdata['side'] == 'L') { // left side
  22847: 								// adjust left page margin
  22851: 								// adjust x position
  22854: 									// adjust y position
  22859: 					} elseif ($regdata['side'] == 'R') { // right side
  22863: 								// adjust right page margin
  22867: 								// adjust x position
  22870: 									// adjust y position
  22882: 	// --- SVG METHODS ---------------------------------------------------------
  22905: 		// reset SVG vars
  22917: 			// convert SVG to raster image using GD or ImageMagick libraries
  22920: 		if ($file[0] === '@') { // image from string
  22923: 		} else { // SVG file
  22936: 		// check page for no-write regions and adapt page margins if necessary
  22946: 		// get original image width and height
  22976: 				// get aspect ratio
  23006: 		// calculate image width and height on document
  23008: 			// convert image size to document unit
  23016: 		// fit the image on available space
  23019: 			// convert SVG to raster image using GD or ImageMagick libraries
  23022: 		// set alignment
  23024: 		// set alignment
  23048: 		// store current graphic vars
  23050: 		// store SVG position and scale factors
  23066: 		// scaling and alignment
  23068: 			// store current scaling values
  23071: 			// force uniform scaling
  23073: 				// the entire viewport is covered by the viewBox
  23079: 			} else { // meet
  23080: 				// the entire viewBox is visible within the viewport
  23087: 			// correct X alignment
  23090: 					// do nothing
  23103: 			// correct Y alignment
  23106: 					// do nothing
  23120: 		// store current page break mode
  23126: 		// save the current graphic state
  23128: 		// set initial clipping mask
  23130: 		// scale and translate
  23134: 		// creates a new XML parser to be used by the other XML functions
  23136: 		// the following function allows to use parser inside object
  23138: 		// disable case-folding for this XML parser
  23140: 		// sets the element handler functions for the XML parser
  23142: 		// sets the character data handler function for the XML parser
  23144: 		// start parsing an XML document
  23149: 		// free this XML parser
  23152: 		// >= PHP 7.0.0 "explicitly unset the reference to parser to avoid memory leaks"
  23155: 		// restore previous graphic state
  23157: 		// restore graphic vars
  23175: 		// set pointer to align the next text/objects
  23197: 				// restore pointer to starting position
  23214: 		// restore page break
  23270: 		$minlen = (0.01 / $this->k); // minimum acceptable length
  23274: 		// clip-path
  23282: 		// opacity
  23286: 		// color
  23289: 		// text color
  23292: 		// clip
  23309: 		// fill
  23312: 			// gradient
  23315: 				// reference to another gradient definition
  23341: 					// apply transformation matrix
  23353: 				// convert SVG coordinates to user units
  23365: 				// shift units
  23367: 					// convert to SVG coordinate system
  23373: 				// calculate percentages
  23390: 				// single color (no shading)
  23396: 			// swap Y coordinates
  23400: 			// set transformation map for gradient
  23403: 				// circular gradient
  23425: 		// stroke
  23444: 		// font
  23564: 		// set fill/stroke style
  23586: 		$minlen = (0.01 / $this->k); // minimum acceptable length (3 point)
  23587: 		$firstcmd = true; // used to print first point
  23588: 		// draw curve pieces
  23590: 			// get curve type
  23593: 				// use relative coordinated instead of absolute
  23604: 				// get curve parameters
  23610: 						// approximate little values to zero
  23615: 			// store current origin point
  23619: 				case 'M': { // moveto
  23649: 				case 'L': { // lineto
  23672: 				case 'H': { // horizontal lineto
  23688: 				case 'V': { // vertical lineto
  23704: 				case 'C': { // curveto
  23727: 				case 'S': { // shorthand/smooth curveto
  23755: 				case 'Q': { // quadratic Bezier curveto
  23759: 							// convert quadratic points to cubic points
  23781: 				case 'T': { // shorthand/smooth quadratic Bezier curveto
  23792: 							// convert quadratic points to cubic points
  23812: 				case 'A': { // elliptical arc
  23822: 							$fa = $rawparams[($ck - 3)]; // large-arc-flag
  23823: 							$fs = $rawparams[($ck - 2)]; // sweep-flag
  23827: 								// endpoints are almost identical
  23861: 								// coordinates of ellipse center
  23864: 								// get angles
  23874: 									// reverse angles
  23881: 								// covent angles to positive values
  23912: 		} // end foreach
  23942: 		// check if we are in clip mode
  23965: 			// set clipping mode
  23968: 		// get styling properties
  23969: 		$prev_svgstyle = $this->svgstyles[max(0,(count($this->svgstyles) - 1))]; // previous style
  23970: 		$svgstyle = $this->svgstyles[0]; // set default style
  23972: 			// default fill attribute for clipping
  23976: 			// fix style for regular expression
  23981: 				// inherit previous value
  23985: 				// specific attribute settings
  23992: 				// CSS style syntax
  24003: 		// transformation matrix
  24015: 			// the current graphics element is invisible (nothing is painted)
  24018: 		// process tag
  24024: 			// clipPath
  24039: 				// start of SVG object
  24043: 				// inner SVG
  24050: 				// set x, y position using transform matrix
  24053: 				// set clipping for width and height
  24058: 				// draw clipping rect
  24060: 				// parse viewbox, calculate extra transformation matrix
  24070: 						// get aspect ratio
  24117: 				// group together related graphics elements
  24164: 					// gradient is defined on another place
  24205: 					// gradient is defined on another place
  24211: 				// gradient stops
  24225: 			// paths
  24254: 			// shapes
  24358: 				// note that point may use a complex syntax not covered here
  24371: 						// X coordinate
  24375: 						// Y coordinate
  24392: 				} else { // polygon
  24408: 			// image
  24426: 						// embedded image encoded as base64
  24429: 						// fix image path
  24431: 							// replace relative path with full server path
  24447: 							// convert URL to server path
  24450: 							// convert server path to URL
  24454: 					// get image type
  24459: 						// store SVG vars
  24471: 						// restore SVG vars
  24489: 			// text
  24493: 					// @TODO: unsupported feature
  24495: 				// only basic support - advanced features must be implemented
  24549: 			// use
  24571: 							// merge styles
  24584: 		} // end of switch
  24585: 		// process child elements
  24635: 			// clipPath
  24646: 				// ungroup: remove last style from array
  24654: 					// This implementation must be fixed to following the rule:
  24655: 					// If the 'visibility' property is set to hidden on a 'tspan', 'tref' or 'altGlyph' element, then the text is invisible but still takes up space in text layout calculations.
  24658: 				// print text
  24663: 					// check if string is RTL text
  24682: 					// store current coordinates
  24686: 				// print the text
  24689: 					// restore coordinates
  24693: 				// restore previous rendering mode
  24721: 	// --- END SVG METHODS -----------------------------------------------------
  24750: } // END OF TCPDF CLASS
  24753: // END OF FILE

TCPDF-main\config\tcpdf_config.php:
    3: // File name   : tcpdf_config.php
    4: // Begin       : 2004-06-11
    5: // Last Update : 2014-12-11
    7: // Description : Configuration file for TCPDF.
    8: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    9: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   10: // -------------------------------------------------------------------
   11: // Copyright (C) 2004-2014  Nicola Asuni - Tecnick.com LTD
   13: // This file is part of TCPDF software library.
   15: // TCPDF is free software: you can redistribute it and/or modify it
   16: // under the terms of the GNU Lesser General Public License as
   17: // published by the Free Software Foundation, either version 3 of the
   18: // License, or (at your option) any later version.
   20: // TCPDF is distributed in the hope that it will be useful, but
   21: // WITHOUT ANY WARRANTY; without even the implied warranty of
   22: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   23: // See the GNU Lesser General Public License for more details.
   25: // You should have received a copy of the GNU Lesser General Public License
   26: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
   28: // See LICENSE.TXT file for more information.
   39: // IMPORTANT:
   40: // If you define the constant K_TCPDF_EXTERNAL_CONFIG, all the following settings will be ignored.
   41: // If you use the tcpdf_autoconfig.php, then you can overwrite some values here.
  226: // END OF FILE

TCPDF-main\examples\example_001.php:
    3: // File name   : example_001.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 001 for TCPDF class
    8: //               Default Header and Footer
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   31: // Include the main TCPDF library (search for installation path).
   34: // create new PDF document
   37: // set document information
   44: // set default header data
   48: // set header and footer fonts
   52: // set default monospaced font
   55: // set margins
   60: // set auto page breaks
   63: // set image scale factor
   66: // set some language-dependent strings (optional)
   72: // ---------------------------------------------------------
   74: // set default font subsetting mode
   77: // Set font
   78: // dejavusans is a UTF-8 Unicode font, if you only need to
   79: // print standard ASCII chars, you can use core fonts like
   80: // helvetica or times to reduce file size.
   83: // Add a page
   84: // This method has several options, check the source code documentation for more information.
   87: // set text shadow effect
   90: // Set some content to print
   99: // Print text using writeHTMLCell()
  102: // ---------------------------------------------------------
  104: // Close and output PDF document
  105: // This method has several options, check the source code documentation for more information.
  109: // END OF FILE

TCPDF-main\examples\example_002.php:
   3: // File name   : example_002.php
   4: // Begin       : 2008-03-04
   5: // Last Update : 2013-05-14
   7: // Description : Example 002 for TCPDF class
   8: //               Removing Header and Footer
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  31: // Include the main TCPDF library (search for installation path).
  34: // create new PDF document
  37: // set document information
  44: // remove default header/footer
  48: // set default monospaced font
  51: // set margins
  54: // set auto page breaks
  57: // set image scale factor
  60: // set some language-dependent strings (optional)
  66: // ---------------------------------------------------------
  68: // set font
  71: // add a page
  74: // set some text to print
  81: // print a block of text using Write()
  84: // ---------------------------------------------------------
  90: // END OF FILE

TCPDF-main\examples\example_003.php:
    3: // File name   : example_003.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 003 for TCPDF class
    8: //               Custom Header and Footer
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   31: // Include the main TCPDF library (search for installation path).
   35: // Extend the TCPDF class to create custom Header and Footer
   40: 		// Logo
   43: 		// Set font
   45: 		// Title
   49: 	// Page footer
   51: 		// Position at 15 mm from bottom
   53: 		// Set font
   55: 		// Page number
   60: // create new PDF document
   63: // set document information
   70: // set default header data
   73: // set header and footer fonts
   77: // set default monospaced font
   80: // set margins
   85: // set auto page breaks
   88: // set image scale factor
   91: // set some language-dependent strings (optional)
   97: // ---------------------------------------------------------
   99: // set font
  102: // add a page
  105: // set some text to print
  112: // print a block of text using Write()
  115: // ---------------------------------------------------------
  121: // END OF FILE

TCPDF-main\examples\example_004.php:
    3: // File name   : example_004.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 004 for TCPDF class
    8: //               Cell stretching
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   79: // test Cell stretching
   95: // example using general stretching and spacing
  100: 		// set general stretching (scaling) value
  103: 		// set general spacing value
  116: // ---------------------------------------------------------
  122: // END OF FILE

TCPDF-main\examples\example_005.php:
    3: // File name   : example_005.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 005 for TCPDF class
    8: //               Multicell
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   77: // set cell padding
   80: // set cell margins
   83: // set color for background
   86: // MultiCell($w, $h, $txt, $border=0, $align='J', $fill=0, $ln=1, $x='', $y='', $reseth=true, $stretch=0, $ishtml=false, $autopadding=true, $maxh=0)
   88: // set some text for example
   91: // Multicell test
  100: // set color for background
  103: // Vertical alignment
  110: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  112: // set color for background
  115: // set some text for example
  120: // print a blox of text using multicell()
  123: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  125: // AUTO-FITTING
  127: // set color for background
  130: // Fit text on cell by reducing font size
  133: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  135: // CUSTOM PADDING
  137: // set color for background
  140: // set font
  143: // set cell padding
  150: // move pointer to last page
  153: // ---------------------------------------------------------
  159: // END OF FILE

TCPDF-main\examples\example_006.php:
    3: // File name   : example_006.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 006 for TCPDF class
    8: //               WriteHTML and RTL support
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // add a page
   78: // writeHTML($html, $ln=true, $fill=false, $reseth=false, $cell=false, $align='')
   79: // writeHTMLCell($w, $h, $x, $y, $html='', $border=0, $ln=0, $fill=0, $reseth=true, $align='', $autopadding=true)
   81: // create some HTML content
  118: // output the HTML content
  122: // output some RTL HTML content
  126: // test some inline CSS
  145: // reset pointer to the last page
  148: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  149: // Print a table
  151: // add a page
  154: // create some HTML content
  193: // output the HTML content
  196: // Print some HTML Cells
  206: // reset pointer to the last page
  209: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  210: // Print a table
  212: // add a page
  215: // create some HTML content
  227: // output the HTML content
  230: // create some HTML content
  241: // output the HTML content
  244: // reset pointer to the last page
  247: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  248: // Print all HTML colors
  250: // add a page
  261: // output the HTML content
  265: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  267: // Test word-wrap
  269: // create some HTML content
  275: // output the HTML content
  278: // Test fonts nesting
  285: // output the HTML content
  288: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  289: // test pre tag
  291: // add a page
  312: // output the HTML content
  315: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  317: // test custom bullet points for list
  319: // add a page
  332: // output the HTML content
  335: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  337: // reset pointer to the last page
  340: // ---------------------------------------------------------
  346: // END OF FILE

TCPDF-main\examples\example_007.php:
    3: // File name   : example_007.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 007 for TCPDF class
    8: //               Two independent columns with WriteHTMLCell()
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   31: // Include the main TCPDF library (search for installation path).
   34: // create new PDF document
   37: // set document information
   44: // set default header data
   47: // set header and footer fonts
   51: // set default monospaced font
   54: // set margins
   59: // set auto page breaks
   62: // set image scale factor
   65: // set some language-dependent strings (optional)
   71: // ---------------------------------------------------------
   73: // set font
   76: // add a page
   79: // create columns content
   84: // writeHTMLCell($w, $h, $x, $y, $html='', $border=0, $ln=0, $fill=0, $reseth=true, $align='', $autopadding=true)
   86: // get current vertical position
   89: // set color for background
   92: // set color for text
   95: // write the first column
   98: // set color for background
  101: // set color for text
  104: // write the second column
  107: // reset pointer to the last page
  110: // ---------------------------------------------------------
  116: // END OF FILE

TCPDF-main\examples\example_008.php:
   3: // File name   : example_008.php
   4: // Begin       : 2008-03-04
   5: // Last Update : 2013-05-14
   7: // Description : Example 008 for TCPDF class
   8: //               Include external UTF-8 text file
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set default font subsetting mode
  74: // set font
  77: // add a page
  80: // get external file content
  83: // set color for text
  88: // write the text
  92: // ---------------------------------------------------------
  98: // END OF FILE

TCPDF-main\examples\example_009.php:
    3: // File name   : example_009.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 009 for TCPDF class
    8: //               Test Image
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // -------------------------------------------------------------------
   71: // add a page
   74: // set JPEG quality
   77: // Image method signature:
   78: // Image($file, $x='', $y='', $w=0, $h=0, $type='', $link='', $align='', $resize=false, $dpi=300, $palign='', $ismask=false, $imgmask=false, $border=0, $fitbox=false, $hidden=false, $fitonpage=false)
   80: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   82: // Example of Image from data stream ('PHP rules')
   85: // The '@' character is used to indicate that follows an image data stream and not an image file name
   88: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   90: // Image example with resizing
   93: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   95: // test fitbox with all alignment combinations
  104: // test all combinations of alignments
  112: 		$x += 32; // new column
  114: 	$y += 32; // new row
  128: 		$x += 27; // new column
  130: 	$y += 52; // new row
  133: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  135: // Stretching, position and alignment example
  141: // -------------------------------------------------------------------
  147: // END OF FILE

TCPDF-main\examples\example_010.php:
    3: // File name   : example_010.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 010 for TCPDF class
    8: //               Text on multiple columns
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   47: 		// add a new page
   49: 		// disable existing columns
   51: 		// print chapter title
   53: 		// set columns
   55: 		// print chapter body
   80: 		// get esternal file content
   82: 		// set font
   85: 		// print content
   87: 			// ------ HTML MODE ------
   90: 			// ------ TEXT MODE ------
   95: } // end of extended class
   97: // ---------------------------------------------------------
   98: // EXAMPLE
   99: // ---------------------------------------------------------
  100: // create new PDF document
  103: // set document information
  110: // set default header data
  113: // set header and footer fonts
  117: // set default monospaced font
  120: // set margins
  125: // set auto page breaks
  128: // set image scale factor
  131: // set some language-dependent strings (optional)
  137: // ---------------------------------------------------------
  139: // print TEXT
  142: // print HTML
  145: // ---------------------------------------------------------
  151: // END OF FILE

TCPDF-main\examples\example_011.php:
    3: // File name   : example_011.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 011 for TCPDF class
    8: //               Colored Table (very simple table)
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // extend TCPF with custom functions
   36: 	// Load table data from file
   38: 		// Read file lines
   47: 	// Colored table
   49: 		// Colors, line width and bold font
   55: 		// Header
   62: 		// Color and font restoration
   66: 		// Data
   80: // create new PDF document
   83: // set document information
   90: // set default header data
   93: // set header and footer fonts
   97: // set default monospaced font
  100: // set margins
  105: // set auto page breaks
  108: // set image scale factor
  111: // set some language-dependent strings (optional)
  117: // ---------------------------------------------------------
  119: // set font
  122: // add a page
  125: // column titles
  128: // data loading
  131: // print colored table
  134: // ---------------------------------------------------------
  136: // close and output PDF document
  140: // END OF FILE

TCPDF-main\examples\example_012.php:
    3: // File name   : example_012.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 012 for TCPDF class
    8: //               Graphic Functions
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // disable header and footer
   46: // set default monospaced font
   49: // set margins
   52: // set auto page breaks
   55: // set image scale factor
   58: // set some language-dependent strings (optional)
   64: // ---------------------------------------------------------
   66: // set font
   69: // add a page
   83: // Line
   89: // Rect
   94: // Curve
  100: // Circle and ellipse
  118: // Polygon
  126: // Polygonal Line
  130: // Regular polygon
  140: // Star polygon
  151: // Rounded rectangle
  159: // Arrows
  168: // - . - . - . - . - . - . - . - . - . - . - . - . - . - . -
  170: // ellipse
  172: // add a page
  177: // center of ellipse
  181: // X Y axis
  186: // ellipse axis
  191: // ellipse
  195: // ellipse arc
  200: // ---------------------------------------------------------
  206: // END OF FILE

TCPDF-main\examples\example_013.php:
    3: // File name   : example_013.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 013 for TCPDF class
    8: //               Graphic Transformations
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   79: // set font
   82: // --- Scaling ---------------------------------------------
   89: // Start Transformation
   91: // Scale by 150% centered by (50,80) which is the lower left corner of the rectangle
   95: // Stop Transformation
   98: // --- Translation -----------------------------------------
  105: // Start Transformation
  107: // Translate 7 to the right, 5 to the bottom
  111: // Stop Transformation
  114: // --- Rotation --------------------------------------------
  121: // Start Transformation
  123: // Rotate 20 degrees counter-clockwise centered by (70,110) which is the lower left corner of the rectangle
  127: // Stop Transformation
  130: // --- Skewing ---------------------------------------------
  137: // Start Transformation
  139: // skew 30 degrees along the x-axis centered by (125,110) which is the lower left corner of the rectangle
  143: // Stop Transformation
  146: // --- Mirroring horizontally ------------------------------
  153: // Start Transformation
  155: // mirror horizontally with axis of reflection at x-position 70 (left side of the rectangle)
  159: // Stop Transformation
  162: // --- Mirroring vertically --------------------------------
  169: // Start Transformation
  171: // mirror vertically with axis of reflection at y-position 140 (bottom side of the rectangle)
  175: // Stop Transformation
  178: // --- Point reflection ------------------------------------
  185: // Start Transformation
  187: // point reflection at the lower left point of rectangle
  191: // Stop Transformation
  194: // --- Mirroring against a straigth line described by a point (120, 120) and an angle -20°
  199: // just for visualisation: the straight line to mirror against
  224: // ---------------------------------------------------------
  230: // END OF FILE

TCPDF-main\examples\example_014.php:
    3: // File name   : example_014.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 014 for TCPDF class
    8: //               Javascript Form and user rights (only works on Adobe Acrobat)
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   31: // Include the main TCPDF library (search for installation path).
   34: // create new PDF document
   37: // set document information
   44: // set default header data
   47: // set header and footer fonts
   51: // set default monospaced font
   54: // set margins
   59: // set auto page breaks
   62: // set image scale factor
   65: // set some language-dependent strings (optional)
   71: // ---------------------------------------------------------
   73: // IMPORTANT: disable font subsetting to allow users editing the document
   76: // set font. 'helvetica' MUST be used to avoid a PHP notice from PHP 7.4+
   79: // add a page
   88: // set default form properties
   97: // First name
  102: // Last name
  107: // Gender
  112: // Drink
  131: // Newsletter
  136: // Address
  141: // Listbox
  146: // E-mail
  151: // Date of the day
  158: // Button to validate and print
  161: // Reset Button
  164: // Submit Button
  167: // Form validation functions
  187: // Add Javascript code
  190: // ---------------------------------------------------------
  196: // END OF FILE

TCPDF-main\examples\example_015.php:
    3: // File name   : example_015.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 015 for TCPDF class
    8: //               Bookmarks (Table of Content)
    9: //               and Named Destinations.
   11: // Author: Nicola Asuni
   13: // (c) Copyright:
   14: //               Nicola Asuni
   15: //               Tecnick.com LTD
   16: //               www.tecnick.com
   17: //               info@tecnick.com
   31: // Include the main TCPDF library (search for installation path).
   34: // create new PDF document
   37: // set document information
   44: // set default header data
   47: // set header and footer fonts
   51: // set default monospaced font
   54: // set margins
   59: // set auto page breaks
   62: // set image scale factor
   65: // set some language-dependent strings (optional)
   71: // ---------------------------------------------------------
   73: // Bookmark($txt, $level=0, $y=-1, $page='', $style='', $color=array(0,0,0))
   75: // set font
   78: // add a page
   81: // set a bookmark for the current position
   84: // print a line using Cell()
   93: // add other pages and bookmarks
  112: // add a named destination so you can open this document at this page using the link: "example_015.pdf#chapter2"
  114: // add a bookmark that points to a named destination
  140: // attach an external file TXT file
  143: // attach an external file
  146: // add a bookmark that points to an embedded file
  147: // NOTE: prefix the file name with the * character for generic file and with % character for PDF file
  150: // add a bookmark that points to an embedded file
  151: // NOTE: prefix the file name with the * character for generic file and with % character for PDF file
  154: // add a bookmark that points to an external URL
  157: // ---------------------------------------------------------
  163: // END OF FILE

TCPDF-main\examples\example_016.php:
    3: // File name   : example_016.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 016 for TCPDF class
    8: //               Document Encryption / Security
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   36: // *** Set PDF protection (encryption) *********************
   69: // Example with public-key
   70: // To open the document you need to install the private key (tcpdf.p12) on the Acrobat Reader. The password is: 1234
   73: // *********************************************************
   76: // set document information
   83: // set default header data
   86: // set header and footer fonts
   90: // set default monospaced font
   93: // set margins
   98: // set auto page breaks
  101: // set image scale factor
  104: // set some language-dependent strings (optional)
  110: // ---------------------------------------------------------
  112: // set font
  115: // add a page
  118: // set some text to print
  125: // print a block of text using Write()
  129: // ---------------------------------------------------------
  135: // END OF FILE

TCPDF-main\examples\example_017.php:
    3: // File name   : example_017.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 017 for TCPDF class
    8: //               Two independent columns with MultiCell
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // add a page
   84: // create columns content
   85: // create columns content
   90: // MultiCell($w, $h, $txt, $border=0, $align='J', $fill=0, $ln=1, $x='', $y='', $reseth=true, $stretch=0, $ishtml=false, $autopadding=true, $maxh=0)
   92: // set color for background
   95: // set color for text
   98: // write the first column
  101: // set color for background
  104: // set color for text
  107: // write the second column
  110: // reset pointer to the last page
  113: // ---------------------------------------------------------
  119: // END OF FILE

TCPDF-main\examples\example_018.php:
    3: // File name   : example_018.php
    4: // Begin       : 2008-03-06
    5: // Last Update : 2013-05-14
    7: // Description : Example 018 for TCPDF class
    8: //               RTL document with Persian language
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language dependent data:
   70: // set some language-dependent strings (optional)
   73: // ---------------------------------------------------------
   75: // set font
   78: // add a page
   81: // Persian and English content
   85: // set LTR direction for english translation
   90: // print newline
   93: // Persian and English content
   97: // Restore RTL direction
  100: // set font
  103: // print newline
  106: // Arabic and English content
  111: // set LTR direction for english translation
  114: // print newline
  119: // Arabic and English content
  123: // ---------------------------------------------------------
  129: // END OF FILE

TCPDF-main\examples\example_019.php:
   3: // File name   : example_019.php
   4: // Begin       : 2008-03-07
   5: // Last Update : 2013-05-14
   7: // Description : Example 019 for TCPDF class
   8: //               Non unicode with alternative config file
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // Set document information dictionary in unicode mode
  38: // set document information
  45: // set default header data
  48: // set header and footer fonts
  52: // set default monospaced font
  55: // set margins
  60: // set auto page breaks
  63: // set image scale factor
  66: // set some language dependent data:
  73: // set some language-dependent strings (optional)
  76: // ---------------------------------------------------------
  78: // set font
  81: // add a page
  84: // set color for background
  90: // print some text
  93: // ---------------------------------------------------------
  99: // END OF FILE

TCPDF-main\examples\example_020.php:
    3: // File name   : example_020.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 020 for TCPDF class
    8: //               Two columns composed by MultiCell of different
    9: //               heights
   11: // Author: Nicola Asuni
   13: // (c) Copyright:
   14: //               Nicola Asuni
   15: //               Tecnick.com LTD
   16: //               www.tecnick.com
   17: //               info@tecnick.com
   31: // Include the main TCPDF library (search for installation path).
   34: // extend TCPF with custom functions
   38: 		// MultiCell($w, $h, $txt, $border=0, $align='J', $fill=0, $ln=1, $x='', $y='', $reseth=true, $stretch=0)
   43: 		// write the left cell
   51: 		// write the right cell
   57: 		// set the new row position by case
   74: // create new PDF document
   77: // set document information
   84: // set default header data
   87: // set header and footer fonts
   91: // set default monospaced font
   94: // set margins
   99: // set auto page breaks
  102: // set image scale factor
  105: // set some language-dependent strings (optional)
  111: // ---------------------------------------------------------
  113: // set font
  115: // add a page
  127: // set color for background
  134: // print some rows just as example
  139: // reset pointer to the last page
  142: // ---------------------------------------------------------
  148: // END OF FILE

TCPDF-main\examples\example_021.php:
   3: // File name   : example_021.php
   4: // Begin       : 2008-03-04
   5: // Last Update : 2013-05-14
   7: // Description : Example 021 for TCPDF class
   8: //               WriteHTML text flow
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set font
  74: // add a page
  77: // create some HTML content
  80: // output the HTML content
  83: // reset pointer to the last page
  86: // ---------------------------------------------------------
  92: // END OF FILE

TCPDF-main\examples\example_022.php:
    3: // File name   : example_022.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 022 for TCPDF class
    8: //               CMYK colors
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // check also the following methods:
   72: // setDrawColorArray()
   73: // setFillColorArray()
   74: // setTextColorArray()
   76: // set font
   79: // add a page
   84: // define style for border
   87: // --- CMYK ------------------------------------------------
  113: // --- RGB -------------------------------------------------
  133: // --- GRAY ------------------------------------------------
  141: // ---------------------------------------------------------
  147: // END OF FILE

TCPDF-main\examples\example_023.php:
    3: // File name   : example_023.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 023 for TCPDF class
    8: //               Page Groups
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // Start First Page Group
   77: // add a page
   80: // set some text to print
   88: // print a block of text using Write()
   91: // add second page
   95: // Start Second Page Group
   98: // add some pages
  108: // ---------------------------------------------------------
  114: // END OF FILE

TCPDF-main\examples\example_024.php:
    3: // File name   : example_024.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 024 for TCPDF class
    8: //               Object Visibility and Layers
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   89: // change font size
   92: // change text color
   95: // set visibility only for screen
   98: // write something only for screen
  101: // set visibility only for print
  104: // change text color
  107: // write something only for print
  110: // restore visibility
  113: // ---------------------------------------------------------
  115: // LAYERS
  117: // start a new layer
  120: // change font size
  123: // change text color
  129: // write something
  132: // close the current layer
  135: // ---------------------------------------------------------
  141: // END OF FILE

TCPDF-main\examples\example_025.php:
    3: // File name   : example_025.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 025 for TCPDF class
    8: //               Object Transparency
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   89: // draw opaque red square
   94: // set alpha to semi-transparency
   97: // draw green square
  102: // draw blue square
  107: // draw jpeg image
  110: // restore full opacity
  113: // ---------------------------------------------------------
  119: // END OF FILE

TCPDF-main\examples\example_026.php:
    3: // File name   : example_026.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 026 for TCPDF class
    8: //               Text Rendering Modes and Text Clipping
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   28: // Include the main TCPDF library (search for installation path).
   31: // create new PDF document
   34: // set document information
   41: // set default header data
   44: // set header and footer fonts
   48: // set default monospaced font
   51: // set margins
   56: // set auto page breaks
   59: // set image scale factor
   62: // set some language-dependent strings (optional)
   68: // ---------------------------------------------------------
   70: // set font
   73: // add a page
   76: // set color for text stroke
   93: // * * * CLIPPING MODES  * * * * * * * * * * * * * * * * * *
  119: // reset text rendering mode
  122: // * * * HTML MODE * * * * * * * * * * * * * * * * * * * * *
  124: // The following attributes were added to HTML:
  125: // stroke : stroke width
  126: // strokecolor : stroke color
  127: // fill : true (default) to fill the font, false otherwise
  130: // create some HTML content with text rendering modes
  136: // output the HTML content
  139: // ---------------------------------------------------------
  145: // END OF FILE

TCPDF-main\examples\example_027.php:
    3: // File name   : example_027.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 027 for TCPDF class
    8: //               1D Barcodes
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set a barcode on the page footer
   74: // set font
   77: // add a page
   80: // print a message
   85: // -----------------------------------------------------------------------------
   89: // define barcode style
  107: // PRINT VARIOUS 1D BARCODES
  109: // CODE 39 - ANSI MH10.8M-1983 - USD-3 - 3 of 9.
  115: // CODE 39 + CHECKSUM
  121: // CODE 39 EXTENDED
  127: // CODE 39 EXTENDED + CHECKSUM
  133: // CODE 93 - USS-93
  139: // Standard 2 of 5
  145: // Standard 2 of 5 + CHECKSUM
  151: // Interleaved 2 of 5
  157: // Interleaved 2 of 5 + CHECKSUM
  162: // add a page ----------
  165: // CODE 128 AUTO
  171: // CODE 128 A
  177: // CODE 128 B
  183: // CODE 128 C
  189: // EAN 8
  195: // EAN 13
  201: // UPC-A
  207: // UPC-E
  211: // add a page ----------
  214: // 5-Digits UPC-Based Extension
  220: // 2-Digits UPC-Based Extension
  226: // MSI
  232: // MSI + CHECKSUM (module 11)
  238: // CODABAR
  244: // CODE 11
  250: // PHARMACODE
  256: // PHARMACODE TWO-TRACKS
  260: // add a page ----------
  263: // IMB - Intelligent Mail Barcode - Onecode - USPS-B-3200
  269: // POSTNET
  275: // PLANET
  281: // RMS4CC (Royal Mail 4-state Customer Code) - CBC (Customer Bar Code)
  287: // KIX (Klant index - Customer index)
  291: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  292: // TEST BARCODE ALIGNMENTS
  294: // add a page
  297: // set a background color
  301: // Left position
  307: // Center position
  313: // Right position
  318: // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  322: $style['stretch'] = false; // disable stretch
  323: $style['fitwidth'] = false; // disable fitwidth
  325: // Left alignment
  331: // Center alignment
  337: // Right alignment
  342: // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  346: $style['stretch'] = false; // disable stretch
  347: $style['fitwidth'] = true; // disable fitwidth
  349: // Left alignment
  355: // Center alignment
  361: // Right alignment
  366: // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  370: // Left alignment
  376: // Center alignment
  382: // Right alignment
  386: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  387: // TEST BARCODE STYLE
  389: // define barcode style
  408: // CODE 39 EXTENDED + CHECKSUM
  413: // ---------------------------------------------------------
  419: // END OF FILE

TCPDF-main\examples\example_028.php:
    3: // File name   : example_028.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 028 for TCPDF class
    8: //               Changing page formats
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // remove default header/footer
   46: // set default monospaced font
   49: // set margins
   52: // set auto page breaks
   55: // set image scale factor
   58: // set some language-dependent strings (optional)
   64: // ---------------------------------------------------------
   68: // set font
   96: // --- test backward editing ---
  133: // ---------------------------------------------------------
  139: // END OF FILE

TCPDF-main\examples\example_029.php:
    3: // File name   : example_029.php
    4: // Begin       : 2008-06-09
    5: // Last Update : 2013-05-14
    7: // Description : Example 029 for TCPDF class
    8: //               Set PDF viewer display preferences.
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set array for viewer preferences
   79: 	'NonFullScreenPageMode' => 'UseNone', // UseNone, UseOutlines, UseThumbs, UseOC
   80: 	'ViewArea' => 'CropBox', // CropBox, BleedBox, TrimBox, ArtBox
   81: 	'ViewClip' => 'CropBox', // CropBox, BleedBox, TrimBox, ArtBox
   82: 	'PrintArea' => 'CropBox', // CropBox, BleedBox, TrimBox, ArtBox
   83: 	'PrintClip' => 'CropBox', // CropBox, BleedBox, TrimBox, ArtBox
   84: 	'PrintScaling' => 'AppDefault', // None, AppDefault
   85: 	'Duplex' => 'DuplexFlipLongEdge', // Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge
   91: // Check the example n. 60 for advanced page settings
   93: // set pdf viewer preferences
   96: // set font
   99: // add a page
  102: // print a line
  109: // add a page
  111: // print a line
  114: // add a page
  116: // print a line
  119: // ---------------------------------------------------------
  125: // END OF FILE

TCPDF-main\examples\example_030.php:
    3: // File name   : example_030.php
    4: // Begin       : 2008-06-09
    5: // Last Update : 2013-05-14
    7: // Description : Example 030 for TCPDF class
    8: //               Colour gradients
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // --- first page ------------------------------------------
   76: // add a page
   81: // set colors for gradients (r,g,b) or (grey 0-255)
   89: // set the coordinates x1,y1,x2,y2 of the gradient (see linear_gradient_coords.jpg)
   92: // paint a linear gradient
   95: // write label
   98: // set the coordinates fx,fy,cx,cy,r of the gradient (see radial_gradient_coords.jpg)
  101: // paint a radial gradient
  104: // write label
  107: // paint a coons patch mesh with default coordinates
  110: // write label
  113: // set the coordinates for the cubic Bézier points x1,y1 ... x12, y12 of the patch (see coons_patch_mesh_coords.jpg)
  123: // paint a coons patch gradient with the above coordinates
  126: // write label
  129: // --- second page -----------------------------------------
  132: // first patch: f = 0
  145: // second patch - above the other: f = 2
  155: // third patch - right of the above: f = 3
  165: // fourth patch - below the above, which means left(?) of the above: f = 1
  180: // write label
  183: // ---------------------------------------------------------
  189: // END OF FILE

TCPDF-main\examples\example_031.php:
    3: // File name   : example_031.php
    4: // Begin       : 2008-06-09
    5: // Last Update : 2013-05-14
    7: // Description : Example 031 for TCPDF class
    8: //               Pie Chart
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   92: // write labels
   98: // ---------------------------------------------------------
  104: // END OF FILE

TCPDF-main\examples\example_032.php:
   3: // File name   : example_032.php
   4: // Begin       : 2008-06-09
   5: // Last Update : 2013-06-19
   7: // Description : Example 032 for TCPDF class
   8: //               EPS/AI image
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set font
  81: // Print text using writeHTMLCell()
  86: // ---------------------------------------------------------
  92: // END OF FILE

TCPDF-main\examples\example_033.php:
    3: // File name   : example_033.php
    4: // Begin       : 2008-06-24
    5: // Last Update : 2013-05-14
    7: // Description : Example 033 for TCPDF class
    8: //               Mixed font types
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // add a page
   74: // set default font subsetting mode
  100: // ---------------------------------------------------------
  106: // END OF FILE

TCPDF-main\examples\example_034.php:
   3: // File name   : example_034.php
   4: // Begin       : 2008-07-18
   5: // Last Update : 2013-05-14
   7: // Description : Example 034 for TCPDF class
   8: //               Clipping
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set font
  74: // add a page
  82: // set clipping mask
  85: // draw jpeg image to be clipped
  91: // ---------------------------------------------------------
  97: // END OF FILE

TCPDF-main\examples\example_035.php:
    3: // File name   : example_035.php
    4: // Begin       : 2008-07-22
    5: // Last Update : 2013-05-14
    7: // Description : Example 035 for TCPDF class
    8: //               Line styles with cells and multicells
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
  106: // ---------------------------------------------------------
  112: // END OF FILE

TCPDF-main\examples\example_036.php:
   3: // File name   : example_036.php
   4: // Begin       : 2008-08-08
   5: // Last Update : 2013-05-14
   7: // Description : Example 036 for TCPDF class
   8: //               Annotations
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set font
  74: // add a page
  81: // text annotation
  84: // ---------------------------------------------------------
  90: // END OF FILE

TCPDF-main\examples\example_037.php:
    3: // File name   : example_037.php
    4: // Begin       : 2008-09-12
    5: // Last Update : 2013-09-30
    7: // Description : Example 037 for TCPDF class
    8: //               Spot colors
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   79: // Print text using writeHTMLCell()
   85: // Define some new spot colors
   86: // $c, $m, $y and $k (2nd, 3rd, 4th and 5th parameter) are the CMYK color components.
   87: // AddSpotColor($name, $c, $m, $y, $k)
   97: // Select the spot color
   98: // $tint (the second parameter) is the intensity of the color (0-100).
   99: // setTextSpotColor($name, $tint=100)
  100: // setDrawSpotColor($name, $tint=100)
  101: // setFillSpotColor($name, $tint=100)
  108: // print some spot colors
  120: // --- default values defined on spotcolors.php ---
  142: // ---------------------------------------------------------
  148: // END OF FILE

TCPDF-main\examples\example_038.php:
   3: // File name   : example_038.php
   4: // Begin       : 2008-09-15
   5: // Last Update : 2013-05-14
   7: // Description : Example 038 for TCPDF class
   8: //               CID-0 CJK unembedded font
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set font
  74: // add a page
  81: // set font
  87: // ---------------------------------------------------------
  93: // END OF FILE

TCPDF-main\examples\example_039.php:
    3: // File name   : example_039.php
    4: // Begin       : 2008-10-16
    5: // Last Update : 2014-01-13
    7: // Description : Example 039 for TCPDF class
    8: //               HTML justification
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // add a page
   74: // set font
   79: // create some HTML content
   82: // set core font
   85: // output the HTML content
   90: // set UTF-8 Unicode font
   93: // output the HTML content
   96: // reset pointer to the last page
   99: // ---------------------------------------------------------
  105: // END OF FILE

TCPDF-main\examples\example_040.php:
    3: // File name   : example_040.php
    4: // Begin       : 2008-10-28
    5: // Last Update : 2013-05-14
    7: // Description : Example 040 for TCPDF class
    8: //               Booklet mode (double-sided pages)
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set display mode
   74: // set pdf viewer preferences
   77: // set booklet mode
   80: // set core font
   83: // add a page (left page)
   88: // print a line using Cell()
   92: // add a page (right page)
   95: // print a line using Cell()
   99: // add a page (left page)
  102: // print a line using Cell()
  105: // add a page (right page)
  108: // print a line using Cell()
  111: // ---------------------------------------------------------
  117: // END OF FILE

TCPDF-main\examples\example_041.php:
   3: // File name   : example_041.php
   4: // Begin       : 2008-12-07
   5: // Last Update : 2013-05-14
   7: // Description : Example 041 for TCPDF class
   8: //               Annotation - FileAttachment
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  30: // Include the main TCPDF library (search for installation path).
  33: // create new PDF document
  36: // set document information
  43: // set default header data
  46: // set header and footer fonts
  50: // set default monospaced font
  53: // set margins
  58: // set auto page breaks
  61: // set image scale factor
  64: // set some language-dependent strings (optional)
  70: // ---------------------------------------------------------
  72: // set font
  75: // add a page
  83: // attach an external file
  86: // ---------------------------------------------------------
  92: // END OF FILE

TCPDF-main\examples\example_042.php:
    3: // File name   : example_042.php
    4: // Begin       : 2008-12-23
    5: // Last Update : 2013-05-14
    7: // Description : Example 042 for TCPDF class
    8: //               Test Image with alpha channel
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set JPEG quality
   76: // add a page
   79: // create background text
   83: // --- Method (A) ------------------------------------------
   84: // the Image() method recognizes the alpha channel embedded on the image:
   88: // --- Method (B) ------------------------------------------
   89: // provide image + separate 8-bit mask
   91: // first embed mask image (w, h, x and y will be ignored, the image will be scaled to the target image's size)
   94: // embed image, masked with previously embedded mask
   97: // ---------------------------------------------------------
  103: // END OF FILE

TCPDF-main\examples\example_043.php:
   3: // File name   : example_043.php
   4: // Begin       : 2009-01-02
   5: // Last Update : 2013-05-14
   7: // Description : Example 043 for TCPDF class
   8: //               Disk caching
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set font
  74: // add a page
  77: // Multicell test
  80: // ---------------------------------------------------------
  86: // END OF FILE

TCPDF-main\examples\example_044.php:
    3: // File name   : example_044.php
    4: // Begin       : 2009-01-02
    5: // Last Update : 2013-05-14
    7: // Description : Example 044 for TCPDF class
    8: //               Move, copy and delete pages
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // print a line using Cell()
   78: // add some vertical space
   81: // print some text
  109: // Move page 7 to page 3
  112: // Delete page 6
  118: // copy the second page
  121: // NOTE: to insert a page to a previous position, you can add a new page to the end of document and then move it using movePage().
  123: // ---------------------------------------------------------
  129: // END OF FILE

TCPDF-main\examples\example_045.php:
    3: // File name   : example_045.php
    4: // Begin       : 2008-03-04
    5: // Last Update : 2013-05-14
    7: // Description : Example 045 for TCPDF class
    8: //               Bookmarks and Table of Content
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // add a page
   78: // set a bookmark for the current position
   81: // print a line using Cell()
   84: // Create a fixed link to the first page using the * character
  105: // fixed link to the first page using the * character
  110: // add some pages and bookmarks
  117: // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  119: // add a new page for TOC
  122: // write the TOC title
  129: // add a simple Table Of Content at first page
  130: // (check the example n. 59 for the HTML version)
  133: // end of TOC page
  136: // ---------------------------------------------------------
  142: // END OF FILE

TCPDF-main\examples\example_046.php:
    3: // File name   : example_046.php
    4: // Begin       : 2009-02-28
    5: // Last Update : 2013-05-14
    7: // Description : Example 046 for TCPDF class
    8: //               Text Hyphenation
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   92: // You can automatically add SOFT HYPHENS to your text using
   93: // the hyphenateText() method, but this requires either an
   94: // hyphenation pattern array of a hyphenation pattern TEX file.
   95: // You can download hyphenation TEX patterns from:
   96: // http://www.ctan.org/tex-archive/language/hyph-utf8/tex/generic/hyph-utf8/patterns/
   98: // EXAMPLE:
  108: // HTML text with soft hyphens (&shy;)
  115: // print a cell
  118: // ---------------------------------------------------------
  124: // END OF FILE

TCPDF-main\examples\example_047.php:
    3: // File name   : example_047.php
    4: // Begin       : 2009-03-19
    5: // Last Update : 2013-05-14
    7: // Description : Example 047 for TCPDF class
    8: //               Transactions
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   86: // start transaction
   92: // restarts transaction
   98: // rolls back to the last (re)start
  104: // start transaction
  109: // commit transaction (actually just frees memory)
  112: // ---------------------------------------------------------
  118: // END OF FILE

TCPDF-main\examples\example_048.php:
    3: // File name   : example_048.php
    4: // Begin       : 2009-03-20
    5: // Last Update : 2013-05-14
    7: // Description : Example 048 for TCPDF class
    8: //               HTML tables and table headers
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // add a page
   82: // -----------------------------------------------------------------------------
  104: // -----------------------------------------------------------------------------
  126: // -----------------------------------------------------------------------------
  148: // -----------------------------------------------------------------------------
  183: // -----------------------------------------------------------------------------
  185: // Table with rowspans and THEAD
  251: // -----------------------------------------------------------------------------
  253: // NON-BREAKING TABLE (nobr="true")
  280: // -----------------------------------------------------------------------------
  282: // NON-BREAKING ROWS (nobr="true")
  309: // -----------------------------------------------------------------------------
  315: // END OF FILE

TCPDF-main\examples\example_049.php:
    3: // File name   : example_049.php
    4: // Begin       : 2009-04-03
    5: // Last Update : 2014-12-10
    7: // Description : Example 049 for TCPDF class
    8: //               WriteHTML with TCPDF callback functions
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
  113: // output the HTML content
  116: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  118: // reset pointer to the last page
  121: // ---------------------------------------------------------
  127: // END OF FILE

TCPDF-main\examples\example_050.php:
    3: // File name   : example_050.php
    4: // Begin       : 2009-04-09
    5: // Last Update : 2013-05-14
    7: // Description : Example 050 for TCPDF class
    8: //               2D Barcodes
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // NOTE: 2D barcode algorithms must be implemented on 2dbarcode.php class file.
   73: // set font
   76: // add a page
   79: // print a message
   86: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   88: // set style for barcode
   95: 	'module_width' => 1, // width of a single module in points
   96: 	'module_height' => 1 // height of a single module in points
   99: // write RAW 2D Barcode
  104: // write RAW2 2D Barcode
  108: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  110: // set style for barcode
  117: 	'module_width' => 1, // width of a single module in points
  118: 	'module_height' => 1 // height of a single module in points
  121: // QRCODE,L : QR-CODE Low error correction
  125: // QRCODE,M : QR-CODE Medium error correction
  129: // QRCODE,Q : QR-CODE Better error correction
  133: // QRCODE,H : QR-CODE Best error correction
  137: // -------------------------------------------------------------------
  138: // PDF417 (ISO/IEC 15438:2006)
  173: // -------------------------------------------------------------------
  174: // DATAMATRIX (ISO/IEC 16022:2006)
  179: // -------------------------------------------------------------------
  181: // new style
  189: // QRCODE,H : QR-CODE Best error correction
  193: // new style
  201: // QRCODE,H : QR-CODE Best error correction
  205: // ---------------------------------------------------------
  211: // END OF FILE

TCPDF-main\examples\example_051.php:
    3: // File name   : example_051.php
    4: // Begin       : 2009-04-16
    5: // Last Update : 2013-05-14
    7: // Description : Example 051 for TCPDF class
    8: //               Full page background
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   34: // Extend the TCPDF class to create custom Header and Footer
   38: 		// get the current page break margin
   40: 		// get current auto-page-break mode
   42: 		// disable auto-page-break
   44: 		// set bacground image
   47: 		// restore auto-page-break status
   49: 		// set the starting point for the page content
   54: // create new PDF document
   57: // set document information
   64: // set header and footer fonts
   67: // set default monospaced font
   70: // set margins
   75: // remove default footer
   78: // set auto page breaks
   81: // set image scale factor
   84: // set some language-dependent strings (optional)
   90: // ---------------------------------------------------------
   92: // set font
   95: // add a page
   98: // Print a text
  104: // add a page
  107: // Print a text
  111: // --- example with background set on page ---
  113: // remove default header
  116: // add a page
  120: // -- set new background ---
  122: // get the current page break margin
  124: // get current auto-page-break mode
  126: // disable auto-page-break
  128: // set bacground image
  131: // restore auto-page-break status
  133: // set the starting point for the page content
  137: // Print a text
  141: // ---------------------------------------------------------
  147: // END OF FILE

TCPDF-main\examples\example_052.php:
    3: // File name   : example_052.php
    4: // Begin       : 2009-05-07
    5: // Last Update : 2013-05-14
    7: // Description : Example 052 for TCPDF class
    8: //               Certification Signature (experimental)
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   78: // set certificate file
   81: // set additional information
   89: // set document signature
   92: // set font. 'helvetica' MUST be used to avoid a PHP notice from PHP 7.4+
   95: // add a page
   98: // print a line of text
  102: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  103: // *** set signature appearance ***
  105: // create content for signature (image and/or text)
  108: // define active area for signature appearance
  111: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  113: // *** set an empty signature appearance ***
  116: // ---------------------------------------------------------
  122: // END OF FILE

TCPDF-main\examples\example_053.php:
    3: // File name   : example_053.php
    4: // Begin       : 2009-09-02
    5: // Last Update : 2013-05-14
    7: // Description : Example 053 for TCPDF class
    8: //               Javascript example.
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   77: // print a some of text
   81: // write some JavaScript code
   97: // force print dialog
  100: // set javascript
  103: // ---------------------------------------------------------
  109: // END OF FILE

TCPDF-main\examples\example_054.php:
    3: // File name   : example_054.php
    4: // Begin       : 2009-09-07
    5: // Last Update : 2013-05-14
    7: // Description : Example 054 for TCPDF class
    8: //               XHTML Forms
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // IMPORTANT: disable font subsetting to allow users editing the document
   75: // set font. 'helvetica' MUST be used to avoid a PHP notice from PHP 7.4+
   78: // add a page
   81: // create some HTML content
  118: // output the HTML content
  121: // reset pointer to the last page
  124: // ---------------------------------------------------------
  130: // END OF FILE

TCPDF-main\examples\example_055.php:
    3: // File name   : example_055.php
    4: // Begin       : 2009-10-21
    5: // Last Update : 2014-12-10
    7: // Description : Example 055 for TCPDF class
    8: //               Display all characters available on core fonts.
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // array of font names
   78: // set fill color
   81: // create one HTML table for each core font
   83: 	// add a page
   86: 	// Cell($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M')
   88: 	// set font for title
   91: 	// print font name
   94: 	// set font for chars
   97: 	// print each character
  107: 	// print a pangram
  111: // ---------------------------------------------------------
  117: // END OF FILE

TCPDF-main\examples\example_056.php:
    3: // File name   : example_056.php
    4: // Begin       : 2010-03-26
    5: // Last Update : 2013-09-30
    7: // Description : Example 056 for TCPDF class
    8: //               Crop marks and color registration bars
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   81: // color registration bars
   83: // A,W,R,G,B,C,M,Y,K,RGB,CMYK,ALL,ALLSPOT,<SPOT_COLOR_NAME>
   89: // corner crop marks
   96: // various crop marks
  106: // registration marks
  113: // test registration bar with spot colors
  125: // CMYK registration mark
  128: // ---------------------------------------------------------
  134: // END OF FILE

TCPDF-main\examples\example_057.php:
    3: // File name   : example_057.php
    4: // Begin       : 2010-04-03
    5: // Last Update : 2013-05-14
    7: // Description : Example 057 for TCPDF class
    8: //               Cell vertical alignments
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   81: // set border width
   84: // set color for cell border
   91: // text on center
  102: // text on top
  113: // text on bottom
  122: // draw some reference lines
  128: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  130: // Print an image to explain cell measures
  159: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  161: // CELL BORDERS
  163: // add a page
  172: // set border width
  175: // set color for cell border
  178: // set filling color
  181: // set cell height ratio
  216: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  218: // ADVANCED SETTINGS FOR CELL BORDERS
  220: // add a page
  229: // set border width
  232: // set color for cell border
  235: // set filling color
  258: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  260: // reset pointer to the last page
  263: // ---------------------------------------------------------
  269: // END OF FILE

TCPDF-main\examples\example_058.php:
   3: // File name   : example_058.php
   4: // Begin       : 2010-04-22
   5: // Last Update : 2013-05-14
   7: // Description : Example 058 for TCPDF class
   8: //               SVG Image
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  30: // Include the main TCPDF library (search for installation path).
  33: // create new PDF document
  36: // set document information
  43: // set default header data
  46: // set header and footer fonts
  50: // set default monospaced font
  53: // set margins
  58: // set auto page breaks
  61: // set image scale factor
  64: // set some language-dependent strings (optional)
  70: // ---------------------------------------------------------
  72: // set font
  75: // add a page
  78: // NOTE: Uncomment the following line to rasterize SVG image using the ImageMagick library.
  90: // ---------------------------------------------------------
  96: // END OF FILE

TCPDF-main\examples\example_059.php:
    3: // File name   : example_059.php
    4: // Begin       : 2010-05-06
    5: // Last Update : 2013-05-14
    7: // Description : Example 059 for TCPDF class
    8: //               Table Of Content using HTML templates.
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   44: 			// *** replace the following parent::Header() with your code for TOC page
   47: 			// *** replace the following parent::Header() with your code for normal pages
   58: 			// *** replace the following parent::Footer() with your code for TOC page
   61: 			// *** replace the following parent::Footer() with your code for normal pages
   66: } // end of class
   68: // create new PDF document
   71: // set document information
   78: // set default header data
   81: // set header and footer fonts
   85: // set default monospaced font
   88: // set margins
   93: // set auto page breaks
   96: // set image scale factor
   99: // set some language-dependent strings (optional)
  105: // set font
  108: // ---------------------------------------------------------
  110: // create some content ...
  112: // add a page
  115: // set a bookmark for the current position
  118: // print a line using Cell()
  137: // add some pages and bookmarks
  145: // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  148: // add a new page for TOC
  151: // write the TOC title and/or other elements on the TOC page
  157: // define styles for various bookmark levels
  171: // A monospaced font for the page number is mandatory to get the right alignment
  175: // add other bookmark level templates here ...
  177: // add table of content at page 1
  178: // (check the example n. 45 for a text-only TOC
  181: // end of TOC page
  184: // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
  186: // ---------------------------------------------------------
  192: // END OF FILE

TCPDF-main\examples\example_060.php:
    3: // File name   : example_060.php
    4: // Begin       : 2010-05-17
    5: // Last Update : 2013-05-14
    7: // Description : Example 060 for TCPDF class
    8: //               Advanced page settings.
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // set font
   72: // ---------------------------------------------------------
   74: // set page format (read source code documentation for further information)
   92: // Check the example n. 29 for viewer preferences
   94: // add first page ---
   98: // add second page ---
  103: // ---------------------------------------------------------
  109: // END OF FILE

TCPDF-main\examples\example_061.php:
    3: // File name   : example_061.php
    4: // Begin       : 2010-05-24
    5: // Last Update : 2014-01-25
    7: // Description : Example 061 for TCPDF class
    8: //               XHTML + CSS
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // add a page
   89: // define some HTML content with style
  220: // output the HTML content
  223: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  225: // add a page
  254: // output the HTML content
  257: // reset pointer to the last page
  260: // ---------------------------------------------------------
  266: // END OF FILE

TCPDF-main\examples\example_062.php:
    3: // File name   : example_062.php
    4: // Begin       : 2010-08-25
    5: // Last Update : 2013-05-14
    7: // Description : Example 062 for TCPDF class
    8: //               XObject Template
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   90: // start a new XObject Template and set transparency group option
   93: // create Template content
   94: // ...................................................................
   98: // set clipping mask
  101: // draw jpeg image to be clipped
  113: // print a text
  115: // ...................................................................
  117: // end the current Template
  121: // print the selected Template various times using various transparencies
  135: // ---------------------------------------------------------
  141: // END OF FILE

TCPDF-main\examples\example_063.php:
    3: // File name   : example_063.php
    4: // Begin       : 2010-09-29
    5: // Last Update : 2013-05-14
    7: // Description : Example 063 for TCPDF class
    8: //               Text stretching and spacing (tracking)
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   74: // add a page
   80: // create several cells to display all cases of stretching and spacing combinations.
   86: // Test all cases using direct stretching/spacing methods
  103: // Test all cases using CSS stretching/spacing properties
  120: // reset font stretching
  123: // reset font spacing
  126: // ---------------------------------------------------------
  132: // END OF FILE

TCPDF-main\examples\example_064.php:
    3: // File name   : example_064.php
    4: // Begin       : 2010-10-13
    5: // Last Update : 2013-05-14
    7: // Description : Example 064 for TCPDF class
    8: //               No-write page regions
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   29: // Include the main TCPDF library (search for installation path).
   32: // create new PDF document
   35: // set document information
   42: // set default header data
   45: // set header and footer fonts
   49: // set default monospaced font
   52: // set margins
   57: // set auto page breaks
   60: // set image scale factor
   63: // set some language-dependent strings (optional)
   69: // ---------------------------------------------------------
   71: // set font
   75: // define some html content for testing
   83: // add a page
   86: // print some graphic content
   90: // define some graphic styles
   95: // write a trapezoid with some information about no-write page regions
  106: // write a trapezoid with some information about no-write page regions
  117: // reset x,y position
  121: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  124: // define no-write page regions to avoid text overlapping images
  139: // set page regions, check also getPageRegions(), addPageRegion() and removePageRegion()
  142: // write html text
  146: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  148: // set a circular no-write region on the second page
  165: // define some html content for testing
  168: // write text
  171: // ---------------------------------------------------------
  177: // END OF FILE

TCPDF-main\examples\example_065.php:
   3: // File name   : example_065.php
   4: // Begin       : 2011-09-28
   5: // Last Update : 2013-05-14
   7: // Description : Example 065 for TCPDF class
   8: //               Creates an example PDF/A-1b document using TCPDF
  10: // Author: Nicola Asuni
  12: // (c) Copyright:
  13: //               Nicola Asuni
  14: //               Tecnick.com LTD
  15: //               www.tecnick.com
  16: //               info@tecnick.com
  29: // Include the main TCPDF library (search for installation path).
  32: // create new PDF document
  35: // set document information
  42: // set default header data
  45: // set header and footer fonts
  49: // set default monospaced font
  52: // set margins
  57: // set auto page breaks
  60: // set image scale factor
  63: // set some language-dependent strings (optional)
  69: // ---------------------------------------------------------
  71: // set default font subsetting mode
  74: // Set font
  77: // Add a page
  78: // This method has several options, check the source code documentation for more information.
  81: // Set some content to print
  89: // Print text using writeHTMLCell()
  92: // ---------------------------------------------------------
  94: // Close and output PDF document
  95: // This method has several options, check the source code documentation for more information.
  99: // END OF FILE

TCPDF-main\examples\example_066.php:
  21: // Load the autoloader, move one folder back from examples
  24: // create new PDF document
  27: // set document information
  34: // set default header data
  37: // set header and footer fonts
  41: // set default monospaced font
  44: // set margins
  49: // set auto page breaks
  52: // set image scale factor
  55: // set some language-dependent strings (optional)
  62: // ---------------------------------------------------------
  64: // set default font subsetting mode
  67: // Set font
  70: // Add a page
  71: // This method has several options, check the source code documentation for more information.
  74: // Set some content to print
  81: // Print text using writeHTMLCell()
  84: // ---------------------------------------------------------
  86: // Close and output PDF document
  87: // This method has several options, check the source code documentation for more information.

TCPDF-main\examples\example_067.php:
    3: // File name   : example_067.php
    4: // Begin       : 2022-01-07
    5: // Last Update : 2022-01-07
    7: // Description : Example 067 for TCPDF class
    8: //               HTML tables with !important in style
   10: // Author: Nicola Asuni
   12: // (c) Copyright:
   13: //               Nicola Asuni
   14: //               Tecnick.com LTD
   15: //               www.tecnick.com
   16: //               info@tecnick.com
   30: // Include the main TCPDF library (search for installation path).
   33: // create new PDF document
   36: // set document information
   43: // set default header data
   46: // set header and footer fonts
   50: // set default monospaced font
   53: // set margins
   58: // set auto page breaks
   61: // set image scale factor
   64: // set some language-dependent strings (optional)
   70: // ---------------------------------------------------------
   72: // set font
   75: // add a page
   82: // -----------------------------------------------------------------------------
  104: // -----------------------------------------------------------------------------
  126: // -----------------------------------------------------------------------------
  148: // -----------------------------------------------------------------------------
  170: // -----------------------------------------------------------------------------
  192: // -----------------------------------------------------------------------------
  194: // At medium thickness, which is what you get with only one
  195: //  setting for style, everything looks the same.
  196: // Included just for completeness.
  216: // -----------------------------------------------------------------------------
  222: // END OF FILE

TCPDF-main\examples\tcpdf_include.php:
   3: // File name   : tcpdf_include.php
   4: // Begin       : 2008-05-14
   5: // Last Update : 2014-12-10
   7: // Description : Search and include the TCPDF library.
   9: // Author: Nicola Asuni
  11: // (c) Copyright:
  12: //               Nicola Asuni
  13: //               Tecnick.com LTD
  14: //               www.tecnick.com
  15: //               info@tecnick.com
  26: // always load alternative config file for examples
  29: // Include the main TCPDF library (search the library on the following directories).
  31:     realpath(dirname(__FILE__) . '/../tcpdf.php'),// True source file
  32: 	realpath('../tcpdf.php'),// Relative from $PWD
  48: // END OF FILE

TCPDF-main\examples\barcodes\example_1d_html.php:
   3: // File name   : example_1d_html.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_1d.php class
  46: // include 1D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as HTML object
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_1d_png.php:
   3: // File name   : example_1d_png.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_1d.php class
  45: // include 1D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as PNG image
  55: // END OF FILE

TCPDF-main\examples\barcodes\example_1d_svg.php:
   3: // File name   : example_1d_svg.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_1d.php class
  46: // include 1D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as SVG image
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_1d_svgi.php:
   3: // File name   : example_1d_svgi.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_1d.php class
  46: // include 1D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as SVG inline code
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_datamatrix_html.php:
   3: // File name   : example_2d_html.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  46: // include 2D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as HTML object
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_datamatrix_png.php:
   3: // File name   : example_2d_png.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  45: // include 2D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as PNG image
  55: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_datamatrix_svg.php:
   3: // File name   : example_2d_svg.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  46: // include 2D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as SVG image
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_datamatrix_svgi.php:
   3: // File name   : example_2d_svgi.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  46: // include 2D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as SVG inline code
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_pdf417_html.php:
   3: // File name   : example_2d_html.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  46: // include 2D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as HTML object
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_pdf417_png.php:
   3: // File name   : example_2d_png.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  45: // include 2D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as PNG image
  55: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_pdf417_svg.php:
   3: // File name   : example_2d_svg.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  46: // include 2D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as SVG image
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_pdf417_svgi.php:
   3: // File name   : example_2d_svgi.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  46: // include 2D barcode class (search for installation path)
  49: // set the barcode content and type
  52: // output the barcode as SVG inline code
  56: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_qrcode_html.php:
   3: // File name   : example_2d_html.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  45: // include 2D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as HTML object
  55: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_qrcode_png.php:
   3: // File name   : example_2d_png.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  45: // include 2D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as PNG image
  55: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_qrcode_svg.php:
   3: // File name   : example_2d_svg.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  45: // include 2D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as SVG image
  55: // END OF FILE

TCPDF-main\examples\barcodes\example_2d_qrcode_svgi.php:
   3: // File name   : example_2d_svgi.php
   4: // Version     : 1.0.000
   5: // Begin       : 2011-07-21
   6: // Last Update : 2013-03-19
   7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
   8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   9: // -------------------------------------------------------------------
  10: // Copyright (C) 2009-2013 Nicola Asuni - Tecnick.com LTD
  12: // This file is part of TCPDF software library.
  14: // TCPDF is free software: you can redistribute it and/or modify it
  15: // under the terms of the GNU Lesser General Public License as
  16: // published by the Free Software Foundation, either version 3 of the
  17: // License, or (at your option) any later version.
  19: // TCPDF is distributed in the hope that it will be useful, but
  20: // WITHOUT ANY WARRANTY; without even the implied warranty of
  21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  22: // See the GNU Lesser General Public License for more details.
  24: // You should have received a copy of the GNU Lesser General Public License
  25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
  27: // See LICENSE.TXT file for more information.
  28: // -------------------------------------------------------------------
  30: // Description : Example for tcpdf_barcodes_2d.php class
  45: // include 2D barcode class (search for installation path)
  48: // set the barcode content and type
  51: // output the barcode as SVG inline code
  55: // END OF FILE

TCPDF-main\examples\barcodes\tcpdf_barcodes_1d_include.php:
   3: // File name   : tcpdf_barcodes_1d_include.php
   4: // Begin       : 2013-05-19
   5: // Last Update : 2013-05-19
   7: // Description : Search and include the TCPDF Barcode 1D class.
   9: // Author: Nicola Asuni
  11: // (c) Copyright:
  12: //               Nicola Asuni
  13: //               Tecnick.com LTD
  14: //               www.tecnick.com
  15: //               info@tecnick.com
  26: // Include the TCPDF 1D barcode class (search the class on the following directories).
  28:     realpath(dirname(__FILE__) . '/../../tcpdf_barcodes_1d.php'),// True source file
  29: 	realpath('../../tcpdf_barcodes_1d.php'),// Relative from $PWD
  45: // END OF FILE

TCPDF-main\examples\barcodes\tcpdf_barcodes_2d_include.php:
   3: // File name   : tcpdf_barcodes_2d_include.php
   4: // Begin       : 2013-05-19
   5: // Last Update : 2013-05-19
   7: // Description : Search and include the TCPDF Barcode 1D class.
   9: // Author: Nicola Asuni
  11: // (c) Copyright:
  12: //               Nicola Asuni
  13: //               Tecnick.com LTD
  14: //               www.tecnick.com
  15: //               info@tecnick.com
  26: // Include the TCPDF 2D barcode class (search the class on the following directories).
  28:     realpath(dirname(__FILE__) . '/../../tcpdf_barcodes_2d.php'),// True source file
  29: 	realpath('../../tcpdf_barcodes_2d.php'),// Relative from $PWD
  45: // END OF FILE

TCPDF-main\examples\config\tcpdf_config_alt.php:
    3: // File name   : tcpdf_config.php
    4: // Begin       : 2004-06-11
    5: // Last Update : 2013-05-16
    7: // Description : Example of alternative configuration file for TCPDF.
    8: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    9: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   10: // -------------------------------------------------------------------
   11: // Copyright (C) 2004-2013  Nicola Asuni - Tecnick.com LTD
   13: // This file is part of TCPDF software library.
   15: // TCPDF is free software: you can redistribute it and/or modify it
   16: // under the terms of the GNU Lesser General Public License as
   17: // published by the Free Software Foundation, either version 3 of the
   18: // License, or (at your option) any later version.
   20: // TCPDF is distributed in the hope that it will be useful, but
   21: // WITHOUT ANY WARRANTY; without even the implied warranty of
   22: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   23: // See the GNU Lesser General Public License for more details.
   25: // You should have received a copy of the GNU Lesser General Public License
   26: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
   28: // See LICENSE.TXT file for more information.
  221: // END OF FILE

TCPDF-main\examples\lang\afr.php:
   3: // File name   : afr.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Afrikaans
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Afrikaans
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ara.php:
   3: // File name   : ara.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Arabic
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Arabic
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\aze.php:
   3: // File name   : aze.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Azerbaijani
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Azerbaijani
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\bel.php:
   3: // File name   : bel.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Basque
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Basque
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\bra.php:
   3: // File name   : eng.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Brazilian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Brazilian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\bul.php:
   3: // File name   : bul.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2013-05-13
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Bulgarian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Bulgarian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\cat.php:
   3: // File name   : cat.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Catalan
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Catalan
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ces.php:
   3: // File name   : ces.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-11-22
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Czech
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Czech
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\chi.php:
   3: // File name   : chi.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Chinese (Simplified)
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Chinese (Simplified)
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\cym.php:
   3: // File name   : urd.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Welsh
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Welsh
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\dan.php:
   3: // File name   : dan.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Danish
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Danish
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\eng.php:
   3: // File name   : eng.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               English
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // English
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\est.php:
   3: // File name   : est.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Estonian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Estonian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\eus.php:
   3: // File name   : eus.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Basque
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Basque
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\far.php:
   3: // File name   : far.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Farsi
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Farsi
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\fra.php:
   3: // File name   : fra.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               French
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // French
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ger.php:
   3: // File name   : ger.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-11-16
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               German
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // German
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\gle.php:
   3: // File name   : ind.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Irish
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Irish
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\glg.php:
   3: // File name   : glg.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Galician
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Galician
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\hat.php:
   3: // File name   : hat.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Haitian Creole
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Haitian Creole
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\heb.php:
   3: // File name   : heb.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Hebrew
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Hebrew
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\hrv.php:
   3: // File name   : hrv.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Croatian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Croatian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\hun.php:
   3: // File name   : hun.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Hungarian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Hungarian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\hye.php:
   3: // File name   : hye.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Armenian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Armenian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ind.php:
   3: // File name   : ind.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Indonesian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Indonesian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ita.php:
   3: // File name   : ita.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Italian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Italian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\jpn.php:
   3: // File name   : jpn.php
   4: // Begin       : 2011-01-24
   5: // Last Update : 2011-01-24
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Japanese
  11: // Author: Nicola Asuni - Translation by redcocker
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Japanese
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\kat.php:
   3: // File name   : kat.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Georgian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Georgian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\kor.php:
   3: // File name   : kor.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Korean
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Korean
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\mkd.php:
   3: // File name   : mkd.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Macedonian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Macedonian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\mlt.php:
   3: // File name   : mlt.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Maltese
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Maltese
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\msa.php:
   3: // File name   : msa.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Malay
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Malay
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\nld.php:
   3: // File name   : nld.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Dutch
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Dutch
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\nob.php:
   3: // File name   : nob.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Norwegian Bokmål
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Norwegian Bokmål
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\pol.php:
   3: // File name   : pol.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Polish
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Polish
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\por.php:
   3: // File name   : por.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Portuguese
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Portuguese
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ron.php:
   3: // File name   : ron.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Romanian, Moldavian, Moldovan
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Romanian, Moldavian, Moldovan
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\rus.php:
   3: // File name   : rus.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2012-07-25
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Russian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Russian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\slv.php:
   3: // File name   : slv.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Slovene
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Slovene
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\spa.php:
   3: // File name   : spa.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Spanish; Castilian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Spanish; Castilian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\sqi.php:
   3: // File name   : sqi.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Albanian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Albanian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\srp.php:
   3: // File name   : srp.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Serbian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Serbian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\swa.php:
   3: // File name   : swa.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Swahili
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Swahili
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\swe.php:
   3: // File name   : swe.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Swedish
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Swedish
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\ukr.php:
   3: // File name   : ukr.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2012-07-25
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Ukrainian
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Russian
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\urd.php:
   3: // File name   : urd.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Urdu
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Urdu
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\yid.php:
   3: // File name   : yid.php
   4: // Begin       : 2004-03-03
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Welsh
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Welsh
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\examples\lang\zho.php:
   3: // File name   : zho.php
   4: // Begin       : 2010-10-26
   5: // Last Update : 2010-10-26
   7: // Description : Language module for TCPDF
   8: //               (contains translated texts)
   9: //               Chinese
  11: // Author: Nicola Asuni
  13: // (c) Copyright:
  14: //               Nicola Asuni
  15: //               Tecnick.com LTD
  16: //               www.tecnick.com
  17: //               info@tecnick.com
  28: // Chinese
  33: // PAGE META DESCRIPTORS --------------------------------------
  39: // TRANSLATIONS --------------------------------------
  43: // END OF FILE

TCPDF-main\fonts\helvetica.php:
   2: // TCPDF FONT FILE DESCRIPTION
  13: // --- EOF ---

TCPDF-main\fonts\helveticab.php:
   2: // TCPDF FONT FILE DESCRIPTION
  12: // --- EOF ---

TCPDF-main\fonts\helveticabi.php:
   2: // TCPDF FONT FILE DESCRIPTION
  12: // --- EOF ---

TCPDF-main\fonts\helveticai.php:
   2: // TCPDF FONT FILE DESCRIPTION
  12: // --- EOF ---

TCPDF-main\include\tcpdf_colors.php:
    3: // File name   : tcpdf_colors.php
    4: // Version     : 1.0.004
    5: // Begin       : 2002-04-09
    6: // Last Update : 2014-04-25
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2002-2013  Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the GNU Lesser General Public License
   25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
   27: // See LICENSE.TXT file for more information.
   28: // -------------------------------------------------------------------
   30: // Description : Array of WEB safe colors
  204: 	); // end of web colors
  220: 		// special registration colors
  223: 		// standard CMYK colors
  228: 		// alias
  231: 		// standard RGB colors
  235: 		// Add here standard spot colors or dynamically define them with AddSpotColor()
  236: 		// ...
  237: 	); // end of spot colors
  239: 	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  253: 		$color = preg_replace('/[\s]*/', '', $name); // remove extra spaces
  274: 		$color = preg_replace('/[\s]*/', '', $hcolor); // remove extra spaces
  276: 		// check for javascript color array syntax
  282: 						// RGB
  290: 						// RGB
  297: 						// grayscale
  303: 						// transparent (empty array)
  310: 			// remove class parent (i.e.: color.red)
  313: 				// transparent (empty array)
  320: 		// RGB ARRAY
  327: 					// percentage
  332: 				// normalize value
  337: 		// CMYK ARRAY
  344: 					// percentage
  349: 				// normalize value
  355: 			// COLOR NAME
  357: 				// web color
  360: 				// spot color
  370: 		// HEXADECIMAL REPRESENTATION
  373: 				// 3-digit RGB hexadecimal representation
  384: 				// 6-digit RGB hexadecimal representation
  392: 				// 8-digit CMYK hexadecimal representation
  420: 				// CMYK
  425: 				// RGB
  430: 				// grayscale
  451: 			// default transparent color
  458: } // END OF TCPDF_COLORS CLASS
  461: // END OF FILE

TCPDF-main\include\tcpdf_filters.php:
    3: // File name   : tcpdf_filters.php
    4: // Version     : 1.0.001
    5: // Begin       : 2011-05-23
    6: // Last Update : 2014-04-25
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2011-2013 Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the License
   25: // along with TCPDF. If not, see
   26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
   28: // See LICENSE.TXT file for more information.
   29: // -------------------------------------------------------------------
   31: // Description : This is a PHP class for decoding common PDF filters (PDF 32000-2008 - 7.4 Filters).
   59: // -----------------------------------------------------------------------------
  128: 	// --- FILTERS (PDF 32000-2008 - 7.4 Filters) ------------------------------
  151: 		// initialize string to return
  153: 		// all white-space characters shall be ignored
  155: 		// check for EOD character: GREATER-THAN SIGN (3Eh)
  158: 			// remove EOD and extra data (if any)
  162: 		// get data length
  165: 			// odd number of hexadecimal digits
  167: 				// EOD shall behave as if a 0 (zero) followed the last digit
  173: 		// check for invalid characters
  177: 		// get one byte of binary data for each pair of ASCII hexadecimal digits
  191: 		// initialize string to return
  193: 		// all white-space characters shall be ignored
  195: 		// remove start sequence 2-character sequence <~ (3Ch)(7Eh)
  197: 			// remove EOD and extra data (if any)
  200: 		// check for EOD: 2-character sequence ~> (7Eh)(3Eh)
  203: 			// remove EOD and extra data (if any)
  206: 		// data length
  208: 		// check for invalid characters
  212: 		// z sequence
  214: 		// position inside a group of 4 bytes (0-3)
  219: 		// for each byte
  221: 			// get char value
  223: 			if ($char == 122) { // 'z'
  230: 				// the value represented by a group of 5 characters should never be greater than 2^32 - 1
  244: 		// last tuple (if any)
  275: 		// initialize string to return
  277: 		// data length
  279: 		// convert string to binary string
  284: 		// get the number of bits
  286: 		// initialize code length in bits
  288: 		// initialize dictionary index
  290: 		// initialize the dictionary (with the first 256 entries).
  295: 		// previous val
  297: 		// while we encounter EOD marker (257), read code_length bits
  299: 			// remove read bits from string
  301: 			// update number of bits
  303: 			if ($index == 256) { // clear-table marker
  304: 				// reset code length in bits
  306: 				// reset dictionary index
  309: 				// reset the dictionary (with the first 256 entries).
  315: 				// first entry
  319: 				// check if index exist in the dictionary
  321: 					// index exist on dictionary
  324: 					// store current index
  327: 					// index do not exist on dictionary
  331: 				// update dictionary
  334: 				// change bit length by case
  356: 		// initialize string to return
  372: 		// initialize string to return
  374: 		// data length
  378: 			// get current byte value
  381: 				// a length value of 128 denote EOD
  384: 				// if the length byte is in the range 0 to 127
  385: 				// the following length + 1 (1 to 128) bytes shall be copied literally during decompression
  387: 				// move to next block
  390: 				// if length is in the range 129 to 255,
  391: 				// the following single byte shall be copied 257 - length (2 to 128) times during decompression
  393: 				// move to next block
  465: 	// --- END FILTERS SECTION -------------------------------------------------
  477: } // END OF TCPDF_FILTERS CLASS
  480: // END OF FILE

TCPDF-main\include\tcpdf_font_data.php:
      3: // File name   : tcpdf_font_data.php
      4: // Version     : 1.0.001
      5: // Begin       : 2008-01-01
      6: // Last Update : 2013-04-01
      7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
      8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
      9: // -------------------------------------------------------------------
     10: // Copyright (C) 2008-2013 Nicola Asuni - Tecnick.com LTD
     12: // This file is part of TCPDF software library.
     14: // TCPDF is free software: you can redistribute it and/or modify it
     15: // under the terms of the GNU Lesser General Public License as
     16: // published by the Free Software Foundation, either version 3 of the
     17: // License, or (at your option) any later version.
     19: // TCPDF is distributed in the hope that it will be useful, but
     20: // WITHOUT ANY WARRANTY; without even the implied warranty of
     21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
     22: // See the GNU Lesser General Public License for more details.
     24: // You should have received a copy of the GNU Lesser General Public License
     25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
     27: // See LICENSE.TXT file for more information.
     28: // -------------------------------------------------------------------
     30: // Description : Unicode data and encoding maps for TCPDF.
  18369: // encoding map for: cp874
  18372: // encoding map for: cp1250
  18375: // encoding map for: cp1251
  18378: // encoding map for: cp1252
  18381: // encoding map for: cp1253
  18384: // encoding map for: cp1254
  18387: // encoding map for: cp1255
  18390: // encoding map for: cp1256
  18393: // encoding map for: cp1257
  18396: // encoding map for: cp1258
  18399: // encoding map for: iso-8859-1
  18402: // encoding map for: iso-8859-2
  18405: // encoding map for: iso-8859-4
  18408: // encoding map for: iso-8859-5
  18411: // encoding map for: iso-8859-7
  18414: // encoding map for: iso-8859-9
  18417: // encoding map for: iso-8859-11
  18420: // encoding map for: iso-8859-15
  18423: // encoding map for: iso-8859-16
  18426: // encoding map for: koi8-r
  18429: // encoding map for: koi8-u
  18432: // encoding map for: symbol
  18435: ); // end of encoding maps
  18443: } // END OF TCPDF_FONT_DATA CLASS
  18446: // END OF FILE

TCPDF-main\include\tcpdf_fonts.php:
     3: // File name   : tcpdf_fonts.php
     4: // Version     : 1.1.0
     5: // Begin       : 2008-01-01
     6: // Last Update : 2014-12-10
     7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
     8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
     9: // -------------------------------------------------------------------
    10: // Copyright (C) 2008-2014 Nicola Asuni - Tecnick.com LTD
    12: // This file is part of TCPDF software library.
    14: // TCPDF is free software: you can redistribute it and/or modify it
    15: // under the terms of the GNU Lesser General Public License as
    16: // published by the Free Software Foundation, either version 3 of the
    17: // License, or (at your option) any later version.
    19: // TCPDF is distributed in the hope that it will be useful, but
    20: // WITHOUT ANY WARRANTY; without even the implied warranty of
    21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    22: // See the GNU Lesser General Public License for more details.
    24: // You should have received a copy of the GNU Lesser General Public License
    25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
    27: // See LICENSE.TXT file for more information.
    28: // -------------------------------------------------------------------
    30: // Description :Font methods for TCPDF library.
    74: 			// Could not find file
    77: 		// font metrics
    79: 		// build new font name for TCPDF compatibility
    90: 			// set generic name
    93: 		// set output path
    97: 		// check if this font already exist
    99: 			// this font already exist (delete it from fonts folder to rebuild it)
   104: 		// get font data
   107: 		// autodetect font type
   110: 				// True Type (Unicode or not)
   113: 				// Open Type (Unicode or not)
   117: 				// Type 1
   121: 		// set font type
   147: 		// set encoding maps (if any)
   152: 				// build differences from reference encoding
   167: 		// parse the font by type
   169: 			// ---------- TYPE 1 ----------
   170: 			// read first segment
   173: 				// Font file is not a valid binary Type1
   178: 			// read second segment
   181: 				// Font file is not a valid binary Type1
   187: 			// store compressed font
   192: 			// get font info
   214: 			// get internal map
   221: 			// decrypt eexec encrypted part
   222: 			$r = 55665; // eexec encryption constant
   267: 			// get the number of random bytes at the beginning of charstrings
   274: 			// get charstring data
   297: 				// decrypt charstring encrypted part
   298: 				$r = 4330; // charstring encryption constant
   309: 				// decode numbers
   317: 							// hsbw command: update width
   338: 			} // end for each matches
   342: 			// set chars widths
   356: 			// ---------- TRUE TYPE ----------
   357: 			$offset = 0; // offset position of the font data
   359: 				// sfnt version must be 0x00010000 for TrueType version 1.0.
   364: 					// creates a symbolic link to the existing font
   367: 					// store compressed font
   375: 			// get number of tables
   378: 			// skip searchRange, entrySelector and rangeShift
   380: 			// tables array
   382: 			// ---------- get tables ----------
   384: 				// get table info
   395: 			// check magicNumber
   398: 				// magicNumber must be 0x5F0F3CF5
   402: 			$offset += 2; // skip flags
   403: 			// get FUnits
   406: 			// units ratio constant
   408: 			$offset += 16; // skip created, modified
   420: 			// PDF font flags
   423: 				// italic flag
   426: 			// get offset mode (indexToLocFormat : 0 = short, 1 = long)
   430: 			// get the offsets to the locations of the glyphs in the font, relative to the beginning of the glyphData table
   434: 				// short version
   435: 				$tot_num_glyphs = floor($table['loca']['length'] / 2); // numGlyphs + 1
   439: 						// the last glyph didn't have an outline
   445: 				// long version
   446: 				$tot_num_glyphs = floor($table['loca']['length'] / 4); // numGlyphs + 1
   450: 						// the last glyph didn't have an outline
   456: 			// get glyphs indexes of chars from cmap table
   469: 			// ---------- get os/2 metrics ----------
   471: 			$offset += 2; // skip version
   472: 			// xAvgCharWidth
   475: 			// usWeightClass
   477: 			// estimate StemV and StemH (400 = usWeightClass for Normal - Regular font)
   481: 			$offset += 2; // usWidthClass
   485: 				// This Font cannot be modified, embedded or exchanged in any manner without first obtaining permission of the legal owner.
   488: 			// ---------- get font name ----------
   491: 			$offset += 2; // skip Format selector (=0).
   492: 			// Number of NameRecords that follow n.
   495: 			// Offset to start of string storage (from start of table).
   499: 				$offset += 6; // skip Platform ID, Platform-specific encoding ID, Language ID.
   500: 				// Name ID.
   504: 					// String length (in bytes).
   507: 					// String offset from start of storage area (in bytes).
   515: 					$offset += 4; // skip String length, String offset
   521: 			// ---------- get post data ----------
   523: 			$offset += 4; // skip Format Type
   535: 			// ---------- get hhea data ----------
   537: 			$offset += 4; // skip Table version number
   538: 			// Ascender
   541: 			// Descender
   544: 			// LineGap
   547: 			// advanceWidthMax
   550: 			$offset += 22; // skip some values
   551: 			// get the number of hMetric entries in hmtx table
   553: 			// ---------- get maxp data ----------
   555: 			$offset += 4; // skip Table version number
   556: 			// get the the number of glyphs in the font.
   558: 			// ---------- get CIDToGIDMap ----------
   562: 				// get only specified Platform ID and Encoding ID
   568: 						case 0: { // Format 0: Byte encoding table
   569: 							$offset += 4; // skip length and version/language
   577: 						case 2: { // Format 2: High-byte mapping through table
   578: 							$offset += 4; // skip length and version/language
   581: 								// Array that maps high bytes to subHeaders: value is subHeader index * 8.
   588: 							// the number of subHeaders is equal to the max of subHeaderKeys + 1
   590: 							// read subHeader structures
   613: 									// one byte code
   618: 									// two bytes code
   622: 										// combine high and low bytes
   635: 						case 4: { // Format 4: Segment mapping to delta values
   638: 							$offset += 2; // skip version/language
   641: 							$offset += 6; // skip searchRange, entrySelector, rangeShift
   642: 							$endCount = array(); // array of end character codes for each segment
   647: 							$offset += 2; // skip reservedPad
   648: 							$startCount = array(); // array of start character codes for each segment
   653: 							$idDelta = array(); // delta for all character codes in segment
   658: 							$idRangeOffset = array(); // Offsets into glyphIdArray or 0
   664: 							$glyphIdArray = array(); // glyph index array
   685: 						case 6: { // Format 6: Trimmed table mapping
   686: 							$offset += 4; // skip length and version/language
   699: 						case 8: { // Format 8: Mixed 16-bit and 32-bit coverage
   700: 							$offset += 10; // skip reserved, length and version/language
   719: 										// 32 bit format
   720: 										// convert to decimal (http://www.unicode.org/faq//utf_bom.html#utf16-4)
   731: 						case 10: { // Format 10: Trimmed array
   732: 							$offset += 10; // skip reserved, length and version/language
   745: 						case 12: { // Format 12: Segmented coverage
   746: 							$offset += 10; // skip length and version/language
   763: 						case 13: { // Format 13: Many-to-one range mappings
   764: 							// to be implemented ...
   767: 						case 14: { // Format 14: Unicode Variation Sequences
   768: 							// to be implemented ...
   777: 			// get xHeight (height of x)
   784: 			// get CapHeight (height of H)
   791: 			// ceate widths array
   796: 				$offset += 4; // skip lsb
   799: 				// fill missing widths with the last value
   820: 		} // end of true type
   824: 		// ---------- create php font file ----------
   826: 		$pfile .= '// TCPDF FONT FILE DESCRIPTION'."\n";
   838: 			// Type 1
   846: 				// CID-0
   849: 						$pfile .= '// Japanese'."\n";
   856: 						$pfile .= '// Korean'."\n";
   863: 						$pfile .= '// Chinese Simplified'."\n";
   871: 						$pfile .= '// Chinese Traditional'."\n";
   879: 				// TrueType
   883: 				// create CIDToGIDMap
   884: 				$cidtogidmap = str_pad('', 131072, "\x00"); // (256 * 256 * 2) = 131072
   888: 				// store compressed CIDToGIDMap
   913: 		$pfile .= '// --- EOF ---'."\n";
   914: 		// store file
   918: 		// return TCPDF font name
   955: 		$offset = 0; // offset position of the font data
   957: 			// sfnt version must be 0x00010000 for TrueType version 1.0.
   962: 		// get number of tables
   965: 		// skip searchRange, entrySelector and rangeShift
   967: 		// tables array
   969: 		// for each table
   971: 			// get table info
   982: 		// check magicNumber
   985: 			// magicNumber must be 0x5F0F3CF5
   989: 		// get offset mode (indexToLocFormat : 0 = short, 1 = long)
   993: 		// get the offsets to the locations of the glyphs in the font, relative to the beginning of the glyphData table
   997: 			// short version
   998: 			$tot_num_glyphs = floor($table['loca']['length'] / 2); // numGlyphs + 1
  1004: 			// long version
  1005: 			$tot_num_glyphs = ($table['loca']['length'] / 4); // numGlyphs + 1
  1011: 		// get glyphs indexes of chars from cmap table
  1012: 		$subsetglyphs = array(); // glyph IDs on key
  1013: 		$subsetglyphs[0] = true; // character codes that do not correspond to any glyph in the font should be mapped to glyph index 0
  1027: 			// get all platforms and encodings
  1032: 				case 0: { // Format 0: Byte encoding table
  1033: 					$offset += 4; // skip length and version/language
  1043: 				case 2: { // Format 2: High-byte mapping through table
  1044: 					$offset += 4; // skip length and version/language
  1047: 						// Array that maps high bytes to subHeaders: value is subHeader index * 8.
  1054: 					// the number of subHeaders is equal to the max of subHeaderKeys + 1
  1056: 					// read subHeader structures
  1079: 							// one byte code
  1086: 							// two bytes code
  1090: 								// combine high and low bytes
  1105: 				case 4: { // Format 4: Segment mapping to delta values
  1108: 					$offset += 2; // skip version/language
  1111: 					$offset += 6; // skip searchRange, entrySelector, rangeShift
  1112: 					$endCount = array(); // array of end character codes for each segment
  1117: 					$offset += 2; // skip reservedPad
  1118: 					$startCount = array(); // array of start character codes for each segment
  1123: 					$idDelta = array(); // delta for all character codes in segment
  1128: 					$idRangeOffset = array(); // Offsets into glyphIdArray or 0
  1134: 					$glyphIdArray = array(); // glyph index array
  1157: 				case 6: { // Format 6: Trimmed table mapping
  1158: 					$offset += 4; // skip length and version/language
  1173: 				case 8: { // Format 8: Mixed 16-bit and 32-bit coverage
  1174: 					$offset += 10; // skip reserved, length and version/language
  1193: 								// 32 bit format
  1194: 								// convert to decimal (http://www.unicode.org/faq//utf_bom.html#utf16-4)
  1207: 				case 10: { // Format 10: Trimmed array
  1208: 					$offset += 10; // skip reserved, length and version/language
  1223: 				case 12: { // Format 12: Segmented coverage
  1224: 					$offset += 10; // skip length and version/language
  1243: 				case 13: { // Format 13: Many-to-one range mappings
  1244: 					// to be implemented ...
  1247: 				case 14: { // Format 14: Unicode Variation Sequences
  1248: 					// to be implemented ...
  1253: 		// include all parts of composite glyphs
  1263: 					if ($numberOfContours < 0) { // composite glyph
  1264: 						$offset += 8; // skip xMin, yMin, xMax, yMax
  1271: 								// add missing glyphs
  1274: 							// skip some bytes by case
  1293: 		// sort glyphs by key (and remove duplicates)
  1295: 		// build new glyf and loca tables
  1314: 		// array of table names to preserve (loca and glyf tables will be added later)
  1315: 		// the cmap table is not needed and shall not be present, since the mapping from character codes to glyph descriptions is provided separately
  1316: 		$table_names = array ('head', 'hhea', 'hmtx', 'maxp', 'cvt ', 'fpgm', 'prep'); // minimum required table names
  1317: 		// get the tables to preserve
  1323: 					// set the checkSumAdjustment to 0
  1333: 				// check sum is not changed (so keep the following line commented)
  1339: 		// add loca
  1351: 		// add glyf
  1363: 		// rebuild font
  1365: 		$font .= pack('N', 0x10000); // sfnt version
  1367: 		$font .= pack('n', $numTables); // numTables
  1371: 		$font .= pack('n', $searchRange); // searchRange
  1372: 		$font .= pack('n', $entrySelector); // entrySelector
  1373: 		$font .= pack('n', $rangeShift); // rangeShift
  1376: 			$font .= $tag; // tag
  1377: 			$font .= pack('N', $data['checkSum']); // checkSum
  1378: 			$font .= pack('N', ($data['offset'] + $offset)); // offset
  1379: 			$font .= pack('N', $data['length']); // length
  1384: 		// set checkSumAdjustment on head table
  1406: 		// for each character
  1410: 				// ignore the unused characters (font subsetting)
  1415: 					// consecutive CID
  1421: 							// new range
  1431: 							// new range
  1441: 					// new range
  1451: 		// optimize ranges
  1481: 		// output data
  1485: 				// interval mode is more compact
  1488: 				// range mode
  1547: 		// search files on various directories
  1649: // ====================================================================================================================
  1650: // REIMPLEMENTED
  1651: // ====================================================================================================================
  1673: 			// one byte
  1676: 			// two bytes
  1679: 			// three bytes
  1682: 			// four bytes
  1748: 		$outstr = ''; // string to be returned
  1750: 			$outstr .= "\xFE\xFF"; // Byte Order Mark (BOM)
  1754: 				// skip Unicode Character 'ZERO WIDTH SPACE' (DEC:8203, U+200B)
  1756: 				$outstr .= "\xFF\xFD"; // replacement character
  1843: 		$outarr = array(); // array to be returned
  1848: 				// map from UTF-8
  1851: 				// skip
  1853: 				$outarr[] = 63; // '?' character
  1868: 		$outstr = ''; // string to be returned
  1873: 				// map from UTF-8
  1876: 				// skip
  1938: 		$bytes = array(); // array containing single character byte sequences
  1940: 		$numbytes = 1; // number of octetc needed to represent the UTF-8 character
  1943: 			$char = ord($uch[$i]); // get one string character at time
  1944: 			if ($countbytes == 0) { // get starting octect
  1946: 					return $char; // use the character "as is" because is ASCII
  1947: 				} elseif (($char >> 0x05) == 0x06) { // 2 bytes character (0x06 = 110 BIN)
  1951: 				} elseif (($char >> 0x04) == 0x0E) { // 3 bytes character (0x0E = 1110 BIN)
  1955: 				} elseif (($char >> 0x03) == 0x1E) { // 4 bytes character (0x1E = 11110 BIN)
  1960: 					// use replacement character for other invalid sequences
  1963: 			} elseif (($char >> 0x06) == 0x02) { // bytes 2, 3 and 4 must start with 0x02 = 10 BIN
  1967: 					// compose UTF-8 bytes to a single unicode value
  1973: 						// The definition of UTF-8 prohibits encoding character numbers between
  1974: 						// U+D800 and U+DFFF, which are reserved for use with the UTF-16
  1975: 						// encoding form (as surrogate pairs) and do not directly represent
  1976: 						// characters.
  1977: 						return 0xFFFD; // use replacement character
  1983: 				// use replacement character for other invalid sequences
  2003: 			// requires PCRE unicode support turned on
  2028: 		$unicode = self::UTF8StringToArray($str, $isunicode, $currentfont); // array containing UTF-8 unicode values
  2045: 			return $str; // string is not in unicode
  2047: 		$unicode = self::UTF8StringToArray($str, $isunicode, $currentfont); // array containing UTF-8 unicode values
  2097: 		// paragraph embedding level
  2099: 		// max level
  2102: 			// create string from array
  2105: 		// check if string contains arabic text
  2111: 		// check if string contains RTL text
  2116: 		// get number of chars
  2124: 			// P2. In each paragraph, find the first character of type L, AL, or R.
  2125: 			// P3. If a character is found in P2 and it is of type AL or R, then set the paragraph embedding level to one; otherwise, set it to zero.
  2138: 		// Current Embedding Level
  2140: 		// directional override status
  2143: 		// start-of-level-run
  2147: 		// Array of characters data
  2150: 		// X1. Begin by setting the current embedding level to the paragraph embedding level. Set the directional override status to neutral. Process each character iteratively, applying rules X2 through X9. Only embedding levels from 0 to 61 are valid in this phase.
  2151: 		// In the resolution of levels in rules I1 and I2, the maximum embedding level of 62 can be reached.
  2154: 				// X2. With each RLE, compute the least greater odd embedding level.
  2166: 				// X3. With each LRE, compute the least greater even embedding level.
  2178: 				// X4. With each RLO, compute the least greater odd embedding level.
  2190: 				// X5. With each LRO, compute the least greater even embedding level.
  2202: 				// X7. With each PDF, determine the matching embedding or override code. If there was a valid matching code, restore (pop) the last remembered (pushed) embedding level and directional override.
  2221: 				// X6. For all types besides RLE, LRE, RLO, LRO, and PDF:
  2233: 				// stores string characters and other information
  2236: 		} // end for each char
  2238: 		// X8. All explicit directional embeddings and overrides are completely terminated at the end of each paragraph. Paragraph separators are not included in the embedding.
  2239: 		// X9. Remove all RLE, LRE, RLO, LRO, PDF, and BN codes.
  2240: 		// X10. The remaining rules are applied to each run of characters at the same level. For each run, determine the start-of-level-run (sor) and end-of-level-run (eor) type, either L or R. This depends on the higher of the two levels on either side of the boundary (at the start or end of the paragraph, the level of the 'other' run is the base embedding level). If the higher level is odd, the type is R; otherwise, it is L.
  2242: 		// 3.3.3 Resolving Weak Types
  2243: 		// Weak types are now resolved one level run at a time. At level run boundaries where the type of the character on the other side of the boundary is required, the type assigned to sor or eor is used.
  2244: 		// Nonspacing marks are now resolved based on the previous characters.
  2247: 		// W1. Examine each nonspacing mark (NSM) in the level run, and change the type of the NSM to the type of the previous character. If the NSM is at the start of the level run, it will get the type of sor.
  2248: 		$prevlevel = -1; // track level changes
  2249: 		$levcount = 0; // counts consecutive chars at the same level
  2266: 		// W2. Search backward from each instance of a European number until the first strong type (R, L, AL, or sor) is found. If an AL is found, change the type of the European number to Arabic number.
  2287: 		// W3. Change all ALs to R.
  2294: 		// W4. A single European separator between two European numbers changes to a European number. A single common separator between two numbers of the same type changes to that type.
  2315: 		// W5. A sequence of European terminators adjacent to European numbers changes to all European numbers.
  2343: 		// W6. Otherwise, separators and terminators change to Other Neutral.
  2379: 		// N1. A sequence of neutrals takes the direction of the surrounding strong text if the text on both sides has the same direction. European and Arabic numbers act as if they were R in terms of their influence on neutrals. Start-of-level-run (sor) and end-of-level-run (eor) are used at level run boundaries.
  2391: 					// N2. Any remaining neutrals take the embedding direction
  2395: 				// first char
  2403: 					// N2. Any remaining neutrals take the embedding direction
  2415: 					// N2. Any remaining neutrals take the embedding direction
  2419: 				// N2. Any remaining neutrals take the embedding direction
  2430: 		// I1. For all characters with an even (left-to-right) embedding direction, those of type R go up one level and those of type AN or EN go up two levels.
  2431: 		// I2. For all characters with an odd (right-to-left) embedding direction, those of type L, EN or AN go up one level.
  2448: 		// L1. On each line, reset the embedding level of the following characters to the paragraph embedding level:
  2471: 		// Arabic Shaping
  2472: 		// Cursively connected scripts, such as Arabic or Syriac, require the selection of positional character shapes that depend on adjacent characters. Shaping is logically applied after the Bidirectional Algorithm is used and is limited to characters within the same directional run.
  2513: 					// if laa letter
  2534: 								// initial
  2539: 								// medial
  2548: 							// initial
  2555: 						// final
  2560: 							// mark characters to delete with false
  2567: 									// isolated
  2572: 									// final
  2578: 						// isolated
  2581: 					// if laa letter
  2583: 						// mark characters to delete with false
  2586: 				} // end if AL (Arabic Letter)
  2587: 			} // end for each char
  2594: 					// check if the subtitution font is defined on current font
  2601: 			// remove marked characters
  2615: 		// L2. From the highest level found in the text to the lowest odd level on each line, including intermediate levels not actually present in the text, reverse any contiguous sequence of characters that are at that level or higher.
  2624: 						// L4. A character is depicted by a mirrored glyph if and only if (a) the resolved directionality of that character is R, and (b) the Bidi_Mirrored property value of that character is true.
  2647: 			// store char values for subsetting
  2653: } // END OF TCPDF_FONTS CLASS
  2656: // END OF FILE

TCPDF-main\include\tcpdf_images.php:
    3: // File name   : tcpdf_images.php
    4: // Version     : 1.0.005
    5: // Begin       : 2002-08-03
    6: // Last Update : 2014-11-15
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2002-2014 Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the License
   25: // along with TCPDF. If not, see
   26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
   28: // See LICENSE.TXT file for more information.
   29: // -------------------------------------------------------------------
   31: // Description :
   32: //   Static image methods used by the TCPDF class.
   63: // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   99: 		// default transparency color (white)
  101: 		// transparency index
  105: 			// get the colors for the transparency index
  124: 		// turn off interlaced mode
  126: 		// create temporary PNG image
  128: 		// remove image from memory
  130: 		// get PNG image data
  132: 		// tidy up by removing temporary image
  150: 		// tidy up by removing temporary image
  162: 		// check if is a local file
  172: 			// Not a JPEG file
  175: 		// bits per pixel
  177: 		// number of image channels
  183: 		// default colour space
  203: 		// get file content
  205: 		// check for embedded ICC profile
  209: 			// get ICC sequence length
  211: 			// marker sequence number
  213: 			// number of markers (total of APP2 used)
  215: 			// get sequence segment
  217: 			// move forward to next sequence
  220: 		// order and compact ICC segments
  225: 				// invalid ICC profile
  243: 			// Can't open image file
  248: 			// Not a PNG file
  268: 			// alpha channel
  273: 			// Unknown compression method
  278: 			// Unknown filter method
  283: 			// Interlacing not supported
  299: 				// read palette
  303: 				// read transparency info
  305: 				if ($ct == 0) { // DeviceGray
  307: 				} elseif ($ct == 2) { // DeviceRGB
  309: 				} else { // Indexed
  319: 				// read image data block
  323: 				// skip profile name
  328: 				// get compression method
  330: 					// Unknown filter method
  334: 				// read ICC Color Profile
  336: 				// decompress profile
  347: 			// Missing palette
  355: } // END OF TCPDF_IMAGES CLASS
  358: // END OF FILE

TCPDF-main\include\tcpdf_static.php:
     3: // File name   : tcpdf_static.php
     4: // Version     : 1.1.4
     5: // Begin       : 2002-08-03
     6: // Last Update : 2023-09-06
     7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
     8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
     9: // -------------------------------------------------------------------
    10: // Copyright (C) 2002-2023 Nicola Asuni - Tecnick.com LTD
    12: // This file is part of TCPDF software library.
    14: // TCPDF is free software: you can redistribute it and/or modify it
    15: // under the terms of the GNU Lesser General Public License as
    16: // published by the Free Software Foundation, either version 3 of the
    17: // License, or (at your option) any later version.
    19: // TCPDF is distributed in the hope that it will be useful, but
    20: // WITHOUT ANY WARRANTY; without even the implied warranty of
    21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    22: // See the GNU Lesser General Public License for more details.
    24: // You should have received a copy of the License
    25: // along with TCPDF. If not, see
    26: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
    28: // See LICENSE.TXT file for more information.
    29: // -------------------------------------------------------------------
    31: // Description :
    32: //   Static methods used by the TCPDF class.
   109: 	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   189: 			// convert string to array
   201: 						// remove bottom line
   212: 						// remove bottom line
   221: 						// remove bottom line
   232: 						// remove bottom line
   276: 		// the chr(13) substitution fixes the Bugs item #1421290.
   302: 			// on the versions after 3.0.1 the clone() method was deprecated in favour of clone keyword
   317: 			// the content length may vary if the server is using compression
   352: 			// remove date prefix if present
   383: 			// this is not used on windows systems because it is very slow for a know bug
   415: 		// padding (RFC 2898, PKCS #5: Password-Based Cryptography Specification Version 2.0)
   472: 			// try to use mcrypt function if exist
   516: 			'owner' => 2, // bit 2 -- inverted logic: cleared by default
   517: 			'print' => 4, // bit 3
   518: 			'modify' => 8, // bit 4
   519: 			'copy' => 16, // bit 5
   520: 			'annot-forms' => 32, // bit 6
   521: 			'fill-forms' => 256, // bit 9
   522: 			'extract' => 512, // bit 10
   523: 			'assemble' => 1024,// bit 11
   524: 			'print-high' => 2048 // bit 12
   526: 		$protection = 2147422012; // 32 bit: (01111111 11111111 00001111 00111100)
   530: 					// set only valid permissions
   532: 						// the logic for bit 2 is inverted (cleared by default)
   552: 		$string = ''; // string to be returned
   555: 			// padding
   633: 			// the annotation options are already defined
   636: 		$opt = array(); // value to be returned
   637: 		// alignment: Controls how the text is laid out within the text field.
   658: 		// lineWidth: Specifies the thickness of the border when stroking the perimeter of a field's rectangle.
   664: 		// borderStyle: The border style for a field.
   712: 		// buttonAlignX: Controls how space is distributed from the left of the button face with respect to the icon.
   716: 		// buttonAlignY: Controls how unused space is distributed from the bottom of the button face with respect to the icon.
   720: 		// buttonFitBounds: If true, the extent to which the icon may be scaled is set to the bounds of the button field.
   724: 		// buttonScaleHow: Controls how the icon is scaled (if necessary) to fit inside the button face.
   737: 		// buttonScaleWhen: Controls when an icon is scaled to fit inside the button face.
   758: 		// buttonPosition: Controls how the text and the icon of the button are positioned with respect to each other within the button face.
   798: 		// fillColor: Specifies the background color for a field.
   806: 		// strokeColor: Specifies the stroke color for a field that is used to stroke the rectangle of the field with a line as large as the line width.
   814: 		// rotation: The rotation of a widget in counterclockwise increments.
   818: 		// charLimit: Limits the number of characters that a user can type into a text field.
   823: 		// readonly: The read-only characteristic of a field. If a field is read-only, the user can see the field but cannot change it.
   827: 		// required: Specifies whether a field requires a value.
   831: 		// multiline: Controls how text is wrapped within the field.
   835: 		// password: Specifies whether the field should display asterisks when data is entered in the field.
   839: 		// NoToggleToOff: If set, exactly one radio button shall be selected at all times; selecting the currently selected button has no effect.
   843: 		// Radio: If set, the field is a set of radio buttons.
   847: 		// Pushbutton: If set, the field is a pushbutton that does not retain a permanent value.
   851: 		// Combo: If set, the field is a combo box; if clear, the field is a list box.
   855: 		// editable: Controls whether a combo box is editable.
   859: 		// Sort: If set, the field's option items shall be sorted alphabetically.
   863: 		// fileSelect: If true, sets the file-select flag in the Options tab of the text field (Field is Used for File Selection).
   867: 		// multipleSelection: If true, indicates that a list box allows a multiple selection of items.
   871: 		// doNotSpellCheck: If true, spell checking is not performed on this editable text field.
   875: 		// doNotScroll: If true, the text field does not scroll and the user, therefore, is limited by the rectangular region designed for the field.
   879: 		// comb: If set to true, the field background is drawn as series of boxes (one for each character in the value of the field) and each character of the content is drawn within those boxes. The number of boxes drawn is determined from the charLimit property. It applies only to text fields. The setter will also raise if any of the following field properties are also set multiline, password, and fileSelect. A side-effect of setting this property is that the doNotScroll property is also set.
   883: 		// radiosInUnison: If false, even if a group of radio buttons have the same name and export value, they behave in a mutually exclusive fashion, like HTML radio buttons.
   887: 		// richText: If true, the field allows rich text formatting.
   891: 		// commitOnSelChange: Controls whether a field value is committed after a selection change.
   896: 		// defaultValue: The default value of a field - that is, the value that the field is set to when the form is reset.
   900: 		$f = 4; // default value for annotation flags
   901: 		// readonly: The read-only characteristic of a field. If a field is read-only, the user can see the field but cannot change it.
   905: 		// display: Controls whether the field is hidden or visible on screen and in print.
   918: 		// currentValueIndices: Reads and writes single or multiple values of a list box or combo box.
   922: 		// value: The value of the field data that the user has entered.
   927: 					// exportValues: An array of strings representing the export values for the field.
   938: 		// richValue: This property specifies the text contents and formatting of a rich text field.
   942: 		// submitName: If nonempty, used during form submission instead of name. Only applicable if submitting in HTML format (that is, URL-encoded).
   946: 		// name: Fully qualified field name.
   950: 		// userName: The user name (short description string) of the field.
   954: 		// highlight: Defines how a button reacts when a user clicks it.
   979: 		// Unsupported options:
   980: 		// - calcOrderIndex: Changes the calculation order of fields in the document.
   981: 		// - delay: Delays the redrawing of a field's appearance.
   982: 		// - defaultStyle: This property defines the default style attributes for the form field.
   983: 		// - style: Allows the user to set the glyph style of a check box or radio button.
   984: 		// - textColor, textFont, textSize
  1025: 		// remove comments
  1027: 		// remove newlines and multiple spaces
  1029: 		// remove some spaces
  1031: 		// remove empty blocks
  1033: 		// replace media type parenthesis
  1036: 		// trim string
  1038: 		// find media blocks (all, braille, embossed, handheld, print, projection, screen, speech, tty, tv)
  1045: 			// remove media blocks
  1048: 		// keep 'all' and 'print' media, other media types are discarded
  1055: 		// reset css blocks array
  1058: 		// explode css data string into array
  1060: 			// remove last parethesis
  1065: 			// index 0 contains the CSS selector, index 1 contains CSS properties
  1068: 				// remove empty definitions
  1072: 		// split groups of selectors (comma-separated list of selectors)
  1082: 		// covert array to selector => properties
  1086: 			// calculate selector's specificity
  1088: 			$a = 0; // the declaration is not from is a 'style' attribute
  1089: 			$b = intval(preg_match_all('/[\#]/', $selector, $matches)); // number of ID attributes
  1090: 			$c = intval(preg_match_all('/[\[\.]/', $selector, $matches)); // number of other attributes
  1091: 			$c += intval(preg_match_all('/[\:]link|visited|hover|active|focus|target|lang|enabled|disabled|checked|indeterminate|root|nth|first|last|only|empty|contains|not/i', $selector, $matches)); // number of pseudo-classes
  1092: 			$d = intval(preg_match_all('/[\>\+\~\s]{1}[a-zA-Z0-9]+/', ' '.$selector, $matches)); // number of element names
  1093: 			$d += intval(preg_match_all('/[\:][\:]/', $selector, $matches)); // number of pseudo-elements
  1095: 			// add specificity to the beginning of the selector
  1098: 		// sort selectors alphabetically to account for specificity
  1100: 		// return array
  1118: 		// configure parameters for HTML Tidy
  1139: 		// clean up the HTML code
  1141: 		// fix the HTML
  1143: 		// get the CSS part
  1156: 		// include default css
  1158: 		// get the body part
  1161: 		// fix some self-closing tags
  1163: 		// remove some empty tag blocks
  1167: 			// set vertical space for some XHTML tags
  1170: 		// return the cleaned XHTML code + CSS
  1184: 		$valid = false; // value to be returned
  1203: 				// the last element on selector is our tag or 'any tag'
  1207: 					// check if matches class, id, attribute, pseudo-class or pseudo-element
  1209: 						case '.': { // class
  1215: 						case '#': { // ID
  1221: 						case '[': { // attribute
  1274: 						case ':': { // pseudo-class or pseudo-element
  1275: 							if ($attrib[1] == ':') { // pseudo-element
  1276: 								// pseudo-elements are not supported!
  1277: 								// (::first-line, ::first-letter, ::before, ::after)
  1278: 							} else { // pseudo-class
  1279: 								// pseudo-classes are not supported!
  1280: 								// (:root, :nth-child(n), :nth-last-child(n), :nth-of-type(n), :nth-last-of-type(n), :first-child, :last-child, :first-of-type, :last-of-type, :only-child, :only-of-type, :empty, :link, :visited, :active, :hover, :focus, :target, :lang(fr), :enabled, :disabled, :checked)
  1284: 					} // end of switch
  1290: 					// check remaining selector part
  1293: 						case ' ': { // descendant of an element
  1304: 						case '>': { // child of an element
  1308: 						case '+': { // immediately preceded by an element
  1317: 						case '~': { // preceded by an element
  1344: 		$cssarray = array(); // style to be returned
  1345: 		// get parent CSS selectors
  1350: 		// get all styles that apply
  1353: 			// get specificity
  1355: 			// remove specificity
  1357: 			// check if this selector apply to current tag
  1360: 					// add style if not already added on parent selector
  1367: 			// attach inline style (latest properties have high priority)
  1370: 		// order the css array to account for specificity
  1376: 		// sort selectors alphabetically to account for specificity
  1389: 		$tagstyle = ''; // value to be returned
  1391: 			// split single css commands
  1399: 							// remove duplicate commands (last commands have high priority)
  1407: 		// remove multiple semicolons
  1422: 			// do not represent numbers above 4000 in Roman numerals
  1505: 		// TEX patterns are available at:
  1506: 		// http://www.ctan.org/tex-archive/language/hyph-utf8/tex/generic/hyph-utf8/patterns/
  1509: 		// remove comments
  1511: 		// extract the patterns part
  1514: 		// extract each pattern
  1516: 		// create new language array of patterns
  1650: 		// identity matrix
  1774: 		// PHP 8.1 deprecates nulls for $limit and $flags
  1777: 		// the bug only happens on PHP 5.2 when using the u modifier
  1785: 		// preg_split is bugged - try alternative solution
  1823: 		// encode query params in URL to get right response form the server
  1880: 			return false; // only support http and https wrappers for security reasons
  1929: 				    // convert URL to full server path
  1953: 			// try to use CURL for URLs
  1958: 				// try to get remote file data using cURL
  2069: 		// mantissa
  2071: 		// fraction
  2131: 		// ISO 216 A Series + 2 SIS 014711 extensions
  2132: 		'A0'                     => array( 2383.937,  3370.394), // = (  841 x 1189 ) mm  = ( 33.11 x 46.81 ) in
  2133: 		'A1'                     => array( 1683.780,  2383.937), // = (  594 x 841  ) mm  = ( 23.39 x 33.11 ) in
  2134: 		'A2'                     => array( 1190.551,  1683.780), // = (  420 x 594  ) mm  = ( 16.54 x 23.39 ) in
  2135: 		'A3'                     => array(  841.890,  1190.551), // = (  297 x 420  ) mm  = ( 11.69 x 16.54 ) in
  2136: 		'A4'                     => array(  595.276,   841.890), // = (  210 x 297  ) mm  = (  8.27 x 11.69 ) in
  2137: 		'A5'                     => array(  419.528,   595.276), // = (  148 x 210  ) mm  = (  5.83 x 8.27  ) in
  2138: 		'A6'                     => array(  297.638,   419.528), // = (  105 x 148  ) mm  = (  4.13 x 5.83  ) in
  2139: 		'A7'                     => array(  209.764,   297.638), // = (   74 x 105  ) mm  = (  2.91 x 4.13  ) in
  2140: 		'A8'                     => array(  147.402,   209.764), // = (   52 x 74   ) mm  = (  2.05 x 2.91  ) in
  2141: 		'A9'                     => array(  104.882,   147.402), // = (   37 x 52   ) mm  = (  1.46 x 2.05  ) in
  2142: 		'A10'                    => array(   73.701,   104.882), // = (   26 x 37   ) mm  = (  1.02 x 1.46  ) in
  2143: 		'A11'                    => array(   51.024,    73.701), // = (   18 x 26   ) mm  = (  0.71 x 1.02  ) in
  2144: 		'A12'                    => array(   36.850,    51.024), // = (   13 x 18   ) mm  = (  0.51 x 0.71  ) in
  2145: 		// ISO 216 B Series + 2 SIS 014711 extensions
  2146: 		'B0'                     => array( 2834.646,  4008.189), // = ( 1000 x 1414 ) mm  = ( 39.37 x 55.67 ) in
  2147: 		'B1'                     => array( 2004.094,  2834.646), // = (  707 x 1000 ) mm  = ( 27.83 x 39.37 ) in
  2148: 		'B2'                     => array( 1417.323,  2004.094), // = (  500 x 707  ) mm  = ( 19.69 x 27.83 ) in
  2149: 		'B3'                     => array( 1000.630,  1417.323), // = (  353 x 500  ) mm  = ( 13.90 x 19.69 ) in
  2150: 		'B4'                     => array(  708.661,  1000.630), // = (  250 x 353  ) mm  = (  9.84 x 13.90 ) in
  2151: 		'B5'                     => array(  498.898,   708.661), // = (  176 x 250  ) mm  = (  6.93 x 9.84  ) in
  2152: 		'B6'                     => array(  354.331,   498.898), // = (  125 x 176  ) mm  = (  4.92 x 6.93  ) in
  2153: 		'B7'                     => array(  249.449,   354.331), // = (   88 x 125  ) mm  = (  3.46 x 4.92  ) in
  2154: 		'B8'                     => array(  175.748,   249.449), // = (   62 x 88   ) mm  = (  2.44 x 3.46  ) in
  2155: 		'B9'                     => array(  124.724,   175.748), // = (   44 x 62   ) mm  = (  1.73 x 2.44  ) in
  2156: 		'B10'                    => array(   87.874,   124.724), // = (   31 x 44   ) mm  = (  1.22 x 1.73  ) in
  2157: 		'B11'                    => array(   62.362,    87.874), // = (   22 x 31   ) mm  = (  0.87 x 1.22  ) in
  2158: 		'B12'                    => array(   42.520,    62.362), // = (   15 x 22   ) mm  = (  0.59 x 0.87  ) in
  2159: 		// ISO 216 C Series + 2 SIS 014711 extensions + 5 EXTENSION
  2160: 		'C0'                     => array( 2599.370,  3676.535), // = (  917 x 1297 ) mm  = ( 36.10 x 51.06 ) in
  2161: 		'C1'                     => array( 1836.850,  2599.370), // = (  648 x 917  ) mm  = ( 25.51 x 36.10 ) in
  2162: 		'C2'                     => array( 1298.268,  1836.850), // = (  458 x 648  ) mm  = ( 18.03 x 25.51 ) in
  2163: 		'C3'                     => array(  918.425,  1298.268), // = (  324 x 458  ) mm  = ( 12.76 x 18.03 ) in
  2164: 		'C4'                     => array(  649.134,   918.425), // = (  229 x 324  ) mm  = (  9.02 x 12.76 ) in
  2165: 		'C5'                     => array(  459.213,   649.134), // = (  162 x 229  ) mm  = (  6.38 x 9.02  ) in
  2166: 		'C6'                     => array(  323.150,   459.213), // = (  114 x 162  ) mm  = (  4.49 x 6.38  ) in
  2167: 		'C7'                     => array(  229.606,   323.150), // = (   81 x 114  ) mm  = (  3.19 x 4.49  ) in
  2168: 		'C8'                     => array(  161.575,   229.606), // = (   57 x 81   ) mm  = (  2.24 x 3.19  ) in
  2169: 		'C9'                     => array(  113.386,   161.575), // = (   40 x 57   ) mm  = (  1.57 x 2.24  ) in
  2170: 		'C10'                    => array(   79.370,   113.386), // = (   28 x 40   ) mm  = (  1.10 x 1.57  ) in
  2171: 		'C11'                    => array(   56.693,    79.370), // = (   20 x 28   ) mm  = (  0.79 x 1.10  ) in
  2172: 		'C12'                    => array(   39.685,    56.693), // = (   14 x 20   ) mm  = (  0.55 x 0.79  ) in
  2173: 		'C76'                    => array(  229.606,   459.213), // = (   81 x 162  ) mm  = (  3.19 x 6.38  ) in
  2174: 		'DL'                     => array(  311.811,   623.622), // = (  110 x 220  ) mm  = (  4.33 x 8.66  ) in
  2175: 		'DLE'                    => array(  323.150,   637.795), // = (  114 x 225  ) mm  = (  4.49 x 8.86  ) in
  2176: 		'DLX'                    => array(  340.158,   666.142), // = (  120 x 235  ) mm  = (  4.72 x 9.25  ) in
  2177: 		'DLP'                    => array(  280.630,   595.276), // = (   99 x 210  ) mm  = (  3.90 x 8.27  ) in (1/3 A4)
  2178: 		// SIS 014711 E Series
  2179: 		'E0'                     => array( 2491.654,  3517.795), // = (  879 x 1241 ) mm  = ( 34.61 x 48.86 ) in
  2180: 		'E1'                     => array( 1757.480,  2491.654), // = (  620 x 879  ) mm  = ( 24.41 x 34.61 ) in
  2181: 		'E2'                     => array( 1247.244,  1757.480), // = (  440 x 620  ) mm  = ( 17.32 x 24.41 ) in
  2182: 		'E3'                     => array(  878.740,  1247.244), // = (  310 x 440  ) mm  = ( 12.20 x 17.32 ) in
  2183: 		'E4'                     => array(  623.622,   878.740), // = (  220 x 310  ) mm  = (  8.66 x 12.20 ) in
  2184: 		'E5'                     => array(  439.370,   623.622), // = (  155 x 220  ) mm  = (  6.10 x 8.66  ) in
  2185: 		'E6'                     => array(  311.811,   439.370), // = (  110 x 155  ) mm  = (  4.33 x 6.10  ) in
  2186: 		'E7'                     => array(  221.102,   311.811), // = (   78 x 110  ) mm  = (  3.07 x 4.33  ) in
  2187: 		'E8'                     => array(  155.906,   221.102), // = (   55 x 78   ) mm  = (  2.17 x 3.07  ) in
  2188: 		'E9'                     => array(  110.551,   155.906), // = (   39 x 55   ) mm  = (  1.54 x 2.17  ) in
  2189: 		'E10'                    => array(   76.535,   110.551), // = (   27 x 39   ) mm  = (  1.06 x 1.54  ) in
  2190: 		'E11'                    => array(   53.858,    76.535), // = (   19 x 27   ) mm  = (  0.75 x 1.06  ) in
  2191: 		'E12'                    => array(   36.850,    53.858), // = (   13 x 19   ) mm  = (  0.51 x 0.75  ) in
  2192: 		// SIS 014711 G Series
  2193: 		'G0'                     => array( 2715.591,  3838.110), // = (  958 x 1354 ) mm  = ( 37.72 x 53.31 ) in
  2194: 		'G1'                     => array( 1919.055,  2715.591), // = (  677 x 958  ) mm  = ( 26.65 x 37.72 ) in
  2195: 		'G2'                     => array( 1357.795,  1919.055), // = (  479 x 677  ) mm  = ( 18.86 x 26.65 ) in
  2196: 		'G3'                     => array(  958.110,  1357.795), // = (  338 x 479  ) mm  = ( 13.31 x 18.86 ) in
  2197: 		'G4'                     => array(  677.480,   958.110), // = (  239 x 338  ) mm  = (  9.41 x 13.31 ) in
  2198: 		'G5'                     => array(  479.055,   677.480), // = (  169 x 239  ) mm  = (  6.65 x 9.41  ) in
  2199: 		'G6'                     => array(  337.323,   479.055), // = (  119 x 169  ) mm  = (  4.69 x 6.65  ) in
  2200: 		'G7'                     => array(  238.110,   337.323), // = (   84 x 119  ) mm  = (  3.31 x 4.69  ) in
  2201: 		'G8'                     => array(  167.244,   238.110), // = (   59 x 84   ) mm  = (  2.32 x 3.31  ) in
  2202: 		'G9'                     => array(  119.055,   167.244), // = (   42 x 59   ) mm  = (  1.65 x 2.32  ) in
  2203: 		'G10'                    => array(   82.205,   119.055), // = (   29 x 42   ) mm  = (  1.14 x 1.65  ) in
  2204: 		'G11'                    => array(   59.528,    82.205), // = (   21 x 29   ) mm  = (  0.83 x 1.14  ) in
  2205: 		'G12'                    => array(   39.685,    59.528), // = (   14 x 21   ) mm  = (  0.55 x 0.83  ) in
  2206: 		// ISO Press
  2207: 		'RA0'                    => array( 2437.795,  3458.268), // = (  860 x 1220 ) mm  = ( 33.86 x 48.03 ) in
  2208: 		'RA1'                    => array( 1729.134,  2437.795), // = (  610 x 860  ) mm  = ( 24.02 x 33.86 ) in
  2209: 		'RA2'                    => array( 1218.898,  1729.134), // = (  430 x 610  ) mm  = ( 16.93 x 24.02 ) in
  2210: 		'RA3'                    => array(  864.567,  1218.898), // = (  305 x 430  ) mm  = ( 12.01 x 16.93 ) in
  2211: 		'RA4'                    => array(  609.449,   864.567), // = (  215 x 305  ) mm  = (  8.46 x 12.01 ) in
  2212: 		'SRA0'                   => array( 2551.181,  3628.346), // = (  900 x 1280 ) mm  = ( 35.43 x 50.39 ) in
  2213: 		'SRA1'                   => array( 1814.173,  2551.181), // = (  640 x 900  ) mm  = ( 25.20 x 35.43 ) in
  2214: 		'SRA2'                   => array( 1275.591,  1814.173), // = (  450 x 640  ) mm  = ( 17.72 x 25.20 ) in
  2215: 		'SRA3'                   => array(  907.087,  1275.591), // = (  320 x 450  ) mm  = ( 12.60 x 17.72 ) in
  2216: 		'SRA4'                   => array(  637.795,   907.087), // = (  225 x 320  ) mm  = (  8.86 x 12.60 ) in
  2217: 		// German DIN 476
  2218: 		'4A0'                    => array( 4767.874,  6740.787), // = ( 1682 x 2378 ) mm  = ( 66.22 x 93.62 ) in
  2219: 		'2A0'                    => array( 3370.394,  4767.874), // = ( 1189 x 1682 ) mm  = ( 46.81 x 66.22 ) in
  2220: 		// Variations on the ISO Standard
  2221: 		'A2_EXTRA'               => array( 1261.417,  1754.646), // = (  445 x 619  ) mm  = ( 17.52 x 24.37 ) in
  2222: 		'A3+'                    => array(  932.598,  1369.134), // = (  329 x 483  ) mm  = ( 12.95 x 19.02 ) in
  2223: 		'A3_EXTRA'               => array(  912.756,  1261.417), // = (  322 x 445  ) mm  = ( 12.68 x 17.52 ) in
  2224: 		'A3_SUPER'               => array(  864.567,  1440.000), // = (  305 x 508  ) mm  = ( 12.01 x 20.00 ) in
  2225: 		'SUPER_A3'               => array(  864.567,  1380.472), // = (  305 x 487  ) mm  = ( 12.01 x 19.17 ) in
  2226: 		'A4_EXTRA'               => array(  666.142,   912.756), // = (  235 x 322  ) mm  = (  9.25 x 12.68 ) in
  2227: 		'A4_SUPER'               => array(  649.134,   912.756), // = (  229 x 322  ) mm  = (  9.02 x 12.68 ) in
  2228: 		'SUPER_A4'               => array(  643.465,  1009.134), // = (  227 x 356  ) mm  = (  8.94 x 14.02 ) in
  2229: 		'A4_LONG'                => array(  595.276,   986.457), // = (  210 x 348  ) mm  = (  8.27 x 13.70 ) in
  2230: 		'F4'                     => array(  595.276,   935.433), // = (  210 x 330  ) mm  = (  8.27 x 12.99 ) in
  2231: 		'SO_B5_EXTRA'            => array(  572.598,   782.362), // = (  202 x 276  ) mm  = (  7.95 x 10.87 ) in
  2232: 		'A5_EXTRA'               => array(  490.394,   666.142), // = (  173 x 235  ) mm  = (  6.81 x 9.25  ) in
  2233: 		// ANSI Series
  2234: 		'ANSI_E'                 => array( 2448.000,  3168.000), // = (  864 x 1118 ) mm  = ( 34.00 x 44.00 ) in
  2235: 		'ANSI_D'                 => array( 1584.000,  2448.000), // = (  559 x 864  ) mm  = ( 22.00 x 34.00 ) in
  2236: 		'ANSI_C'                 => array( 1224.000,  1584.000), // = (  432 x 559  ) mm  = ( 17.00 x 22.00 ) in
  2237: 		'ANSI_B'                 => array(  792.000,  1224.000), // = (  279 x 432  ) mm  = ( 11.00 x 17.00 ) in
  2238: 		'ANSI_A'                 => array(  612.000,   792.000), // = (  216 x 279  ) mm  = (  8.50 x 11.00 ) in
  2239: 		// Traditional 'Loose' North American Paper Sizes
  2240: 		'USLEDGER'               => array( 1224.000,   792.000), // = (  432 x 279  ) mm  = ( 17.00 x 11.00 ) in
  2241: 		'LEDGER'                 => array( 1224.000,   792.000), // = (  432 x 279  ) mm  = ( 17.00 x 11.00 ) in
  2242: 		'ORGANIZERK'             => array(  792.000,  1224.000), // = (  279 x 432  ) mm  = ( 11.00 x 17.00 ) in
  2243: 		'BIBLE'                  => array(  792.000,  1224.000), // = (  279 x 432  ) mm  = ( 11.00 x 17.00 ) in
  2244: 		'USTABLOID'              => array(  792.000,  1224.000), // = (  279 x 432  ) mm  = ( 11.00 x 17.00 ) in
  2245: 		'TABLOID'                => array(  792.000,  1224.000), // = (  279 x 432  ) mm  = ( 11.00 x 17.00 ) in
  2246: 		'ORGANIZERM'             => array(  612.000,   792.000), // = (  216 x 279  ) mm  = (  8.50 x 11.00 ) in
  2247: 		'USLETTER'               => array(  612.000,   792.000), // = (  216 x 279  ) mm  = (  8.50 x 11.00 ) in
  2248: 		'LETTER'                 => array(  612.000,   792.000), // = (  216 x 279  ) mm  = (  8.50 x 11.00 ) in
  2249: 		'USLEGAL'                => array(  612.000,  1008.000), // = (  216 x 356  ) mm  = (  8.50 x 14.00 ) in
  2250: 		'LEGAL'                  => array(  612.000,  1008.000), // = (  216 x 356  ) mm  = (  8.50 x 14.00 ) in
  2251: 		'GOVERNMENTLETTER'       => array(  576.000,   756.000), // = (  203 x 267  ) mm  = (  8.00 x 10.50 ) in
  2252: 		'GLETTER'                => array(  576.000,   756.000), // = (  203 x 267  ) mm  = (  8.00 x 10.50 ) in
  2253: 		'JUNIORLEGAL'            => array(  576.000,   360.000), // = (  203 x 127  ) mm  = (  8.00 x 5.00  ) in
  2254: 		'JLEGAL'                 => array(  576.000,   360.000), // = (  203 x 127  ) mm  = (  8.00 x 5.00  ) in
  2255: 		// Other North American Paper Sizes
  2256: 		'QUADDEMY'               => array( 2520.000,  3240.000), // = (  889 x 1143 ) mm  = ( 35.00 x 45.00 ) in
  2257: 		'SUPER_B'                => array(  936.000,  1368.000), // = (  330 x 483  ) mm  = ( 13.00 x 19.00 ) in
  2258: 		'QUARTO'                 => array(  648.000,   792.000), // = (  229 x 279  ) mm  = (  9.00 x 11.00 ) in
  2259: 		'GOVERNMENTLEGAL'        => array(  612.000,   936.000), // = (  216 x 330  ) mm  = (  8.50 x 13.00 ) in
  2260: 		'FOLIO'                  => array(  612.000,   936.000), // = (  216 x 330  ) mm  = (  8.50 x 13.00 ) in
  2261: 		'MONARCH'                => array(  522.000,   756.000), // = (  184 x 267  ) mm  = (  7.25 x 10.50 ) in
  2262: 		'EXECUTIVE'              => array(  522.000,   756.000), // = (  184 x 267  ) mm  = (  7.25 x 10.50 ) in
  2263: 		'ORGANIZERL'             => array(  396.000,   612.000), // = (  140 x 216  ) mm  = (  5.50 x 8.50  ) in
  2264: 		'STATEMENT'              => array(  396.000,   612.000), // = (  140 x 216  ) mm  = (  5.50 x 8.50  ) in
  2265: 		'MEMO'                   => array(  396.000,   612.000), // = (  140 x 216  ) mm  = (  5.50 x 8.50  ) in
  2266: 		'FOOLSCAP'               => array(  595.440,   936.000), // = (  210 x 330  ) mm  = (  8.27 x 13.00 ) in
  2267: 		'COMPACT'                => array(  306.000,   486.000), // = (  108 x 171  ) mm  = (  4.25 x 6.75  ) in
  2268: 		'ORGANIZERJ'             => array(  198.000,   360.000), // = (   70 x 127  ) mm  = (  2.75 x 5.00  ) in
  2269: 		// Canadian standard CAN 2-9.60M
  2270: 		'P1'                     => array( 1587.402,  2437.795), // = (  560 x 860  ) mm  = ( 22.05 x 33.86 ) in
  2271: 		'P2'                     => array( 1218.898,  1587.402), // = (  430 x 560  ) mm  = ( 16.93 x 22.05 ) in
  2272: 		'P3'                     => array(  793.701,  1218.898), // = (  280 x 430  ) mm  = ( 11.02 x 16.93 ) in
  2273: 		'P4'                     => array(  609.449,   793.701), // = (  215 x 280  ) mm  = (  8.46 x 11.02 ) in
  2274: 		'P5'                     => array(  396.850,   609.449), // = (  140 x 215  ) mm  = (  5.51 x 8.46  ) in
  2275: 		'P6'                     => array(  303.307,   396.850), // = (  107 x 140  ) mm  = (  4.21 x 5.51  ) in
  2276: 		// North American Architectural Sizes
  2277: 		'ARCH_E'                 => array( 2592.000,  3456.000), // = (  914 x 1219 ) mm  = ( 36.00 x 48.00 ) in
  2278: 		'ARCH_E1'                => array( 2160.000,  3024.000), // = (  762 x 1067 ) mm  = ( 30.00 x 42.00 ) in
  2279: 		'ARCH_D'                 => array( 1728.000,  2592.000), // = (  610 x 914  ) mm  = ( 24.00 x 36.00 ) in
  2280: 		'BROADSHEET'             => array( 1296.000,  1728.000), // = (  457 x 610  ) mm  = ( 18.00 x 24.00 ) in
  2281: 		'ARCH_C'                 => array( 1296.000,  1728.000), // = (  457 x 610  ) mm  = ( 18.00 x 24.00 ) in
  2282: 		'ARCH_B'                 => array(  864.000,  1296.000), // = (  305 x 457  ) mm  = ( 12.00 x 18.00 ) in
  2283: 		'ARCH_A'                 => array(  648.000,   864.000), // = (  229 x 305  ) mm  = (  9.00 x 12.00 ) in
  2284: 		// -- North American Envelope Sizes
  2285: 		// - Announcement Envelopes
  2286: 		'ANNENV_A2'              => array(  314.640,   414.000), // = (  111 x 146  ) mm  = (  4.37 x 5.75  ) in
  2287: 		'ANNENV_A6'              => array(  342.000,   468.000), // = (  121 x 165  ) mm  = (  4.75 x 6.50  ) in
  2288: 		'ANNENV_A7'              => array(  378.000,   522.000), // = (  133 x 184  ) mm  = (  5.25 x 7.25  ) in
  2289: 		'ANNENV_A8'              => array(  396.000,   584.640), // = (  140 x 206  ) mm  = (  5.50 x 8.12  ) in
  2290: 		'ANNENV_A10'             => array(  450.000,   692.640), // = (  159 x 244  ) mm  = (  6.25 x 9.62  ) in
  2291: 		'ANNENV_SLIM'            => array(  278.640,   638.640), // = (   98 x 225  ) mm  = (  3.87 x 8.87  ) in
  2292: 		// - Commercial Envelopes
  2293: 		'COMMENV_N6_1/4'         => array(  252.000,   432.000), // = (   89 x 152  ) mm  = (  3.50 x 6.00  ) in
  2294: 		'COMMENV_N6_3/4'         => array(  260.640,   468.000), // = (   92 x 165  ) mm  = (  3.62 x 6.50  ) in
  2295: 		'COMMENV_N8'             => array(  278.640,   540.000), // = (   98 x 191  ) mm  = (  3.87 x 7.50  ) in
  2296: 		'COMMENV_N9'             => array(  278.640,   638.640), // = (   98 x 225  ) mm  = (  3.87 x 8.87  ) in
  2297: 		'COMMENV_N10'            => array(  296.640,   684.000), // = (  105 x 241  ) mm  = (  4.12 x 9.50  ) in
  2298: 		'COMMENV_N11'            => array(  324.000,   746.640), // = (  114 x 263  ) mm  = (  4.50 x 10.37 ) in
  2299: 		'COMMENV_N12'            => array(  342.000,   792.000), // = (  121 x 279  ) mm  = (  4.75 x 11.00 ) in
  2300: 		'COMMENV_N14'            => array(  360.000,   828.000), // = (  127 x 292  ) mm  = (  5.00 x 11.50 ) in
  2301: 		// - Catalogue Envelopes
  2302: 		'CATENV_N1'              => array(  432.000,   648.000), // = (  152 x 229  ) mm  = (  6.00 x 9.00  ) in
  2303: 		'CATENV_N1_3/4'          => array(  468.000,   684.000), // = (  165 x 241  ) mm  = (  6.50 x 9.50  ) in
  2304: 		'CATENV_N2'              => array(  468.000,   720.000), // = (  165 x 254  ) mm  = (  6.50 x 10.00 ) in
  2305: 		'CATENV_N3'              => array(  504.000,   720.000), // = (  178 x 254  ) mm  = (  7.00 x 10.00 ) in
  2306: 		'CATENV_N6'              => array(  540.000,   756.000), // = (  191 x 267  ) mm  = (  7.50 x 10.50 ) in
  2307: 		'CATENV_N7'              => array(  576.000,   792.000), // = (  203 x 279  ) mm  = (  8.00 x 11.00 ) in
  2308: 		'CATENV_N8'              => array(  594.000,   810.000), // = (  210 x 286  ) mm  = (  8.25 x 11.25 ) in
  2309: 		'CATENV_N9_1/2'          => array(  612.000,   756.000), // = (  216 x 267  ) mm  = (  8.50 x 10.50 ) in
  2310: 		'CATENV_N9_3/4'          => array(  630.000,   810.000), // = (  222 x 286  ) mm  = (  8.75 x 11.25 ) in
  2311: 		'CATENV_N10_1/2'         => array(  648.000,   864.000), // = (  229 x 305  ) mm  = (  9.00 x 12.00 ) in
  2312: 		'CATENV_N12_1/2'         => array(  684.000,   900.000), // = (  241 x 318  ) mm  = (  9.50 x 12.50 ) in
  2313: 		'CATENV_N13_1/2'         => array(  720.000,   936.000), // = (  254 x 330  ) mm  = ( 10.00 x 13.00 ) in
  2314: 		'CATENV_N14_1/4'         => array(  810.000,   882.000), // = (  286 x 311  ) mm  = ( 11.25 x 12.25 ) in
  2315: 		'CATENV_N14_1/2'         => array(  828.000,  1044.000), // = (  292 x 368  ) mm  = ( 11.50 x 14.50 ) in
  2316: 		// Japanese (JIS P 0138-61) Standard B-Series
  2317: 		'JIS_B0'                 => array( 2919.685,  4127.244), // = ( 1030 x 1456 ) mm  = ( 40.55 x 57.32 ) in
  2318: 		'JIS_B1'                 => array( 2063.622,  2919.685), // = (  728 x 1030 ) mm  = ( 28.66 x 40.55 ) in
  2319: 		'JIS_B2'                 => array( 1459.843,  2063.622), // = (  515 x 728  ) mm  = ( 20.28 x 28.66 ) in
  2320: 		'JIS_B3'                 => array( 1031.811,  1459.843), // = (  364 x 515  ) mm  = ( 14.33 x 20.28 ) in
  2321: 		'JIS_B4'                 => array(  728.504,  1031.811), // = (  257 x 364  ) mm  = ( 10.12 x 14.33 ) in
  2322: 		'JIS_B5'                 => array(  515.906,   728.504), // = (  182 x 257  ) mm  = (  7.17 x 10.12 ) in
  2323: 		'JIS_B6'                 => array(  362.835,   515.906), // = (  128 x 182  ) mm  = (  5.04 x 7.17  ) in
  2324: 		'JIS_B7'                 => array(  257.953,   362.835), // = (   91 x 128  ) mm  = (  3.58 x 5.04  ) in
  2325: 		'JIS_B8'                 => array(  181.417,   257.953), // = (   64 x 91   ) mm  = (  2.52 x 3.58  ) in
  2326: 		'JIS_B9'                 => array(  127.559,   181.417), // = (   45 x 64   ) mm  = (  1.77 x 2.52  ) in
  2327: 		'JIS_B10'                => array(   90.709,   127.559), // = (   32 x 45   ) mm  = (  1.26 x 1.77  ) in
  2328: 		'JIS_B11'                => array(   62.362,    90.709), // = (   22 x 32   ) mm  = (  0.87 x 1.26  ) in
  2329: 		'JIS_B12'                => array(   45.354,    62.362), // = (   16 x 22   ) mm  = (  0.63 x 0.87  ) in
  2330: 		// PA Series
  2331: 		'PA0'                    => array( 2381.102,  3174.803), // = (  840 x 1120 ) mm  = ( 33.07 x 44.09 ) in
  2332: 		'PA1'                    => array( 1587.402,  2381.102), // = (  560 x 840  ) mm  = ( 22.05 x 33.07 ) in
  2333: 		'PA2'                    => array( 1190.551,  1587.402), // = (  420 x 560  ) mm  = ( 16.54 x 22.05 ) in
  2334: 		'PA3'                    => array(  793.701,  1190.551), // = (  280 x 420  ) mm  = ( 11.02 x 16.54 ) in
  2335: 		'PA4'                    => array(  595.276,   793.701), // = (  210 x 280  ) mm  = (  8.27 x 11.02 ) in
  2336: 		'PA5'                    => array(  396.850,   595.276), // = (  140 x 210  ) mm  = (  5.51 x 8.27  ) in
  2337: 		'PA6'                    => array(  297.638,   396.850), // = (  105 x 140  ) mm  = (  4.13 x 5.51  ) in
  2338: 		'PA7'                    => array(  198.425,   297.638), // = (   70 x 105  ) mm  = (  2.76 x 4.13  ) in
  2339: 		'PA8'                    => array(  147.402,   198.425), // = (   52 x 70   ) mm  = (  2.05 x 2.76  ) in
  2340: 		'PA9'                    => array(   99.213,   147.402), // = (   35 x 52   ) mm  = (  1.38 x 2.05  ) in
  2341: 		'PA10'                   => array(   73.701,    99.213), // = (   26 x 35   ) mm  = (  1.02 x 1.38  ) in
  2342: 		// Standard Photographic Print Sizes
  2343: 		'PASSPORT_PHOTO'         => array(   99.213,   127.559), // = (   35 x 45   ) mm  = (  1.38 x 1.77  ) in
  2344: 		'E'                      => array(  233.858,   340.157), // = (   82 x 120  ) mm  = (  3.25 x 4.72  ) in
  2345: 		'L'                      => array(  252.283,   360.000), // = (   89 x 127  ) mm  = (  3.50 x 5.00  ) in
  2346: 		'3R'                     => array(  252.283,   360.000), // = (   89 x 127  ) mm  = (  3.50 x 5.00  ) in
  2347: 		'KG'                     => array(  289.134,   430.866), // = (  102 x 152  ) mm  = (  4.02 x 5.98  ) in
  2348: 		'4R'                     => array(  289.134,   430.866), // = (  102 x 152  ) mm  = (  4.02 x 5.98  ) in
  2349: 		'4D'                     => array(  340.157,   430.866), // = (  120 x 152  ) mm  = (  4.72 x 5.98  ) in
  2350: 		'2L'                     => array(  360.000,   504.567), // = (  127 x 178  ) mm  = (  5.00 x 7.01  ) in
  2351: 		'5R'                     => array(  360.000,   504.567), // = (  127 x 178  ) mm  = (  5.00 x 7.01  ) in
  2352: 		'8P'                     => array(  430.866,   575.433), // = (  152 x 203  ) mm  = (  5.98 x 7.99  ) in
  2353: 		'6R'                     => array(  430.866,   575.433), // = (  152 x 203  ) mm  = (  5.98 x 7.99  ) in
  2354: 		'6P'                     => array(  575.433,   720.000), // = (  203 x 254  ) mm  = (  7.99 x 10.00 ) in
  2355: 		'8R'                     => array(  575.433,   720.000), // = (  203 x 254  ) mm  = (  7.99 x 10.00 ) in
  2356: 		'6PW'                    => array(  575.433,   864.567), // = (  203 x 305  ) mm  = (  7.99 x 12.01 ) in
  2357: 		'S8R'                    => array(  575.433,   864.567), // = (  203 x 305  ) mm  = (  7.99 x 12.01 ) in
  2358: 		'4P'                     => array(  720.000,   864.567), // = (  254 x 305  ) mm  = ( 10.00 x 12.01 ) in
  2359: 		'10R'                    => array(  720.000,   864.567), // = (  254 x 305  ) mm  = ( 10.00 x 12.01 ) in
  2360: 		'4PW'                    => array(  720.000,  1080.000), // = (  254 x 381  ) mm  = ( 10.00 x 15.00 ) in
  2361: 		'S10R'                   => array(  720.000,  1080.000), // = (  254 x 381  ) mm  = ( 10.00 x 15.00 ) in
  2362: 		'11R'                    => array(  790.866,  1009.134), // = (  279 x 356  ) mm  = ( 10.98 x 14.02 ) in
  2363: 		'S11R'                   => array(  790.866,  1224.567), // = (  279 x 432  ) mm  = ( 10.98 x 17.01 ) in
  2364: 		'12R'                    => array(  864.567,  1080.000), // = (  305 x 381  ) mm  = ( 12.01 x 15.00 ) in
  2365: 		'S12R'                   => array(  864.567,  1292.598), // = (  305 x 456  ) mm  = ( 12.01 x 17.95 ) in
  2366: 		// Common Newspaper Sizes
  2367: 		'NEWSPAPER_BROADSHEET'   => array( 2125.984,  1700.787), // = (  750 x 600  ) mm  = ( 29.53 x 23.62 ) in
  2368: 		'NEWSPAPER_BERLINER'     => array( 1332.283,   892.913), // = (  470 x 315  ) mm  = ( 18.50 x 12.40 ) in
  2369: 		'NEWSPAPER_TABLOID'      => array( 1218.898,   793.701), // = (  430 x 280  ) mm  = ( 16.93 x 11.02 ) in
  2370: 		'NEWSPAPER_COMPACT'      => array( 1218.898,   793.701), // = (  430 x 280  ) mm  = ( 16.93 x 11.02 ) in
  2371: 		// Business Cards
  2372: 		'CREDIT_CARD'            => array(  153.014,   242.646), // = (   54 x 86   ) mm  = (  2.13 x 3.37  ) in
  2373: 		'BUSINESS_CARD'          => array(  153.014,   242.646), // = (   54 x 86   ) mm  = (  2.13 x 3.37  ) in
  2374: 		'BUSINESS_CARD_ISO7810'  => array(  153.014,   242.646), // = (   54 x 86   ) mm  = (  2.13 x 3.37  ) in
  2375: 		'BUSINESS_CARD_ISO216'   => array(  147.402,   209.764), // = (   52 x 74   ) mm  = (  2.05 x 2.91  ) in
  2376: 		'BUSINESS_CARD_IT'       => array(  155.906,   240.945), // = (   55 x 85   ) mm  = (  2.17 x 3.35  ) in
  2377: 		'BUSINESS_CARD_UK'       => array(  155.906,   240.945), // = (   55 x 85   ) mm  = (  2.17 x 3.35  ) in
  2378: 		'BUSINESS_CARD_FR'       => array(  155.906,   240.945), // = (   55 x 85   ) mm  = (  2.17 x 3.35  ) in
  2379: 		'BUSINESS_CARD_DE'       => array(  155.906,   240.945), // = (   55 x 85   ) mm  = (  2.17 x 3.35  ) in
  2380: 		'BUSINESS_CARD_ES'       => array(  155.906,   240.945), // = (   55 x 85   ) mm  = (  2.17 x 3.35  ) in
  2381: 		'BUSINESS_CARD_CA'       => array(  144.567,   252.283), // = (   51 x 89   ) mm  = (  2.01 x 3.50  ) in
  2382: 		'BUSINESS_CARD_US'       => array(  144.567,   252.283), // = (   51 x 89   ) mm  = (  2.01 x 3.50  ) in
  2383: 		'BUSINESS_CARD_JP'       => array(  155.906,   257.953), // = (   55 x 91   ) mm  = (  2.17 x 3.58  ) in
  2384: 		'BUSINESS_CARD_HK'       => array(  153.071,   255.118), // = (   54 x 90   ) mm  = (  2.13 x 3.54  ) in
  2385: 		'BUSINESS_CARD_AU'       => array(  155.906,   255.118), // = (   55 x 90   ) mm  = (  2.17 x 3.54  ) in
  2386: 		'BUSINESS_CARD_DK'       => array(  155.906,   255.118), // = (   55 x 90   ) mm  = (  2.17 x 3.54  ) in
  2387: 		'BUSINESS_CARD_SE'       => array(  155.906,   255.118), // = (   55 x 90   ) mm  = (  2.17 x 3.54  ) in
  2388: 		'BUSINESS_CARD_RU'       => array(  141.732,   255.118), // = (   50 x 90   ) mm  = (  1.97 x 3.54  ) in
  2389: 		'BUSINESS_CARD_CZ'       => array(  141.732,   255.118), // = (   50 x 90   ) mm  = (  1.97 x 3.54  ) in
  2390: 		'BUSINESS_CARD_FI'       => array(  141.732,   255.118), // = (   50 x 90   ) mm  = (  1.97 x 3.54  ) in
  2391: 		'BUSINESS_CARD_HU'       => array(  141.732,   255.118), // = (   50 x 90   ) mm  = (  1.97 x 3.54  ) in
  2392: 		'BUSINESS_CARD_IL'       => array(  141.732,   255.118), // = (   50 x 90   ) mm  = (  1.97 x 3.54  ) in
  2393: 		// Billboards
  2394: 		'4SHEET'                 => array( 2880.000,  4320.000), // = ( 1016 x 1524 ) mm  = ( 40.00 x 60.00 ) in
  2395: 		'6SHEET'                 => array( 3401.575,  5102.362), // = ( 1200 x 1800 ) mm  = ( 47.24 x 70.87 ) in
  2396: 		'12SHEET'                => array( 8640.000,  4320.000), // = ( 3048 x 1524 ) mm  = (120.00 x 60.00 ) in
  2397: 		'16SHEET'                => array( 5760.000,  8640.000), // = ( 2032 x 3048 ) mm  = ( 80.00 x 120.00) in
  2398: 		'32SHEET'                => array(11520.000,  8640.000), // = ( 4064 x 3048 ) mm  = (160.00 x 120.00) in
  2399: 		'48SHEET'                => array(17280.000,  8640.000), // = ( 6096 x 3048 ) mm  = (240.00 x 120.00) in
  2400: 		'64SHEET'                => array(23040.000,  8640.000), // = ( 8128 x 3048 ) mm  = (320.00 x 120.00) in
  2401: 		'96SHEET'                => array(34560.000,  8640.000), // = (12192 x 3048 ) mm  = (480.00 x 120.00) in
  2402: 		// -- Old European Sizes
  2403: 		// - Old Imperial English Sizes
  2404: 		'EN_EMPEROR'             => array( 3456.000,  5184.000), // = ( 1219 x 1829 ) mm  = ( 48.00 x 72.00 ) in
  2405: 		'EN_ANTIQUARIAN'         => array( 2232.000,  3816.000), // = (  787 x 1346 ) mm  = ( 31.00 x 53.00 ) in
  2406: 		'EN_GRAND_EAGLE'         => array( 2070.000,  3024.000), // = (  730 x 1067 ) mm  = ( 28.75 x 42.00 ) in
  2407: 		'EN_DOUBLE_ELEPHANT'     => array( 1926.000,  2880.000), // = (  679 x 1016 ) mm  = ( 26.75 x 40.00 ) in
  2408: 		'EN_ATLAS'               => array( 1872.000,  2448.000), // = (  660 x 864  ) mm  = ( 26.00 x 34.00 ) in
  2409: 		'EN_COLOMBIER'           => array( 1692.000,  2484.000), // = (  597 x 876  ) mm  = ( 23.50 x 34.50 ) in
  2410: 		'EN_ELEPHANT'            => array( 1656.000,  2016.000), // = (  584 x 711  ) mm  = ( 23.00 x 28.00 ) in
  2411: 		'EN_DOUBLE_DEMY'         => array( 1620.000,  2556.000), // = (  572 x 902  ) mm  = ( 22.50 x 35.50 ) in
  2412: 		'EN_IMPERIAL'            => array( 1584.000,  2160.000), // = (  559 x 762  ) mm  = ( 22.00 x 30.00 ) in
  2413: 		'EN_PRINCESS'            => array( 1548.000,  2016.000), // = (  546 x 711  ) mm  = ( 21.50 x 28.00 ) in
  2414: 		'EN_CARTRIDGE'           => array( 1512.000,  1872.000), // = (  533 x 660  ) mm  = ( 21.00 x 26.00 ) in
  2415: 		'EN_DOUBLE_LARGE_POST'   => array( 1512.000,  2376.000), // = (  533 x 838  ) mm  = ( 21.00 x 33.00 ) in
  2416: 		'EN_ROYAL'               => array( 1440.000,  1800.000), // = (  508 x 635  ) mm  = ( 20.00 x 25.00 ) in
  2417: 		'EN_SHEET'               => array( 1404.000,  1692.000), // = (  495 x 597  ) mm  = ( 19.50 x 23.50 ) in
  2418: 		'EN_HALF_POST'           => array( 1404.000,  1692.000), // = (  495 x 597  ) mm  = ( 19.50 x 23.50 ) in
  2419: 		'EN_SUPER_ROYAL'         => array( 1368.000,  1944.000), // = (  483 x 686  ) mm  = ( 19.00 x 27.00 ) in
  2420: 		'EN_DOUBLE_POST'         => array( 1368.000,  2196.000), // = (  483 x 775  ) mm  = ( 19.00 x 30.50 ) in
  2421: 		'EN_MEDIUM'              => array( 1260.000,  1656.000), // = (  445 x 584  ) mm  = ( 17.50 x 23.00 ) in
  2422: 		'EN_DEMY'                => array( 1260.000,  1620.000), // = (  445 x 572  ) mm  = ( 17.50 x 22.50 ) in
  2423: 		'EN_LARGE_POST'          => array( 1188.000,  1512.000), // = (  419 x 533  ) mm  = ( 16.50 x 21.00 ) in
  2424: 		'EN_COPY_DRAUGHT'        => array( 1152.000,  1440.000), // = (  406 x 508  ) mm  = ( 16.00 x 20.00 ) in
  2425: 		'EN_POST'                => array( 1116.000,  1386.000), // = (  394 x 489  ) mm  = ( 15.50 x 19.25 ) in
  2426: 		'EN_CROWN'               => array( 1080.000,  1440.000), // = (  381 x 508  ) mm  = ( 15.00 x 20.00 ) in
  2427: 		'EN_PINCHED_POST'        => array( 1062.000,  1332.000), // = (  375 x 470  ) mm  = ( 14.75 x 18.50 ) in
  2428: 		'EN_BRIEF'               => array(  972.000,  1152.000), // = (  343 x 406  ) mm  = ( 13.50 x 16.00 ) in
  2429: 		'EN_FOOLSCAP'            => array(  972.000,  1224.000), // = (  343 x 432  ) mm  = ( 13.50 x 17.00 ) in
  2430: 		'EN_SMALL_FOOLSCAP'      => array(  954.000,  1188.000), // = (  337 x 419  ) mm  = ( 13.25 x 16.50 ) in
  2431: 		'EN_POTT'                => array(  900.000,  1080.000), // = (  318 x 381  ) mm  = ( 12.50 x 15.00 ) in
  2432: 		// - Old Imperial Belgian Sizes
  2433: 		'BE_GRAND_AIGLE'         => array( 1984.252,  2948.031), // = (  700 x 1040 ) mm  = ( 27.56 x 40.94 ) in
  2434: 		'BE_COLOMBIER'           => array( 1757.480,  2409.449), // = (  620 x 850  ) mm  = ( 24.41 x 33.46 ) in
  2435: 		'BE_DOUBLE_CARRE'        => array( 1757.480,  2607.874), // = (  620 x 920  ) mm  = ( 24.41 x 36.22 ) in
  2436: 		'BE_ELEPHANT'            => array( 1746.142,  2182.677), // = (  616 x 770  ) mm  = ( 24.25 x 30.31 ) in
  2437: 		'BE_PETIT_AIGLE'         => array( 1700.787,  2381.102), // = (  600 x 840  ) mm  = ( 23.62 x 33.07 ) in
  2438: 		'BE_GRAND_JESUS'         => array( 1559.055,  2069.291), // = (  550 x 730  ) mm  = ( 21.65 x 28.74 ) in
  2439: 		'BE_JESUS'               => array( 1530.709,  2069.291), // = (  540 x 730  ) mm  = ( 21.26 x 28.74 ) in
  2440: 		'BE_RAISIN'              => array( 1417.323,  1842.520), // = (  500 x 650  ) mm  = ( 19.69 x 25.59 ) in
  2441: 		'BE_GRAND_MEDIAN'        => array( 1303.937,  1714.961), // = (  460 x 605  ) mm  = ( 18.11 x 23.82 ) in
  2442: 		'BE_DOUBLE_POSTE'        => array( 1233.071,  1601.575), // = (  435 x 565  ) mm  = ( 17.13 x 22.24 ) in
  2443: 		'BE_COQUILLE'            => array( 1218.898,  1587.402), // = (  430 x 560  ) mm  = ( 16.93 x 22.05 ) in
  2444: 		'BE_PETIT_MEDIAN'        => array( 1176.378,  1502.362), // = (  415 x 530  ) mm  = ( 16.34 x 20.87 ) in
  2445: 		'BE_RUCHE'               => array( 1020.472,  1303.937), // = (  360 x 460  ) mm  = ( 14.17 x 18.11 ) in
  2446: 		'BE_PROPATRIA'           => array(  977.953,  1218.898), // = (  345 x 430  ) mm  = ( 13.58 x 16.93 ) in
  2447: 		'BE_LYS'                 => array(  898.583,  1125.354), // = (  317 x 397  ) mm  = ( 12.48 x 15.63 ) in
  2448: 		'BE_POT'                 => array(  870.236,  1088.504), // = (  307 x 384  ) mm  = ( 12.09 x 15.12 ) in
  2449: 		'BE_ROSETTE'             => array(  765.354,   983.622), // = (  270 x 347  ) mm  = ( 10.63 x 13.66 ) in
  2450: 		// - Old Imperial French Sizes
  2451: 		'FR_UNIVERS'             => array( 2834.646,  3685.039), // = ( 1000 x 1300 ) mm  = ( 39.37 x 51.18 ) in
  2452: 		'FR_DOUBLE_COLOMBIER'    => array( 2551.181,  3571.654), // = (  900 x 1260 ) mm  = ( 35.43 x 49.61 ) in
  2453: 		'FR_GRANDE_MONDE'        => array( 2551.181,  3571.654), // = (  900 x 1260 ) mm  = ( 35.43 x 49.61 ) in
  2454: 		'FR_DOUBLE_SOLEIL'       => array( 2267.717,  3401.575), // = (  800 x 1200 ) mm  = ( 31.50 x 47.24 ) in
  2455: 		'FR_DOUBLE_JESUS'        => array( 2154.331,  3174.803), // = (  760 x 1120 ) mm  = ( 29.92 x 44.09 ) in
  2456: 		'FR_GRAND_AIGLE'         => array( 2125.984,  3004.724), // = (  750 x 1060 ) mm  = ( 29.53 x 41.73 ) in
  2457: 		'FR_PETIT_AIGLE'         => array( 1984.252,  2664.567), // = (  700 x 940  ) mm  = ( 27.56 x 37.01 ) in
  2458: 		'FR_DOUBLE_RAISIN'       => array( 1842.520,  2834.646), // = (  650 x 1000 ) mm  = ( 25.59 x 39.37 ) in
  2459: 		'FR_JOURNAL'             => array( 1842.520,  2664.567), // = (  650 x 940  ) mm  = ( 25.59 x 37.01 ) in
  2460: 		'FR_COLOMBIER_AFFICHE'   => array( 1785.827,  2551.181), // = (  630 x 900  ) mm  = ( 24.80 x 35.43 ) in
  2461: 		'FR_DOUBLE_CAVALIER'     => array( 1757.480,  2607.874), // = (  620 x 920  ) mm  = ( 24.41 x 36.22 ) in
  2462: 		'FR_CLOCHE'              => array( 1700.787,  2267.717), // = (  600 x 800  ) mm  = ( 23.62 x 31.50 ) in
  2463: 		'FR_SOLEIL'              => array( 1700.787,  2267.717), // = (  600 x 800  ) mm  = ( 23.62 x 31.50 ) in
  2464: 		'FR_DOUBLE_CARRE'        => array( 1587.402,  2551.181), // = (  560 x 900  ) mm  = ( 22.05 x 35.43 ) in
  2465: 		'FR_DOUBLE_COQUILLE'     => array( 1587.402,  2494.488), // = (  560 x 880  ) mm  = ( 22.05 x 34.65 ) in
  2466: 		'FR_JESUS'               => array( 1587.402,  2154.331), // = (  560 x 760  ) mm  = ( 22.05 x 29.92 ) in
  2467: 		'FR_RAISIN'              => array( 1417.323,  1842.520), // = (  500 x 650  ) mm  = ( 19.69 x 25.59 ) in
  2468: 		'FR_CAVALIER'            => array( 1303.937,  1757.480), // = (  460 x 620  ) mm  = ( 18.11 x 24.41 ) in
  2469: 		'FR_DOUBLE_COURONNE'     => array( 1303.937,  2040.945), // = (  460 x 720  ) mm  = ( 18.11 x 28.35 ) in
  2470: 		'FR_CARRE'               => array( 1275.591,  1587.402), // = (  450 x 560  ) mm  = ( 17.72 x 22.05 ) in
  2471: 		'FR_COQUILLE'            => array( 1247.244,  1587.402), // = (  440 x 560  ) mm  = ( 17.32 x 22.05 ) in
  2472: 		'FR_DOUBLE_TELLIERE'     => array( 1247.244,  1927.559), // = (  440 x 680  ) mm  = ( 17.32 x 26.77 ) in
  2473: 		'FR_DOUBLE_CLOCHE'       => array( 1133.858,  1700.787), // = (  400 x 600  ) mm  = ( 15.75 x 23.62 ) in
  2474: 		'FR_DOUBLE_POT'          => array( 1133.858,  1757.480), // = (  400 x 620  ) mm  = ( 15.75 x 24.41 ) in
  2475: 		'FR_ECU'                 => array( 1133.858,  1474.016), // = (  400 x 520  ) mm  = ( 15.75 x 20.47 ) in
  2476: 		'FR_COURONNE'            => array( 1020.472,  1303.937), // = (  360 x 460  ) mm  = ( 14.17 x 18.11 ) in
  2477: 		'FR_TELLIERE'            => array(  963.780,  1247.244), // = (  340 x 440  ) mm  = ( 13.39 x 17.32 ) in
  2478: 		'FR_POT'                 => array(  878.740,  1133.858), // = (  310 x 400  ) mm  = ( 12.20 x 15.75 ) in
  2513: 			// initialize array
  2539: 			// swap X and Y coordinates
  2635: } // END OF TCPDF_STATIC CLASS
  2638: // END OF FILE

TCPDF-main\include\barcodes\datamatrix.php:
     3: // File name   : datamatrix.php
     4: // Version     : 1.0.008
     5: // Begin       : 2010-06-07
     6: // Last Update : 2014-05-06
     7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
     8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
     9: // -------------------------------------------------------------------
    10: // Copyright (C) 2010-2014  Nicola Asuni - Tecnick.com LTD
    12: // This file is part of TCPDF software library.
    14: // TCPDF is free software: you can redistribute it and/or modify it
    15: // under the terms of the GNU Lesser General Public License as
    16: // published by the Free Software Foundation, either version 3 of the
    17: // License, or (at your option) any later version.
    19: // TCPDF is distributed in the hope that it will be useful, but
    20: // WITHOUT ANY WARRANTY; without even the implied warranty of
    21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    22: // See the GNU Lesser General Public License for more details.
    24: // You should have received a copy of the GNU Lesser General Public License
    25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
    27: // See LICENSE.TXT file for more information.
    28: // -------------------------------------------------------------------
    30: // DESCRIPTION :
    32: // Class to create DataMatrix ECC 200 barcode arrays for TCPDF class.
    33: // DataMatrix (ISO/IEC 16022:2006) is a 2-dimensional bar code.
    46: // custom definitions
    54: 	// -----------------------------------------------------
    56: } // end of custom definitions
    58: // #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
   146: 		// square form ---------------------------------------------------------------------------------------
   147: 		array(0x00a,0x00a,0x008,0x008,0x00a,0x00a,0x008,0x008,0x001,0x001,0x001,0x003,0x005,0x001,0x003,0x005), // 10x10
   148: 		array(0x00c,0x00c,0x00a,0x00a,0x00c,0x00c,0x00a,0x00a,0x001,0x001,0x001,0x005,0x007,0x001,0x005,0x007), // 12x12
   149: 		array(0x00e,0x00e,0x00c,0x00c,0x00e,0x00e,0x00c,0x00c,0x001,0x001,0x001,0x008,0x00a,0x001,0x008,0x00a), // 14x14
   150: 		array(0x010,0x010,0x00e,0x00e,0x010,0x010,0x00e,0x00e,0x001,0x001,0x001,0x00c,0x00c,0x001,0x00c,0x00c), // 16x16
   151: 		array(0x012,0x012,0x010,0x010,0x012,0x012,0x010,0x010,0x001,0x001,0x001,0x012,0x00e,0x001,0x012,0x00e), // 18x18
   152: 		array(0x014,0x014,0x012,0x012,0x014,0x014,0x012,0x012,0x001,0x001,0x001,0x016,0x012,0x001,0x016,0x012), // 20x20
   153: 		array(0x016,0x016,0x014,0x014,0x016,0x016,0x014,0x014,0x001,0x001,0x001,0x01e,0x014,0x001,0x01e,0x014), // 22x22
   154: 		array(0x018,0x018,0x016,0x016,0x018,0x018,0x016,0x016,0x001,0x001,0x001,0x024,0x018,0x001,0x024,0x018), // 24x24
   155: 		array(0x01a,0x01a,0x018,0x018,0x01a,0x01a,0x018,0x018,0x001,0x001,0x001,0x02c,0x01c,0x001,0x02c,0x01c), // 26x26
   156: 		array(0x020,0x020,0x01c,0x01c,0x010,0x010,0x00e,0x00e,0x002,0x002,0x004,0x03e,0x024,0x001,0x03e,0x024), // 32x32
   157: 		array(0x024,0x024,0x020,0x020,0x012,0x012,0x010,0x010,0x002,0x002,0x004,0x056,0x02a,0x001,0x056,0x02a), // 36x36
   158: 		array(0x028,0x028,0x024,0x024,0x014,0x014,0x012,0x012,0x002,0x002,0x004,0x072,0x030,0x001,0x072,0x030), // 40x40
   159: 		array(0x02c,0x02c,0x028,0x028,0x016,0x016,0x014,0x014,0x002,0x002,0x004,0x090,0x038,0x001,0x090,0x038), // 44x44
   160: 		array(0x030,0x030,0x02c,0x02c,0x018,0x018,0x016,0x016,0x002,0x002,0x004,0x0ae,0x044,0x001,0x0ae,0x044), // 48x48
   161: 		array(0x034,0x034,0x030,0x030,0x01a,0x01a,0x018,0x018,0x002,0x002,0x004,0x0cc,0x054,0x002,0x066,0x02a), // 52x52
   162: 		array(0x040,0x040,0x038,0x038,0x010,0x010,0x00e,0x00e,0x004,0x004,0x010,0x118,0x070,0x002,0x08c,0x038), // 64x64
   163: 		array(0x048,0x048,0x040,0x040,0x012,0x012,0x010,0x010,0x004,0x004,0x010,0x170,0x090,0x004,0x05c,0x024), // 72x72
   164: 		array(0x050,0x050,0x048,0x048,0x014,0x014,0x012,0x012,0x004,0x004,0x010,0x1c8,0x0c0,0x004,0x072,0x030), // 80x80
   165: 		array(0x058,0x058,0x050,0x050,0x016,0x016,0x014,0x014,0x004,0x004,0x010,0x240,0x0e0,0x004,0x090,0x038), // 88x88
   166: 		array(0x060,0x060,0x058,0x058,0x018,0x018,0x016,0x016,0x004,0x004,0x010,0x2b8,0x110,0x004,0x0ae,0x044), // 96x96
   167: 		array(0x068,0x068,0x060,0x060,0x01a,0x01a,0x018,0x018,0x004,0x004,0x010,0x330,0x150,0x006,0x088,0x038), // 104x104
   168: 		array(0x078,0x078,0x06c,0x06c,0x014,0x014,0x012,0x012,0x006,0x006,0x024,0x41a,0x198,0x006,0x0af,0x044), // 120x120
   169: 		array(0x084,0x084,0x078,0x078,0x016,0x016,0x014,0x014,0x006,0x006,0x024,0x518,0x1f0,0x008,0x0a3,0x03e), // 132x132
   170: 		array(0x090,0x090,0x084,0x084,0x018,0x018,0x016,0x016,0x006,0x006,0x024,0x616,0x26c,0x00a,0x09c,0x03e), // 144x144
   171: 		// rectangular form (currently unused) ---------------------------------------------------------------------------
   172: 		array(0x008,0x012,0x006,0x010,0x008,0x012,0x006,0x010,0x001,0x001,0x001,0x005,0x007,0x001,0x005,0x007), // 8x18
   173: 		array(0x008,0x020,0x006,0x01c,0x008,0x010,0x006,0x00e,0x001,0x002,0x002,0x00a,0x00b,0x001,0x00a,0x00b), // 8x32
   174: 		array(0x00c,0x01a,0x00a,0x018,0x00c,0x01a,0x00a,0x018,0x001,0x001,0x001,0x010,0x00e,0x001,0x010,0x00e), // 12x26
   175: 		array(0x00c,0x024,0x00a,0x020,0x00c,0x012,0x00a,0x010,0x001,0x002,0x002,0x00c,0x012,0x001,0x00c,0x012), // 12x36
   176: 		array(0x010,0x024,0x00e,0x020,0x010,0x012,0x00e,0x010,0x001,0x002,0x002,0x020,0x018,0x001,0x020,0x018), // 16x36
   177: 		array(0x010,0x030,0x00e,0x02c,0x010,0x018,0x00e,0x016,0x001,0x002,0x002,0x031,0x01c,0x001,0x031,0x01c)  // 16x48
   191: 		'C40' => array( // Basic set for C40 ----------------------------------------------------------------------------
   196: 		'TXT' => array( // Basic set for TEXT ---------------------------------------------------------------------------
   201: 		'SH1' => array( // Shift 1 set ----------------------------------------------------------------------------------
   206: 		'SH2' => array( // Shift 2 set ----------------------------------------------------------------------------------
   210: 		'S3C' => array( // Shift 3 set for C40 --------------------------------------------------------------------------
   215: 		'S3T' => array( // Shift 3 set for TEXT -------------------------------------------------------------------------
   220: 		'X12' => array( // Set for X12 ----------------------------------------------------------------------------------
   227: // -----------------------------------------------------------------------------
   240: 		// get data codewords
   242: 		// number of data codewords
   244: 		// check size
   248: 		// get minimum required matrix size.
   255: 			// too much data
   258: 			// add padding
   261: 					// switch to ASCII encoding
   265: 					// switch to ASCII encoding
   271: 				// add first pad
   274: 				// add remaining pads
   280: 		// add error correction codewords
   282: 		// initialize empty arrays
   284: 		// get placement map
   286: 		// fill the grid with data
   289: 		// region data row max index
   291: 		// region data column max index
   293: 		// for each vertical region
   295: 			// for each row on region
   297: 				// get row
   299: 				// for each horizontal region
   301: 					// for each column on region
   303: 						// get column
   305: 						// braw bits by case
   307: 							// top finder pattern
   314: 							// bottom finder pattern
   317: 							// left finder pattern
   320: 							// right finder pattern
   326: 						} else { // data bit
   330: 								// codeword ID
   332: 								// codeword BIT mask
   385: 		// generate the log ($log) and antilog ($alog) tables
   396: 		// generate the polynomial coefficients (c)
   407: 		// total number of data codewords
   409: 		// total number of error codewords
   411: 		// for each block
   413: 			// create interleaved data block
   418: 			// initialize error codewords
   420: 			// calculate error correction codewords for this block
   427: 			// add error codewords at the end of data codewords
   434: 		// reorder codewords
   479: 			case ENC_ASCII: { // ASCII character 0 to 127
   483: 			case ENC_C40: { // Upper-case alphanumeric
   487: 			case ENC_TXT: { // Lower-case alphanumeric
   491: 			case ENC_X12: { // ANSI X12
   495: 			case ENC_EDF: { // ASCII character 32 to 94
   499: 			case ENC_BASE256: { // Function character (FNC1, Structured Append, Reader Program, or Code Page)
   503: 			case ENC_ASCII_EXT: { // ASCII character 128 to 255
   507: 			case ENC_ASCII_NUM: { // ASCII digits
   528: 		$charscount = 0; // count processed chars
   529: 		// STEP J
   537: 			// STEP K
   556: 			// get char
   559: 			// STEP L
   569: 			// STEP M
   577: 			// STEP N
   585: 			// STEP O
   593: 			// STEP P
   601: 			// STEP Q
   607: 			// STEP R
   644: 		} // end of while
   655: 			case ENC_ASCII: { // ASCII character 0 to 127
   662: 			case ENC_C40: { // Upper-case alphanumeric
   666: 			case ENC_TXT: { // Lower-case alphanumeric
   670: 			case ENC_X12: { // ANSI X12
   674: 			case ENC_EDF: { // ASCII character 32 to 94
   678: 			case ENC_BASE256: { // Function character (FNC1, Structured Append, Reader Program, or Code Page)
   708: 		// STEP A. Start in ASCII encodation.
   709: 		$enc = ENC_ASCII; // current encoding mode
   710: 		$pos = 0; // current position
   711: 		$cw = array(); // array of codewords to be returned
   712: 		$cw_num = 0; // number of data codewords
   713: 		$data_length = strlen($data); // number of chars
   715: 			// set last used encoding
   718: 				case ENC_ASCII: { // STEP B. While in ASCII encodation
   720: 						// 1. If the next data sequence is at least 2 consecutive digits, encode the next two digits as a double digit in ASCII mode.
   725: 						// 2. If the look-ahead test (starting at step J) indicates another mode, switch to that mode.
   728: 							// switch to new encoding
   733: 							// get new byte
   737: 								// 3. If the next data character is extended ASCII (greater than 127) encode it in ASCII mode first using the Upper Shift (value 235) character.
   742: 								// 4. Otherwise process the next data character in ASCII encodation.
   750: 				case ENC_C40 :   // Upper-case alphanumeric
   751: 				case ENC_TXT :   // Lower-case alphanumeric
   752: 				case ENC_X12 : { // ANSI X12
   756: 					// get charset ID
   758: 					// get basic charset for current encoding
   761: 						// 2. process the next character in C40 encodation.
   764: 						// check for extended character
   770: 							$temp_cw[] = 1; // shift 2
   771: 							$temp_cw[] = 30; // upper shift
   779: 								$temp_cw[] = 0; // shift 1
   782: 								$temp_cw[] = 1; // shift 2
   785: 								$temp_cw[] = 2; // shift 3
   788: 								$temp_cw[] = 2; // shift 3
   806: 							// 1. If the C40 encoding is at the point of starting a new double symbol character and if the look-ahead test (starting at step J) indicates another mode, switch to that mode.
   809: 								// switch to new encoding
   812: 									// set unlatch character
   824: 					// process last data (if any)
   826: 						// get remaining number of data symbols
   829: 							// d. If one symbol character remains and one C40 value (data character) remains to be encoded
   838: 							// c. If two symbol characters remain and only one C40 value (data character) remains to be encoded
   848: 							// b. If two symbol characters remain and two C40 values remain to be encoded
   860: 							// switch to ASCII encoding
   872: 				case ENC_EDF: { // F. While in EDIFACT (EDF) encodation
   873: 					// initialize temporary array with 0 length
   879: 						// 2. process the next character in EDIFACT encodation.
   894: 								// set unlatch character
   897: 								// fill empty characters
   904: 							// encodes four data characters in three codewords
   924: 								break; // exit from EDIFACT mode
   930: 				case ENC_BASE256: { // G. While in Base 256 (B256) encodation
   931: 					// initialize temporary array with 0 length
   937: 							// 1. If the look-ahead test (starting at step J) indicates another mode, switch to that mode.
   939: 							break; // exit from B256 mode
   941: 							// 2. Otherwise, process the next character in Base 256 encodation.
   948: 					// set field length
   958: 						// add B256 field
   965: 			} // end of switch enc
   966: 		} // end of while
  1117: 		// initialize array with zeros
  1119: 		// set starting values
  1124: 			// repeatedly first check for one of the special corner cases, then
  1141: 			// sweep upward diagonally, inserting successive characters,
  1152: 			// & then sweep downward diagonally, inserting successive characters,...
  1163: 			// ... until the entire array is scanned
  1165: 		// lastly, if the lower righthand corner is untouched, fill in fixed pattern
  1173: } // end DataMatrix class
  1175: // END OF FILE

TCPDF-main\include\barcodes\pdf417.php:
    3: // File name   : pdf417.php
    4: // Version     : 1.0.005
    5: // Begin       : 2010-06-03
    6: // Last Update : 2014-04-25
    7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
    9: // -------------------------------------------------------------------
   10: // Copyright (C) 2010-2013  Nicola Asuni - Tecnick.com LTD
   12: // This file is part of TCPDF software library.
   14: // TCPDF is free software: you can redistribute it and/or modify it
   15: // under the terms of the GNU Lesser General Public License as
   16: // published by the Free Software Foundation, either version 3 of the
   17: // License, or (at your option) any later version.
   19: // TCPDF is distributed in the hope that it will be useful, but
   20: // WITHOUT ANY WARRANTY; without even the implied warranty of
   21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   22: // See the GNU Lesser General Public License for more details.
   24: // You should have received a copy of the GNU Lesser General Public License
   25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
   27: // See LICENSE.TXT file for more information.
   28: // -------------------------------------------------------------------
   30: // DESCRIPTION :
   32: // Class to create PDF417 barcode arrays for TCPDF class.
   33: // PDF417 (ISO/IEC 15438:2006) is a 2-dimensional stacked bar code created by Symbol Technologies in 1991.
   34: // It is one of the most popular 2D codes because of its ability to be read with slightly modified handheld laser or linear CCD scanners.
   35: // TECHNICAL DATA / FEATURES OF PDF417:
   56: // definitions
   64: 	// -----------------------------------------------------
   81: } // end of definitions
   83: // #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
  118: 		array(0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x20,0xFD,0xFE,0xFF), // Alpha
  119: 		array(0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x20,0xFD,0xFE,0xFF), // Lower
  120: 		array(0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x26,0x0d,0x09,0x2c,0x3a,0x23,0x2d,0x2e,0x24,0x2f,0x2b,0x25,0x2a,0x3d,0x5e,0xFB,0x20,0xFD,0xFE,0xFF), // Mixed
  121: 		array(0x3b,0x3c,0x3e,0x40,0x5b,0x5c,0x5d,0x5f,0x60,0x7e,0x21,0x0d,0x09,0x2c,0x3a,0x0a,0x2d,0x2e,0x24,0x2f,0x22,0x7c,0x2a,0x28,0x29,0x3f,0x7b,0x7d,0x27,0xFF) // Puntuaction
  157: 		array( // cluster 0 -----------------------------------------------------------------------
  158: 			0x1d5c0,0x1eaf0,0x1f57c,0x1d4e0,0x1ea78,0x1f53e,0x1a8c0,0x1d470,0x1a860,0x15040, //  10
  159: 			0x1a830,0x15020,0x1adc0,0x1d6f0,0x1eb7c,0x1ace0,0x1d678,0x1eb3e,0x158c0,0x1ac70, //  20
  160: 			0x15860,0x15dc0,0x1aef0,0x1d77c,0x15ce0,0x1ae78,0x1d73e,0x15c70,0x1ae3c,0x15ef0, //  30
  161: 			0x1af7c,0x15e78,0x1af3e,0x15f7c,0x1f5fa,0x1d2e0,0x1e978,0x1f4be,0x1a4c0,0x1d270, //  40
  162: 			0x1e93c,0x1a460,0x1d238,0x14840,0x1a430,0x1d21c,0x14820,0x1a418,0x14810,0x1a6e0, //  50
  163: 			0x1d378,0x1e9be,0x14cc0,0x1a670,0x1d33c,0x14c60,0x1a638,0x1d31e,0x14c30,0x1a61c, //  60
  164: 			0x14ee0,0x1a778,0x1d3be,0x14e70,0x1a73c,0x14e38,0x1a71e,0x14f78,0x1a7be,0x14f3c, //  70
  165: 			0x14f1e,0x1a2c0,0x1d170,0x1e8bc,0x1a260,0x1d138,0x1e89e,0x14440,0x1a230,0x1d11c, //  80
  166: 			0x14420,0x1a218,0x14410,0x14408,0x146c0,0x1a370,0x1d1bc,0x14660,0x1a338,0x1d19e, //  90
  167: 			0x14630,0x1a31c,0x14618,0x1460c,0x14770,0x1a3bc,0x14738,0x1a39e,0x1471c,0x147bc, // 100
  168: 			0x1a160,0x1d0b8,0x1e85e,0x14240,0x1a130,0x1d09c,0x14220,0x1a118,0x1d08e,0x14210, // 110
  169: 			0x1a10c,0x14208,0x1a106,0x14360,0x1a1b8,0x1d0de,0x14330,0x1a19c,0x14318,0x1a18e, // 120
  170: 			0x1430c,0x14306,0x1a1de,0x1438e,0x14140,0x1a0b0,0x1d05c,0x14120,0x1a098,0x1d04e, // 130
  171: 			0x14110,0x1a08c,0x14108,0x1a086,0x14104,0x141b0,0x14198,0x1418c,0x140a0,0x1d02e, // 140
  172: 			0x1a04c,0x1a046,0x14082,0x1cae0,0x1e578,0x1f2be,0x194c0,0x1ca70,0x1e53c,0x19460, // 150
  173: 			0x1ca38,0x1e51e,0x12840,0x19430,0x12820,0x196e0,0x1cb78,0x1e5be,0x12cc0,0x19670, // 160
  174: 			0x1cb3c,0x12c60,0x19638,0x12c30,0x12c18,0x12ee0,0x19778,0x1cbbe,0x12e70,0x1973c, // 170
  175: 			0x12e38,0x12e1c,0x12f78,0x197be,0x12f3c,0x12fbe,0x1dac0,0x1ed70,0x1f6bc,0x1da60, // 180
  176: 			0x1ed38,0x1f69e,0x1b440,0x1da30,0x1ed1c,0x1b420,0x1da18,0x1ed0e,0x1b410,0x1da0c, // 190
  177: 			0x192c0,0x1c970,0x1e4bc,0x1b6c0,0x19260,0x1c938,0x1e49e,0x1b660,0x1db38,0x1ed9e, // 200
  178: 			0x16c40,0x12420,0x19218,0x1c90e,0x16c20,0x1b618,0x16c10,0x126c0,0x19370,0x1c9bc, // 210
  179: 			0x16ec0,0x12660,0x19338,0x1c99e,0x16e60,0x1b738,0x1db9e,0x16e30,0x12618,0x16e18, // 220
  180: 			0x12770,0x193bc,0x16f70,0x12738,0x1939e,0x16f38,0x1b79e,0x16f1c,0x127bc,0x16fbc, // 230
  181: 			0x1279e,0x16f9e,0x1d960,0x1ecb8,0x1f65e,0x1b240,0x1d930,0x1ec9c,0x1b220,0x1d918, // 240
  182: 			0x1ec8e,0x1b210,0x1d90c,0x1b208,0x1b204,0x19160,0x1c8b8,0x1e45e,0x1b360,0x19130, // 250
  183: 			0x1c89c,0x16640,0x12220,0x1d99c,0x1c88e,0x16620,0x12210,0x1910c,0x16610,0x1b30c, // 260
  184: 			0x19106,0x12204,0x12360,0x191b8,0x1c8de,0x16760,0x12330,0x1919c,0x16730,0x1b39c, // 270
  185: 			0x1918e,0x16718,0x1230c,0x12306,0x123b8,0x191de,0x167b8,0x1239c,0x1679c,0x1238e, // 280
  186: 			0x1678e,0x167de,0x1b140,0x1d8b0,0x1ec5c,0x1b120,0x1d898,0x1ec4e,0x1b110,0x1d88c, // 290
  187: 			0x1b108,0x1d886,0x1b104,0x1b102,0x12140,0x190b0,0x1c85c,0x16340,0x12120,0x19098, // 300
  188: 			0x1c84e,0x16320,0x1b198,0x1d8ce,0x16310,0x12108,0x19086,0x16308,0x1b186,0x16304, // 310
  189: 			0x121b0,0x190dc,0x163b0,0x12198,0x190ce,0x16398,0x1b1ce,0x1638c,0x12186,0x16386, // 320
  190: 			0x163dc,0x163ce,0x1b0a0,0x1d858,0x1ec2e,0x1b090,0x1d84c,0x1b088,0x1d846,0x1b084, // 330
  191: 			0x1b082,0x120a0,0x19058,0x1c82e,0x161a0,0x12090,0x1904c,0x16190,0x1b0cc,0x19046, // 340
  192: 			0x16188,0x12084,0x16184,0x12082,0x120d8,0x161d8,0x161cc,0x161c6,0x1d82c,0x1d826, // 350
  193: 			0x1b042,0x1902c,0x12048,0x160c8,0x160c4,0x160c2,0x18ac0,0x1c570,0x1e2bc,0x18a60, // 360
  194: 			0x1c538,0x11440,0x18a30,0x1c51c,0x11420,0x18a18,0x11410,0x11408,0x116c0,0x18b70, // 370
  195: 			0x1c5bc,0x11660,0x18b38,0x1c59e,0x11630,0x18b1c,0x11618,0x1160c,0x11770,0x18bbc, // 380
  196: 			0x11738,0x18b9e,0x1171c,0x117bc,0x1179e,0x1cd60,0x1e6b8,0x1f35e,0x19a40,0x1cd30, // 390
  197: 			0x1e69c,0x19a20,0x1cd18,0x1e68e,0x19a10,0x1cd0c,0x19a08,0x1cd06,0x18960,0x1c4b8, // 400
  198: 			0x1e25e,0x19b60,0x18930,0x1c49c,0x13640,0x11220,0x1cd9c,0x1c48e,0x13620,0x19b18, // 410
  199: 			0x1890c,0x13610,0x11208,0x13608,0x11360,0x189b8,0x1c4de,0x13760,0x11330,0x1cdde, // 420
  200: 			0x13730,0x19b9c,0x1898e,0x13718,0x1130c,0x1370c,0x113b8,0x189de,0x137b8,0x1139c, // 430
  201: 			0x1379c,0x1138e,0x113de,0x137de,0x1dd40,0x1eeb0,0x1f75c,0x1dd20,0x1ee98,0x1f74e, // 440
  202: 			0x1dd10,0x1ee8c,0x1dd08,0x1ee86,0x1dd04,0x19940,0x1ccb0,0x1e65c,0x1bb40,0x19920, // 450
  203: 			0x1eedc,0x1e64e,0x1bb20,0x1dd98,0x1eece,0x1bb10,0x19908,0x1cc86,0x1bb08,0x1dd86, // 460
  204: 			0x19902,0x11140,0x188b0,0x1c45c,0x13340,0x11120,0x18898,0x1c44e,0x17740,0x13320, // 470
  205: 			0x19998,0x1ccce,0x17720,0x1bb98,0x1ddce,0x18886,0x17710,0x13308,0x19986,0x17708, // 480
  206: 			0x11102,0x111b0,0x188dc,0x133b0,0x11198,0x188ce,0x177b0,0x13398,0x199ce,0x17798, // 490
  207: 			0x1bbce,0x11186,0x13386,0x111dc,0x133dc,0x111ce,0x177dc,0x133ce,0x1dca0,0x1ee58, // 500
  208: 			0x1f72e,0x1dc90,0x1ee4c,0x1dc88,0x1ee46,0x1dc84,0x1dc82,0x198a0,0x1cc58,0x1e62e, // 510
  209: 			0x1b9a0,0x19890,0x1ee6e,0x1b990,0x1dccc,0x1cc46,0x1b988,0x19884,0x1b984,0x19882, // 520
  210: 			0x1b982,0x110a0,0x18858,0x1c42e,0x131a0,0x11090,0x1884c,0x173a0,0x13190,0x198cc, // 530
  211: 			0x18846,0x17390,0x1b9cc,0x11084,0x17388,0x13184,0x11082,0x13182,0x110d8,0x1886e, // 540
  212: 			0x131d8,0x110cc,0x173d8,0x131cc,0x110c6,0x173cc,0x131c6,0x110ee,0x173ee,0x1dc50, // 550
  213: 			0x1ee2c,0x1dc48,0x1ee26,0x1dc44,0x1dc42,0x19850,0x1cc2c,0x1b8d0,0x19848,0x1cc26, // 560
  214: 			0x1b8c8,0x1dc66,0x1b8c4,0x19842,0x1b8c2,0x11050,0x1882c,0x130d0,0x11048,0x18826, // 570
  215: 			0x171d0,0x130c8,0x19866,0x171c8,0x1b8e6,0x11042,0x171c4,0x130c2,0x171c2,0x130ec, // 580
  216: 			0x171ec,0x171e6,0x1ee16,0x1dc22,0x1cc16,0x19824,0x19822,0x11028,0x13068,0x170e8, // 590
  217: 			0x11022,0x13062,0x18560,0x10a40,0x18530,0x10a20,0x18518,0x1c28e,0x10a10,0x1850c, // 600
  218: 			0x10a08,0x18506,0x10b60,0x185b8,0x1c2de,0x10b30,0x1859c,0x10b18,0x1858e,0x10b0c, // 610
  219: 			0x10b06,0x10bb8,0x185de,0x10b9c,0x10b8e,0x10bde,0x18d40,0x1c6b0,0x1e35c,0x18d20, // 620
  220: 			0x1c698,0x18d10,0x1c68c,0x18d08,0x1c686,0x18d04,0x10940,0x184b0,0x1c25c,0x11b40, // 630
  221: 			0x10920,0x1c6dc,0x1c24e,0x11b20,0x18d98,0x1c6ce,0x11b10,0x10908,0x18486,0x11b08, // 640
  222: 			0x18d86,0x10902,0x109b0,0x184dc,0x11bb0,0x10998,0x184ce,0x11b98,0x18dce,0x11b8c, // 650
  223: 			0x10986,0x109dc,0x11bdc,0x109ce,0x11bce,0x1cea0,0x1e758,0x1f3ae,0x1ce90,0x1e74c, // 660
  224: 			0x1ce88,0x1e746,0x1ce84,0x1ce82,0x18ca0,0x1c658,0x19da0,0x18c90,0x1c64c,0x19d90, // 670
  225: 			0x1cecc,0x1c646,0x19d88,0x18c84,0x19d84,0x18c82,0x19d82,0x108a0,0x18458,0x119a0, // 680
  226: 			0x10890,0x1c66e,0x13ba0,0x11990,0x18ccc,0x18446,0x13b90,0x19dcc,0x10884,0x13b88, // 690
  227: 			0x11984,0x10882,0x11982,0x108d8,0x1846e,0x119d8,0x108cc,0x13bd8,0x119cc,0x108c6, // 700
  228: 			0x13bcc,0x119c6,0x108ee,0x119ee,0x13bee,0x1ef50,0x1f7ac,0x1ef48,0x1f7a6,0x1ef44, // 710
  229: 			0x1ef42,0x1ce50,0x1e72c,0x1ded0,0x1ef6c,0x1e726,0x1dec8,0x1ef66,0x1dec4,0x1ce42, // 720
  230: 			0x1dec2,0x18c50,0x1c62c,0x19cd0,0x18c48,0x1c626,0x1bdd0,0x19cc8,0x1ce66,0x1bdc8, // 730
  231: 			0x1dee6,0x18c42,0x1bdc4,0x19cc2,0x1bdc2,0x10850,0x1842c,0x118d0,0x10848,0x18426, // 740
  232: 			0x139d0,0x118c8,0x18c66,0x17bd0,0x139c8,0x19ce6,0x10842,0x17bc8,0x1bde6,0x118c2, // 750
  233: 			0x17bc4,0x1086c,0x118ec,0x10866,0x139ec,0x118e6,0x17bec,0x139e6,0x17be6,0x1ef28, // 760
  234: 			0x1f796,0x1ef24,0x1ef22,0x1ce28,0x1e716,0x1de68,0x1ef36,0x1de64,0x1ce22,0x1de62, // 770
  235: 			0x18c28,0x1c616,0x19c68,0x18c24,0x1bce8,0x19c64,0x18c22,0x1bce4,0x19c62,0x1bce2, // 780
  236: 			0x10828,0x18416,0x11868,0x18c36,0x138e8,0x11864,0x10822,0x179e8,0x138e4,0x11862, // 790
  237: 			0x179e4,0x138e2,0x179e2,0x11876,0x179f6,0x1ef12,0x1de34,0x1de32,0x19c34,0x1bc74, // 800
  238: 			0x1bc72,0x11834,0x13874,0x178f4,0x178f2,0x10540,0x10520,0x18298,0x10510,0x10508, // 810
  239: 			0x10504,0x105b0,0x10598,0x1058c,0x10586,0x105dc,0x105ce,0x186a0,0x18690,0x1c34c, // 820
  240: 			0x18688,0x1c346,0x18684,0x18682,0x104a0,0x18258,0x10da0,0x186d8,0x1824c,0x10d90, // 830
  241: 			0x186cc,0x10d88,0x186c6,0x10d84,0x10482,0x10d82,0x104d8,0x1826e,0x10dd8,0x186ee, // 840
  242: 			0x10dcc,0x104c6,0x10dc6,0x104ee,0x10dee,0x1c750,0x1c748,0x1c744,0x1c742,0x18650, // 850
  243: 			0x18ed0,0x1c76c,0x1c326,0x18ec8,0x1c766,0x18ec4,0x18642,0x18ec2,0x10450,0x10cd0, // 860
  244: 			0x10448,0x18226,0x11dd0,0x10cc8,0x10444,0x11dc8,0x10cc4,0x10442,0x11dc4,0x10cc2, // 870
  245: 			0x1046c,0x10cec,0x10466,0x11dec,0x10ce6,0x11de6,0x1e7a8,0x1e7a4,0x1e7a2,0x1c728, // 880
  246: 			0x1cf68,0x1e7b6,0x1cf64,0x1c722,0x1cf62,0x18628,0x1c316,0x18e68,0x1c736,0x19ee8, // 890
  247: 			0x18e64,0x18622,0x19ee4,0x18e62,0x19ee2,0x10428,0x18216,0x10c68,0x18636,0x11ce8, // 900
  248: 			0x10c64,0x10422,0x13de8,0x11ce4,0x10c62,0x13de4,0x11ce2,0x10436,0x10c76,0x11cf6, // 910
  249: 			0x13df6,0x1f7d4,0x1f7d2,0x1e794,0x1efb4,0x1e792,0x1efb2,0x1c714,0x1cf34,0x1c712, // 920
  250: 			0x1df74,0x1cf32,0x1df72,0x18614,0x18e34,0x18612,0x19e74,0x18e32,0x1bef4),        // 929
  251: 		array( // cluster 3 -----------------------------------------------------------------------
  252: 			0x1f560,0x1fab8,0x1ea40,0x1f530,0x1fa9c,0x1ea20,0x1f518,0x1fa8e,0x1ea10,0x1f50c, //  10
  253: 			0x1ea08,0x1f506,0x1ea04,0x1eb60,0x1f5b8,0x1fade,0x1d640,0x1eb30,0x1f59c,0x1d620, //  20
  254: 			0x1eb18,0x1f58e,0x1d610,0x1eb0c,0x1d608,0x1eb06,0x1d604,0x1d760,0x1ebb8,0x1f5de, //  30
  255: 			0x1ae40,0x1d730,0x1eb9c,0x1ae20,0x1d718,0x1eb8e,0x1ae10,0x1d70c,0x1ae08,0x1d706, //  40
  256: 			0x1ae04,0x1af60,0x1d7b8,0x1ebde,0x15e40,0x1af30,0x1d79c,0x15e20,0x1af18,0x1d78e, //  50
  257: 			0x15e10,0x1af0c,0x15e08,0x1af06,0x15f60,0x1afb8,0x1d7de,0x15f30,0x1af9c,0x15f18, //  60
  258: 			0x1af8e,0x15f0c,0x15fb8,0x1afde,0x15f9c,0x15f8e,0x1e940,0x1f4b0,0x1fa5c,0x1e920, //  70
  259: 			0x1f498,0x1fa4e,0x1e910,0x1f48c,0x1e908,0x1f486,0x1e904,0x1e902,0x1d340,0x1e9b0, //  80
  260: 			0x1f4dc,0x1d320,0x1e998,0x1f4ce,0x1d310,0x1e98c,0x1d308,0x1e986,0x1d304,0x1d302, //  90
  261: 			0x1a740,0x1d3b0,0x1e9dc,0x1a720,0x1d398,0x1e9ce,0x1a710,0x1d38c,0x1a708,0x1d386, // 100
  262: 			0x1a704,0x1a702,0x14f40,0x1a7b0,0x1d3dc,0x14f20,0x1a798,0x1d3ce,0x14f10,0x1a78c, // 110
  263: 			0x14f08,0x1a786,0x14f04,0x14fb0,0x1a7dc,0x14f98,0x1a7ce,0x14f8c,0x14f86,0x14fdc, // 120
  264: 			0x14fce,0x1e8a0,0x1f458,0x1fa2e,0x1e890,0x1f44c,0x1e888,0x1f446,0x1e884,0x1e882, // 130
  265: 			0x1d1a0,0x1e8d8,0x1f46e,0x1d190,0x1e8cc,0x1d188,0x1e8c6,0x1d184,0x1d182,0x1a3a0, // 140
  266: 			0x1d1d8,0x1e8ee,0x1a390,0x1d1cc,0x1a388,0x1d1c6,0x1a384,0x1a382,0x147a0,0x1a3d8, // 150
  267: 			0x1d1ee,0x14790,0x1a3cc,0x14788,0x1a3c6,0x14784,0x14782,0x147d8,0x1a3ee,0x147cc, // 160
  268: 			0x147c6,0x147ee,0x1e850,0x1f42c,0x1e848,0x1f426,0x1e844,0x1e842,0x1d0d0,0x1e86c, // 170
  269: 			0x1d0c8,0x1e866,0x1d0c4,0x1d0c2,0x1a1d0,0x1d0ec,0x1a1c8,0x1d0e6,0x1a1c4,0x1a1c2, // 180
  270: 			0x143d0,0x1a1ec,0x143c8,0x1a1e6,0x143c4,0x143c2,0x143ec,0x143e6,0x1e828,0x1f416, // 190
  271: 			0x1e824,0x1e822,0x1d068,0x1e836,0x1d064,0x1d062,0x1a0e8,0x1d076,0x1a0e4,0x1a0e2, // 200
  272: 			0x141e8,0x1a0f6,0x141e4,0x141e2,0x1e814,0x1e812,0x1d034,0x1d032,0x1a074,0x1a072, // 210
  273: 			0x1e540,0x1f2b0,0x1f95c,0x1e520,0x1f298,0x1f94e,0x1e510,0x1f28c,0x1e508,0x1f286, // 220
  274: 			0x1e504,0x1e502,0x1cb40,0x1e5b0,0x1f2dc,0x1cb20,0x1e598,0x1f2ce,0x1cb10,0x1e58c, // 230
  275: 			0x1cb08,0x1e586,0x1cb04,0x1cb02,0x19740,0x1cbb0,0x1e5dc,0x19720,0x1cb98,0x1e5ce, // 240
  276: 			0x19710,0x1cb8c,0x19708,0x1cb86,0x19704,0x19702,0x12f40,0x197b0,0x1cbdc,0x12f20, // 250
  277: 			0x19798,0x1cbce,0x12f10,0x1978c,0x12f08,0x19786,0x12f04,0x12fb0,0x197dc,0x12f98, // 260
  278: 			0x197ce,0x12f8c,0x12f86,0x12fdc,0x12fce,0x1f6a0,0x1fb58,0x16bf0,0x1f690,0x1fb4c, // 270
  279: 			0x169f8,0x1f688,0x1fb46,0x168fc,0x1f684,0x1f682,0x1e4a0,0x1f258,0x1f92e,0x1eda0, // 280
  280: 			0x1e490,0x1fb6e,0x1ed90,0x1f6cc,0x1f246,0x1ed88,0x1e484,0x1ed84,0x1e482,0x1ed82, // 290
  281: 			0x1c9a0,0x1e4d8,0x1f26e,0x1dba0,0x1c990,0x1e4cc,0x1db90,0x1edcc,0x1e4c6,0x1db88, // 300
  282: 			0x1c984,0x1db84,0x1c982,0x1db82,0x193a0,0x1c9d8,0x1e4ee,0x1b7a0,0x19390,0x1c9cc, // 310
  283: 			0x1b790,0x1dbcc,0x1c9c6,0x1b788,0x19384,0x1b784,0x19382,0x1b782,0x127a0,0x193d8, // 320
  284: 			0x1c9ee,0x16fa0,0x12790,0x193cc,0x16f90,0x1b7cc,0x193c6,0x16f88,0x12784,0x16f84, // 330
  285: 			0x12782,0x127d8,0x193ee,0x16fd8,0x127cc,0x16fcc,0x127c6,0x16fc6,0x127ee,0x1f650, // 340
  286: 			0x1fb2c,0x165f8,0x1f648,0x1fb26,0x164fc,0x1f644,0x1647e,0x1f642,0x1e450,0x1f22c, // 350
  287: 			0x1ecd0,0x1e448,0x1f226,0x1ecc8,0x1f666,0x1ecc4,0x1e442,0x1ecc2,0x1c8d0,0x1e46c, // 360
  288: 			0x1d9d0,0x1c8c8,0x1e466,0x1d9c8,0x1ece6,0x1d9c4,0x1c8c2,0x1d9c2,0x191d0,0x1c8ec, // 370
  289: 			0x1b3d0,0x191c8,0x1c8e6,0x1b3c8,0x1d9e6,0x1b3c4,0x191c2,0x1b3c2,0x123d0,0x191ec, // 380
  290: 			0x167d0,0x123c8,0x191e6,0x167c8,0x1b3e6,0x167c4,0x123c2,0x167c2,0x123ec,0x167ec, // 390
  291: 			0x123e6,0x167e6,0x1f628,0x1fb16,0x162fc,0x1f624,0x1627e,0x1f622,0x1e428,0x1f216, // 400
  292: 			0x1ec68,0x1f636,0x1ec64,0x1e422,0x1ec62,0x1c868,0x1e436,0x1d8e8,0x1c864,0x1d8e4, // 410
  293: 			0x1c862,0x1d8e2,0x190e8,0x1c876,0x1b1e8,0x1d8f6,0x1b1e4,0x190e2,0x1b1e2,0x121e8, // 420
  294: 			0x190f6,0x163e8,0x121e4,0x163e4,0x121e2,0x163e2,0x121f6,0x163f6,0x1f614,0x1617e, // 430
  295: 			0x1f612,0x1e414,0x1ec34,0x1e412,0x1ec32,0x1c834,0x1d874,0x1c832,0x1d872,0x19074, // 440
  296: 			0x1b0f4,0x19072,0x1b0f2,0x120f4,0x161f4,0x120f2,0x161f2,0x1f60a,0x1e40a,0x1ec1a, // 450
  297: 			0x1c81a,0x1d83a,0x1903a,0x1b07a,0x1e2a0,0x1f158,0x1f8ae,0x1e290,0x1f14c,0x1e288, // 460
  298: 			0x1f146,0x1e284,0x1e282,0x1c5a0,0x1e2d8,0x1f16e,0x1c590,0x1e2cc,0x1c588,0x1e2c6, // 470
  299: 			0x1c584,0x1c582,0x18ba0,0x1c5d8,0x1e2ee,0x18b90,0x1c5cc,0x18b88,0x1c5c6,0x18b84, // 480
  300: 			0x18b82,0x117a0,0x18bd8,0x1c5ee,0x11790,0x18bcc,0x11788,0x18bc6,0x11784,0x11782, // 490
  301: 			0x117d8,0x18bee,0x117cc,0x117c6,0x117ee,0x1f350,0x1f9ac,0x135f8,0x1f348,0x1f9a6, // 500
  302: 			0x134fc,0x1f344,0x1347e,0x1f342,0x1e250,0x1f12c,0x1e6d0,0x1e248,0x1f126,0x1e6c8, // 510
  303: 			0x1f366,0x1e6c4,0x1e242,0x1e6c2,0x1c4d0,0x1e26c,0x1cdd0,0x1c4c8,0x1e266,0x1cdc8, // 520
  304: 			0x1e6e6,0x1cdc4,0x1c4c2,0x1cdc2,0x189d0,0x1c4ec,0x19bd0,0x189c8,0x1c4e6,0x19bc8, // 530
  305: 			0x1cde6,0x19bc4,0x189c2,0x19bc2,0x113d0,0x189ec,0x137d0,0x113c8,0x189e6,0x137c8, // 540
  306: 			0x19be6,0x137c4,0x113c2,0x137c2,0x113ec,0x137ec,0x113e6,0x137e6,0x1fba8,0x175f0, // 550
  307: 			0x1bafc,0x1fba4,0x174f8,0x1ba7e,0x1fba2,0x1747c,0x1743e,0x1f328,0x1f996,0x132fc, // 560
  308: 			0x1f768,0x1fbb6,0x176fc,0x1327e,0x1f764,0x1f322,0x1767e,0x1f762,0x1e228,0x1f116, // 570
  309: 			0x1e668,0x1e224,0x1eee8,0x1f776,0x1e222,0x1eee4,0x1e662,0x1eee2,0x1c468,0x1e236, // 580
  310: 			0x1cce8,0x1c464,0x1dde8,0x1cce4,0x1c462,0x1dde4,0x1cce2,0x1dde2,0x188e8,0x1c476, // 590
  311: 			0x199e8,0x188e4,0x1bbe8,0x199e4,0x188e2,0x1bbe4,0x199e2,0x1bbe2,0x111e8,0x188f6, // 600
  312: 			0x133e8,0x111e4,0x177e8,0x133e4,0x111e2,0x177e4,0x133e2,0x177e2,0x111f6,0x133f6, // 610
  313: 			0x1fb94,0x172f8,0x1b97e,0x1fb92,0x1727c,0x1723e,0x1f314,0x1317e,0x1f734,0x1f312, // 620
  314: 			0x1737e,0x1f732,0x1e214,0x1e634,0x1e212,0x1ee74,0x1e632,0x1ee72,0x1c434,0x1cc74, // 630
  315: 			0x1c432,0x1dcf4,0x1cc72,0x1dcf2,0x18874,0x198f4,0x18872,0x1b9f4,0x198f2,0x1b9f2, // 640
  316: 			0x110f4,0x131f4,0x110f2,0x173f4,0x131f2,0x173f2,0x1fb8a,0x1717c,0x1713e,0x1f30a, // 650
  317: 			0x1f71a,0x1e20a,0x1e61a,0x1ee3a,0x1c41a,0x1cc3a,0x1dc7a,0x1883a,0x1987a,0x1b8fa, // 660
  318: 			0x1107a,0x130fa,0x171fa,0x170be,0x1e150,0x1f0ac,0x1e148,0x1f0a6,0x1e144,0x1e142, // 670
  319: 			0x1c2d0,0x1e16c,0x1c2c8,0x1e166,0x1c2c4,0x1c2c2,0x185d0,0x1c2ec,0x185c8,0x1c2e6, // 680
  320: 			0x185c4,0x185c2,0x10bd0,0x185ec,0x10bc8,0x185e6,0x10bc4,0x10bc2,0x10bec,0x10be6, // 690
  321: 			0x1f1a8,0x1f8d6,0x11afc,0x1f1a4,0x11a7e,0x1f1a2,0x1e128,0x1f096,0x1e368,0x1e124, // 700
  322: 			0x1e364,0x1e122,0x1e362,0x1c268,0x1e136,0x1c6e8,0x1c264,0x1c6e4,0x1c262,0x1c6e2, // 710
  323: 			0x184e8,0x1c276,0x18de8,0x184e4,0x18de4,0x184e2,0x18de2,0x109e8,0x184f6,0x11be8, // 720
  324: 			0x109e4,0x11be4,0x109e2,0x11be2,0x109f6,0x11bf6,0x1f9d4,0x13af8,0x19d7e,0x1f9d2, // 730
  325: 			0x13a7c,0x13a3e,0x1f194,0x1197e,0x1f3b4,0x1f192,0x13b7e,0x1f3b2,0x1e114,0x1e334, // 740
  326: 			0x1e112,0x1e774,0x1e332,0x1e772,0x1c234,0x1c674,0x1c232,0x1cef4,0x1c672,0x1cef2, // 750
  327: 			0x18474,0x18cf4,0x18472,0x19df4,0x18cf2,0x19df2,0x108f4,0x119f4,0x108f2,0x13bf4, // 760
  328: 			0x119f2,0x13bf2,0x17af0,0x1bd7c,0x17a78,0x1bd3e,0x17a3c,0x17a1e,0x1f9ca,0x1397c, // 770
  329: 			0x1fbda,0x17b7c,0x1393e,0x17b3e,0x1f18a,0x1f39a,0x1f7ba,0x1e10a,0x1e31a,0x1e73a, // 780
  330: 			0x1ef7a,0x1c21a,0x1c63a,0x1ce7a,0x1defa,0x1843a,0x18c7a,0x19cfa,0x1bdfa,0x1087a, // 790
  331: 			0x118fa,0x139fa,0x17978,0x1bcbe,0x1793c,0x1791e,0x138be,0x179be,0x178bc,0x1789e, // 800
  332: 			0x1785e,0x1e0a8,0x1e0a4,0x1e0a2,0x1c168,0x1e0b6,0x1c164,0x1c162,0x182e8,0x1c176, // 810
  333: 			0x182e4,0x182e2,0x105e8,0x182f6,0x105e4,0x105e2,0x105f6,0x1f0d4,0x10d7e,0x1f0d2, // 820
  334: 			0x1e094,0x1e1b4,0x1e092,0x1e1b2,0x1c134,0x1c374,0x1c132,0x1c372,0x18274,0x186f4, // 830
  335: 			0x18272,0x186f2,0x104f4,0x10df4,0x104f2,0x10df2,0x1f8ea,0x11d7c,0x11d3e,0x1f0ca, // 840
  336: 			0x1f1da,0x1e08a,0x1e19a,0x1e3ba,0x1c11a,0x1c33a,0x1c77a,0x1823a,0x1867a,0x18efa, // 850
  337: 			0x1047a,0x10cfa,0x11dfa,0x13d78,0x19ebe,0x13d3c,0x13d1e,0x11cbe,0x13dbe,0x17d70, // 860
  338: 			0x1bebc,0x17d38,0x1be9e,0x17d1c,0x17d0e,0x13cbc,0x17dbc,0x13c9e,0x17d9e,0x17cb8, // 870
  339: 			0x1be5e,0x17c9c,0x17c8e,0x13c5e,0x17cde,0x17c5c,0x17c4e,0x17c2e,0x1c0b4,0x1c0b2, // 880
  340: 			0x18174,0x18172,0x102f4,0x102f2,0x1e0da,0x1c09a,0x1c1ba,0x1813a,0x1837a,0x1027a, // 890
  341: 			0x106fa,0x10ebe,0x11ebc,0x11e9e,0x13eb8,0x19f5e,0x13e9c,0x13e8e,0x11e5e,0x13ede, // 900
  342: 			0x17eb0,0x1bf5c,0x17e98,0x1bf4e,0x17e8c,0x17e86,0x13e5c,0x17edc,0x13e4e,0x17ece, // 910
  343: 			0x17e58,0x1bf2e,0x17e4c,0x17e46,0x13e2e,0x17e6e,0x17e2c,0x17e26,0x10f5e,0x11f5c, // 920
  344: 			0x11f4e,0x13f58,0x19fae,0x13f4c,0x13f46,0x11f2e,0x13f6e,0x13f2c,0x13f26),        // 929
  345: 		array( // cluster 6 -----------------------------------------------------------------------
  346: 			0x1abe0,0x1d5f8,0x153c0,0x1a9f0,0x1d4fc,0x151e0,0x1a8f8,0x1d47e,0x150f0,0x1a87c, //  10
  347: 			0x15078,0x1fad0,0x15be0,0x1adf8,0x1fac8,0x159f0,0x1acfc,0x1fac4,0x158f8,0x1ac7e, //  20
  348: 			0x1fac2,0x1587c,0x1f5d0,0x1faec,0x15df8,0x1f5c8,0x1fae6,0x15cfc,0x1f5c4,0x15c7e, //  30
  349: 			0x1f5c2,0x1ebd0,0x1f5ec,0x1ebc8,0x1f5e6,0x1ebc4,0x1ebc2,0x1d7d0,0x1ebec,0x1d7c8, //  40
  350: 			0x1ebe6,0x1d7c4,0x1d7c2,0x1afd0,0x1d7ec,0x1afc8,0x1d7e6,0x1afc4,0x14bc0,0x1a5f0, //  50
  351: 			0x1d2fc,0x149e0,0x1a4f8,0x1d27e,0x148f0,0x1a47c,0x14878,0x1a43e,0x1483c,0x1fa68, //  60
  352: 			0x14df0,0x1a6fc,0x1fa64,0x14cf8,0x1a67e,0x1fa62,0x14c7c,0x14c3e,0x1f4e8,0x1fa76, //  70
  353: 			0x14efc,0x1f4e4,0x14e7e,0x1f4e2,0x1e9e8,0x1f4f6,0x1e9e4,0x1e9e2,0x1d3e8,0x1e9f6, //  80
  354: 			0x1d3e4,0x1d3e2,0x1a7e8,0x1d3f6,0x1a7e4,0x1a7e2,0x145e0,0x1a2f8,0x1d17e,0x144f0, //  90
  355: 			0x1a27c,0x14478,0x1a23e,0x1443c,0x1441e,0x1fa34,0x146f8,0x1a37e,0x1fa32,0x1467c, // 100
  356: 			0x1463e,0x1f474,0x1477e,0x1f472,0x1e8f4,0x1e8f2,0x1d1f4,0x1d1f2,0x1a3f4,0x1a3f2, // 110
  357: 			0x142f0,0x1a17c,0x14278,0x1a13e,0x1423c,0x1421e,0x1fa1a,0x1437c,0x1433e,0x1f43a, // 120
  358: 			0x1e87a,0x1d0fa,0x14178,0x1a0be,0x1413c,0x1411e,0x141be,0x140bc,0x1409e,0x12bc0, // 130
  359: 			0x195f0,0x1cafc,0x129e0,0x194f8,0x1ca7e,0x128f0,0x1947c,0x12878,0x1943e,0x1283c, // 140
  360: 			0x1f968,0x12df0,0x196fc,0x1f964,0x12cf8,0x1967e,0x1f962,0x12c7c,0x12c3e,0x1f2e8, // 150
  361: 			0x1f976,0x12efc,0x1f2e4,0x12e7e,0x1f2e2,0x1e5e8,0x1f2f6,0x1e5e4,0x1e5e2,0x1cbe8, // 160
  362: 			0x1e5f6,0x1cbe4,0x1cbe2,0x197e8,0x1cbf6,0x197e4,0x197e2,0x1b5e0,0x1daf8,0x1ed7e, // 170
  363: 			0x169c0,0x1b4f0,0x1da7c,0x168e0,0x1b478,0x1da3e,0x16870,0x1b43c,0x16838,0x1b41e, // 180
  364: 			0x1681c,0x125e0,0x192f8,0x1c97e,0x16de0,0x124f0,0x1927c,0x16cf0,0x1b67c,0x1923e, // 190
  365: 			0x16c78,0x1243c,0x16c3c,0x1241e,0x16c1e,0x1f934,0x126f8,0x1937e,0x1fb74,0x1f932, // 200
  366: 			0x16ef8,0x1267c,0x1fb72,0x16e7c,0x1263e,0x16e3e,0x1f274,0x1277e,0x1f6f4,0x1f272, // 210
  367: 			0x16f7e,0x1f6f2,0x1e4f4,0x1edf4,0x1e4f2,0x1edf2,0x1c9f4,0x1dbf4,0x1c9f2,0x1dbf2, // 220
  368: 			0x193f4,0x193f2,0x165c0,0x1b2f0,0x1d97c,0x164e0,0x1b278,0x1d93e,0x16470,0x1b23c, // 230
  369: 			0x16438,0x1b21e,0x1641c,0x1640e,0x122f0,0x1917c,0x166f0,0x12278,0x1913e,0x16678, // 240
  370: 			0x1b33e,0x1663c,0x1221e,0x1661e,0x1f91a,0x1237c,0x1fb3a,0x1677c,0x1233e,0x1673e, // 250
  371: 			0x1f23a,0x1f67a,0x1e47a,0x1ecfa,0x1c8fa,0x1d9fa,0x191fa,0x162e0,0x1b178,0x1d8be, // 260
  372: 			0x16270,0x1b13c,0x16238,0x1b11e,0x1621c,0x1620e,0x12178,0x190be,0x16378,0x1213c, // 270
  373: 			0x1633c,0x1211e,0x1631e,0x121be,0x163be,0x16170,0x1b0bc,0x16138,0x1b09e,0x1611c, // 280
  374: 			0x1610e,0x120bc,0x161bc,0x1209e,0x1619e,0x160b8,0x1b05e,0x1609c,0x1608e,0x1205e, // 290
  375: 			0x160de,0x1605c,0x1604e,0x115e0,0x18af8,0x1c57e,0x114f0,0x18a7c,0x11478,0x18a3e, // 300
  376: 			0x1143c,0x1141e,0x1f8b4,0x116f8,0x18b7e,0x1f8b2,0x1167c,0x1163e,0x1f174,0x1177e, // 310
  377: 			0x1f172,0x1e2f4,0x1e2f2,0x1c5f4,0x1c5f2,0x18bf4,0x18bf2,0x135c0,0x19af0,0x1cd7c, // 320
  378: 			0x134e0,0x19a78,0x1cd3e,0x13470,0x19a3c,0x13438,0x19a1e,0x1341c,0x1340e,0x112f0, // 330
  379: 			0x1897c,0x136f0,0x11278,0x1893e,0x13678,0x19b3e,0x1363c,0x1121e,0x1361e,0x1f89a, // 340
  380: 			0x1137c,0x1f9ba,0x1377c,0x1133e,0x1373e,0x1f13a,0x1f37a,0x1e27a,0x1e6fa,0x1c4fa, // 350
  381: 			0x1cdfa,0x189fa,0x1bae0,0x1dd78,0x1eebe,0x174c0,0x1ba70,0x1dd3c,0x17460,0x1ba38, // 360
  382: 			0x1dd1e,0x17430,0x1ba1c,0x17418,0x1ba0e,0x1740c,0x132e0,0x19978,0x1ccbe,0x176e0, // 370
  383: 			0x13270,0x1993c,0x17670,0x1bb3c,0x1991e,0x17638,0x1321c,0x1761c,0x1320e,0x1760e, // 380
  384: 			0x11178,0x188be,0x13378,0x1113c,0x17778,0x1333c,0x1111e,0x1773c,0x1331e,0x1771e, // 390
  385: 			0x111be,0x133be,0x177be,0x172c0,0x1b970,0x1dcbc,0x17260,0x1b938,0x1dc9e,0x17230, // 400
  386: 			0x1b91c,0x17218,0x1b90e,0x1720c,0x17206,0x13170,0x198bc,0x17370,0x13138,0x1989e, // 410
  387: 			0x17338,0x1b99e,0x1731c,0x1310e,0x1730e,0x110bc,0x131bc,0x1109e,0x173bc,0x1319e, // 420
  388: 			0x1739e,0x17160,0x1b8b8,0x1dc5e,0x17130,0x1b89c,0x17118,0x1b88e,0x1710c,0x17106, // 430
  389: 			0x130b8,0x1985e,0x171b8,0x1309c,0x1719c,0x1308e,0x1718e,0x1105e,0x130de,0x171de, // 440
  390: 			0x170b0,0x1b85c,0x17098,0x1b84e,0x1708c,0x17086,0x1305c,0x170dc,0x1304e,0x170ce, // 450
  391: 			0x17058,0x1b82e,0x1704c,0x17046,0x1302e,0x1706e,0x1702c,0x17026,0x10af0,0x1857c, // 460
  392: 			0x10a78,0x1853e,0x10a3c,0x10a1e,0x10b7c,0x10b3e,0x1f0ba,0x1e17a,0x1c2fa,0x185fa, // 470
  393: 			0x11ae0,0x18d78,0x1c6be,0x11a70,0x18d3c,0x11a38,0x18d1e,0x11a1c,0x11a0e,0x10978, // 480
  394: 			0x184be,0x11b78,0x1093c,0x11b3c,0x1091e,0x11b1e,0x109be,0x11bbe,0x13ac0,0x19d70, // 490
  395: 			0x1cebc,0x13a60,0x19d38,0x1ce9e,0x13a30,0x19d1c,0x13a18,0x19d0e,0x13a0c,0x13a06, // 500
  396: 			0x11970,0x18cbc,0x13b70,0x11938,0x18c9e,0x13b38,0x1191c,0x13b1c,0x1190e,0x13b0e, // 510
  397: 			0x108bc,0x119bc,0x1089e,0x13bbc,0x1199e,0x13b9e,0x1bd60,0x1deb8,0x1ef5e,0x17a40, // 520
  398: 			0x1bd30,0x1de9c,0x17a20,0x1bd18,0x1de8e,0x17a10,0x1bd0c,0x17a08,0x1bd06,0x17a04, // 530
  399: 			0x13960,0x19cb8,0x1ce5e,0x17b60,0x13930,0x19c9c,0x17b30,0x1bd9c,0x19c8e,0x17b18, // 540
  400: 			0x1390c,0x17b0c,0x13906,0x17b06,0x118b8,0x18c5e,0x139b8,0x1189c,0x17bb8,0x1399c, // 550
  401: 			0x1188e,0x17b9c,0x1398e,0x17b8e,0x1085e,0x118de,0x139de,0x17bde,0x17940,0x1bcb0, // 560
  402: 			0x1de5c,0x17920,0x1bc98,0x1de4e,0x17910,0x1bc8c,0x17908,0x1bc86,0x17904,0x17902, // 570
  403: 			0x138b0,0x19c5c,0x179b0,0x13898,0x19c4e,0x17998,0x1bcce,0x1798c,0x13886,0x17986, // 580
  404: 			0x1185c,0x138dc,0x1184e,0x179dc,0x138ce,0x179ce,0x178a0,0x1bc58,0x1de2e,0x17890, // 590
  405: 			0x1bc4c,0x17888,0x1bc46,0x17884,0x17882,0x13858,0x19c2e,0x178d8,0x1384c,0x178cc, // 600
  406: 			0x13846,0x178c6,0x1182e,0x1386e,0x178ee,0x17850,0x1bc2c,0x17848,0x1bc26,0x17844, // 610
  407: 			0x17842,0x1382c,0x1786c,0x13826,0x17866,0x17828,0x1bc16,0x17824,0x17822,0x13816, // 620
  408: 			0x17836,0x10578,0x182be,0x1053c,0x1051e,0x105be,0x10d70,0x186bc,0x10d38,0x1869e, // 630
  409: 			0x10d1c,0x10d0e,0x104bc,0x10dbc,0x1049e,0x10d9e,0x11d60,0x18eb8,0x1c75e,0x11d30, // 640
  410: 			0x18e9c,0x11d18,0x18e8e,0x11d0c,0x11d06,0x10cb8,0x1865e,0x11db8,0x10c9c,0x11d9c, // 650
  411: 			0x10c8e,0x11d8e,0x1045e,0x10cde,0x11dde,0x13d40,0x19eb0,0x1cf5c,0x13d20,0x19e98, // 660
  412: 			0x1cf4e,0x13d10,0x19e8c,0x13d08,0x19e86,0x13d04,0x13d02,0x11cb0,0x18e5c,0x13db0, // 670
  413: 			0x11c98,0x18e4e,0x13d98,0x19ece,0x13d8c,0x11c86,0x13d86,0x10c5c,0x11cdc,0x10c4e, // 680
  414: 			0x13ddc,0x11cce,0x13dce,0x1bea0,0x1df58,0x1efae,0x1be90,0x1df4c,0x1be88,0x1df46, // 690
  415: 			0x1be84,0x1be82,0x13ca0,0x19e58,0x1cf2e,0x17da0,0x13c90,0x19e4c,0x17d90,0x1becc, // 700
  416: 			0x19e46,0x17d88,0x13c84,0x17d84,0x13c82,0x17d82,0x11c58,0x18e2e,0x13cd8,0x11c4c, // 710
  417: 			0x17dd8,0x13ccc,0x11c46,0x17dcc,0x13cc6,0x17dc6,0x10c2e,0x11c6e,0x13cee,0x17dee, // 720
  418: 			0x1be50,0x1df2c,0x1be48,0x1df26,0x1be44,0x1be42,0x13c50,0x19e2c,0x17cd0,0x13c48, // 730
  419: 			0x19e26,0x17cc8,0x1be66,0x17cc4,0x13c42,0x17cc2,0x11c2c,0x13c6c,0x11c26,0x17cec, // 740
  420: 			0x13c66,0x17ce6,0x1be28,0x1df16,0x1be24,0x1be22,0x13c28,0x19e16,0x17c68,0x13c24, // 750
  421: 			0x17c64,0x13c22,0x17c62,0x11c16,0x13c36,0x17c76,0x1be14,0x1be12,0x13c14,0x17c34, // 760
  422: 			0x13c12,0x17c32,0x102bc,0x1029e,0x106b8,0x1835e,0x1069c,0x1068e,0x1025e,0x106de, // 770
  423: 			0x10eb0,0x1875c,0x10e98,0x1874e,0x10e8c,0x10e86,0x1065c,0x10edc,0x1064e,0x10ece, // 780
  424: 			0x11ea0,0x18f58,0x1c7ae,0x11e90,0x18f4c,0x11e88,0x18f46,0x11e84,0x11e82,0x10e58, // 790
  425: 			0x1872e,0x11ed8,0x18f6e,0x11ecc,0x10e46,0x11ec6,0x1062e,0x10e6e,0x11eee,0x19f50, // 800
  426: 			0x1cfac,0x19f48,0x1cfa6,0x19f44,0x19f42,0x11e50,0x18f2c,0x13ed0,0x19f6c,0x18f26, // 810
  427: 			0x13ec8,0x11e44,0x13ec4,0x11e42,0x13ec2,0x10e2c,0x11e6c,0x10e26,0x13eec,0x11e66, // 820
  428: 			0x13ee6,0x1dfa8,0x1efd6,0x1dfa4,0x1dfa2,0x19f28,0x1cf96,0x1bf68,0x19f24,0x1bf64, // 830
  429: 			0x19f22,0x1bf62,0x11e28,0x18f16,0x13e68,0x11e24,0x17ee8,0x13e64,0x11e22,0x17ee4, // 840
  430: 			0x13e62,0x17ee2,0x10e16,0x11e36,0x13e76,0x17ef6,0x1df94,0x1df92,0x19f14,0x1bf34, // 850
  431: 			0x19f12,0x1bf32,0x11e14,0x13e34,0x11e12,0x17e74,0x13e32,0x17e72,0x1df8a,0x19f0a, // 860
  432: 			0x1bf1a,0x11e0a,0x13e1a,0x17e3a,0x1035c,0x1034e,0x10758,0x183ae,0x1074c,0x10746, // 870
  433: 			0x1032e,0x1076e,0x10f50,0x187ac,0x10f48,0x187a6,0x10f44,0x10f42,0x1072c,0x10f6c, // 880
  434: 			0x10726,0x10f66,0x18fa8,0x1c7d6,0x18fa4,0x18fa2,0x10f28,0x18796,0x11f68,0x18fb6, // 890
  435: 			0x11f64,0x10f22,0x11f62,0x10716,0x10f36,0x11f76,0x1cfd4,0x1cfd2,0x18f94,0x19fb4, // 900
  436: 			0x18f92,0x19fb2,0x10f14,0x11f34,0x10f12,0x13f74,0x11f32,0x13f72,0x1cfca,0x18f8a, // 910
  437: 			0x19f9a,0x10f0a,0x11f1a,0x13f3a,0x103ac,0x103a6,0x107a8,0x183d6,0x107a4,0x107a2, // 920
  438: 			0x10396,0x107b6,0x187d4,0x187d2,0x10794,0x10fb4,0x10792,0x10fb2,0x1c7ea)         // 929
  439: 	); // end of $clusters array
  446: 		array( // ECL 0 (2 factors) -------------------------------------------------------------------------------
  447: 			0x01b,0x395),                                                                                    //   2
  448: 		array( // ECL 1 (4 factors) -------------------------------------------------------------------------------
  449: 			0x20a,0x238,0x2d3,0x329),                                                                        //   4
  450: 		array( // ECL 2 (8 factors) -------------------------------------------------------------------------------
  451: 			0x0ed,0x134,0x1b4,0x11c,0x286,0x28d,0x1ac,0x17b),                                                //   8
  452: 		array( // ECL 3 (16 factors) ------------------------------------------------------------------------------
  453: 			0x112,0x232,0x0e8,0x2f3,0x257,0x20c,0x321,0x084,0x127,0x074,0x1ba,0x1ac,0x127,0x02a,0x0b0,0x041),//  16
  454: 		array( // ECL 4 (32 factors) ------------------------------------------------------------------------------
  455: 			0x169,0x23f,0x39a,0x20d,0x0b0,0x24a,0x280,0x141,0x218,0x2e6,0x2a5,0x2e6,0x2af,0x11c,0x0c1,0x205, //  16
  456: 			0x111,0x1ee,0x107,0x093,0x251,0x320,0x23b,0x140,0x323,0x085,0x0e7,0x186,0x2ad,0x14a,0x03f,0x19a),//  32
  457: 		array( // ECL 5 (64 factors) ------------------------------------------------------------------------------
  458: 			0x21b,0x1a6,0x006,0x05d,0x35e,0x303,0x1c5,0x06a,0x262,0x11f,0x06b,0x1f9,0x2dd,0x36d,0x17d,0x264, //  16
  459: 			0x2d3,0x1dc,0x1ce,0x0ac,0x1ae,0x261,0x35a,0x336,0x21f,0x178,0x1ff,0x190,0x2a0,0x2fa,0x11b,0x0b8, //  32
  460: 			0x1b8,0x023,0x207,0x01f,0x1cc,0x252,0x0e1,0x217,0x205,0x160,0x25d,0x09e,0x28b,0x0c9,0x1e8,0x1f6, //  48
  461: 			0x288,0x2dd,0x2cd,0x053,0x194,0x061,0x118,0x303,0x348,0x275,0x004,0x17d,0x34b,0x26f,0x108,0x21f),//  64
  462: 		array( // ECL 6 (128 factors) -----------------------------------------------------------------------------
  463: 			0x209,0x136,0x360,0x223,0x35a,0x244,0x128,0x17b,0x035,0x30b,0x381,0x1bc,0x190,0x39d,0x2ed,0x19f, //  16
  464: 			0x336,0x05d,0x0d9,0x0d0,0x3a0,0x0f4,0x247,0x26c,0x0f6,0x094,0x1bf,0x277,0x124,0x38c,0x1ea,0x2c0, //  32
  465: 			0x204,0x102,0x1c9,0x38b,0x252,0x2d3,0x2a2,0x124,0x110,0x060,0x2ac,0x1b0,0x2ae,0x25e,0x35c,0x239, //  48
  466: 			0x0c1,0x0db,0x081,0x0ba,0x0ec,0x11f,0x0c0,0x307,0x116,0x0ad,0x028,0x17b,0x2c8,0x1cf,0x286,0x308, //  64
  467: 			0x0ab,0x1eb,0x129,0x2fb,0x09c,0x2dc,0x05f,0x10e,0x1bf,0x05a,0x1fb,0x030,0x0e4,0x335,0x328,0x382, //  80
  468: 			0x310,0x297,0x273,0x17a,0x17e,0x106,0x17c,0x25a,0x2f2,0x150,0x059,0x266,0x057,0x1b0,0x29e,0x268, //  96
  469: 			0x09d,0x176,0x0f2,0x2d6,0x258,0x10d,0x177,0x382,0x34d,0x1c6,0x162,0x082,0x32e,0x24b,0x324,0x022, // 112
  470: 			0x0d3,0x14a,0x21b,0x129,0x33b,0x361,0x025,0x205,0x342,0x13b,0x226,0x056,0x321,0x004,0x06c,0x21b),// 128
  471: 		array( // ECL 7 (256 factors) -----------------------------------------------------------------------------
  472: 			0x20c,0x37e,0x04b,0x2fe,0x372,0x359,0x04a,0x0cc,0x052,0x24a,0x2c4,0x0fa,0x389,0x312,0x08a,0x2d0, //  16
  473: 			0x35a,0x0c2,0x137,0x391,0x113,0x0be,0x177,0x352,0x1b6,0x2dd,0x0c2,0x118,0x0c9,0x118,0x33c,0x2f5, //  32
  474: 			0x2c6,0x32e,0x397,0x059,0x044,0x239,0x00b,0x0cc,0x31c,0x25d,0x21c,0x391,0x321,0x2bc,0x31f,0x089, //  48
  475: 			0x1b7,0x1a2,0x250,0x29c,0x161,0x35b,0x172,0x2b6,0x145,0x0f0,0x0d8,0x101,0x11c,0x225,0x0d1,0x374, //  64
  476: 			0x13b,0x046,0x149,0x319,0x1ea,0x112,0x36d,0x0a2,0x2ed,0x32c,0x2ac,0x1cd,0x14e,0x178,0x351,0x209, //  80
  477: 			0x133,0x123,0x323,0x2c8,0x013,0x166,0x18f,0x38c,0x067,0x1ff,0x033,0x008,0x205,0x0e1,0x121,0x1d6, //  96
  478: 			0x27d,0x2db,0x042,0x0ff,0x395,0x10d,0x1cf,0x33e,0x2da,0x1b1,0x350,0x249,0x088,0x21a,0x38a,0x05a, // 112
  479: 			0x002,0x122,0x2e7,0x0c7,0x28f,0x387,0x149,0x031,0x322,0x244,0x163,0x24c,0x0bc,0x1ce,0x00a,0x086, // 128
  480: 			0x274,0x140,0x1df,0x082,0x2e3,0x047,0x107,0x13e,0x176,0x259,0x0c0,0x25d,0x08e,0x2a1,0x2af,0x0ea, // 144
  481: 			0x2d2,0x180,0x0b1,0x2f0,0x25f,0x280,0x1c7,0x0c1,0x2b1,0x2c3,0x325,0x281,0x030,0x03c,0x2dc,0x26d, // 160
  482: 			0x37f,0x220,0x105,0x354,0x28f,0x135,0x2b9,0x2f3,0x2f4,0x03c,0x0e7,0x305,0x1b2,0x1a5,0x2d6,0x210, // 176
  483: 			0x1f7,0x076,0x031,0x31b,0x020,0x090,0x1f4,0x0ee,0x344,0x18a,0x118,0x236,0x13f,0x009,0x287,0x226, // 192
  484: 			0x049,0x392,0x156,0x07e,0x020,0x2a9,0x14b,0x318,0x26c,0x03c,0x261,0x1b9,0x0b4,0x317,0x37d,0x2f2, // 208
  485: 			0x25d,0x17f,0x0e4,0x2ed,0x2f8,0x0d5,0x036,0x129,0x086,0x036,0x342,0x12b,0x39a,0x0bf,0x38e,0x214, // 224
  486: 			0x261,0x33d,0x0bd,0x014,0x0a7,0x01d,0x368,0x1c1,0x053,0x192,0x029,0x290,0x1f9,0x243,0x1e1,0x0ad, // 240
  487: 			0x194,0x0fb,0x2b0,0x05f,0x1f1,0x22b,0x282,0x21f,0x133,0x09f,0x39c,0x22e,0x288,0x037,0x1f1,0x00a),// 256
  488: 		array( // ECL 8 (512 factors) -----------------------------------------------------------------------------
  489: 			0x160,0x04d,0x175,0x1f8,0x023,0x257,0x1ac,0x0cf,0x199,0x23e,0x076,0x1f2,0x11d,0x17c,0x15e,0x1ec, //  16
  490: 			0x0c5,0x109,0x398,0x09b,0x392,0x12b,0x0e5,0x283,0x126,0x367,0x132,0x058,0x057,0x0c1,0x160,0x30d, //  32
  491: 			0x34e,0x04b,0x147,0x208,0x1b3,0x21f,0x0cb,0x29a,0x0f9,0x15a,0x30d,0x26d,0x280,0x10c,0x31a,0x216, //  48
  492: 			0x21b,0x30d,0x198,0x186,0x284,0x066,0x1dc,0x1f3,0x122,0x278,0x221,0x025,0x35a,0x394,0x228,0x029, //  64
  493: 			0x21e,0x121,0x07a,0x110,0x17f,0x320,0x1e5,0x062,0x2f0,0x1d8,0x2f9,0x06b,0x310,0x35c,0x292,0x2e5, //  80
  494: 			0x122,0x0cc,0x2a9,0x197,0x357,0x055,0x063,0x03e,0x1e2,0x0b4,0x014,0x129,0x1c3,0x251,0x391,0x08e, //  96
  495: 			0x328,0x2ac,0x11f,0x218,0x231,0x04c,0x28d,0x383,0x2d9,0x237,0x2e8,0x186,0x201,0x0c0,0x204,0x102, // 112
  496: 			0x0f0,0x206,0x31a,0x18b,0x300,0x350,0x033,0x262,0x180,0x0a8,0x0be,0x33a,0x148,0x254,0x312,0x12f, // 128
  497: 			0x23a,0x17d,0x19f,0x281,0x09c,0x0ed,0x097,0x1ad,0x213,0x0cf,0x2a4,0x2c6,0x059,0x0a8,0x130,0x192, // 144
  498: 			0x028,0x2c4,0x23f,0x0a2,0x360,0x0e5,0x041,0x35d,0x349,0x200,0x0a4,0x1dd,0x0dd,0x05c,0x166,0x311, // 160
  499: 			0x120,0x165,0x352,0x344,0x33b,0x2e0,0x2c3,0x05e,0x008,0x1ee,0x072,0x209,0x002,0x1f3,0x353,0x21f, // 176
  500: 			0x098,0x2d9,0x303,0x05f,0x0f8,0x169,0x242,0x143,0x358,0x31d,0x121,0x033,0x2ac,0x1d2,0x215,0x334, // 192
  501: 			0x29d,0x02d,0x386,0x1c4,0x0a7,0x156,0x0f4,0x0ad,0x023,0x1cf,0x28b,0x033,0x2bb,0x24f,0x1c4,0x242, // 208
  502: 			0x025,0x07c,0x12a,0x14c,0x228,0x02b,0x1ab,0x077,0x296,0x309,0x1db,0x352,0x2fc,0x16c,0x242,0x38f, // 224
  503: 			0x11b,0x2c7,0x1d8,0x1a4,0x0f5,0x120,0x252,0x18a,0x1ff,0x147,0x24d,0x309,0x2bb,0x2b0,0x02b,0x198, // 240
  504: 			0x34a,0x17f,0x2d1,0x209,0x230,0x284,0x2ca,0x22f,0x03e,0x091,0x369,0x297,0x2c9,0x09f,0x2a0,0x2d9, // 256
  505: 			0x270,0x03b,0x0c1,0x1a1,0x09e,0x0d1,0x233,0x234,0x157,0x2b5,0x06d,0x260,0x233,0x16d,0x0b5,0x304, // 272
  506: 			0x2a5,0x136,0x0f8,0x161,0x2c4,0x19a,0x243,0x366,0x269,0x349,0x278,0x35c,0x121,0x218,0x023,0x309, // 288
  507: 			0x26a,0x24a,0x1a8,0x341,0x04d,0x255,0x15a,0x10d,0x2f5,0x278,0x2b7,0x2ef,0x14b,0x0f7,0x0b8,0x02d, // 304
  508: 			0x313,0x2a8,0x012,0x042,0x197,0x171,0x036,0x1ec,0x0e4,0x265,0x33e,0x39a,0x1b5,0x207,0x284,0x389, // 320
  509: 			0x315,0x1a4,0x131,0x1b9,0x0cf,0x12c,0x37c,0x33b,0x08d,0x219,0x17d,0x296,0x201,0x038,0x0fc,0x155, // 336
  510: 			0x0f2,0x31d,0x346,0x345,0x2d0,0x0e0,0x133,0x277,0x03d,0x057,0x230,0x136,0x2f4,0x299,0x18d,0x328, // 352
  511: 			0x353,0x135,0x1d9,0x31b,0x17a,0x01f,0x287,0x393,0x1cb,0x326,0x24e,0x2db,0x1a9,0x0d8,0x224,0x0f9, // 368
  512: 			0x141,0x371,0x2bb,0x217,0x2a1,0x30e,0x0d2,0x32f,0x389,0x12f,0x34b,0x39a,0x119,0x049,0x1d5,0x317, // 384
  513: 			0x294,0x0a2,0x1f2,0x134,0x09b,0x1a6,0x38b,0x331,0x0bb,0x03e,0x010,0x1a9,0x217,0x150,0x11e,0x1b5, // 400
  514: 			0x177,0x111,0x262,0x128,0x0b7,0x39b,0x074,0x29b,0x2ef,0x161,0x03e,0x16e,0x2b3,0x17b,0x2af,0x34a, // 416
  515: 			0x025,0x165,0x2d0,0x2e6,0x14a,0x005,0x027,0x39b,0x137,0x1a8,0x0f2,0x2ed,0x141,0x036,0x29d,0x13c, // 432
  516: 			0x156,0x12b,0x216,0x069,0x29b,0x1e8,0x280,0x2a0,0x240,0x21c,0x13c,0x1e6,0x2d1,0x262,0x02e,0x290, // 448
  517: 			0x1bf,0x0ab,0x268,0x1d0,0x0be,0x213,0x129,0x141,0x2fa,0x2f0,0x215,0x0af,0x086,0x00e,0x17d,0x1b1, // 464
  518: 			0x2cd,0x02d,0x06f,0x014,0x254,0x11c,0x2e0,0x08a,0x286,0x19b,0x36d,0x29d,0x08d,0x397,0x02d,0x30c, // 480
  519: 			0x197,0x0a4,0x14c,0x383,0x0a5,0x2d6,0x258,0x145,0x1f2,0x28f,0x165,0x2f0,0x300,0x0df,0x351,0x287, // 496
  520: 			0x03f,0x136,0x35f,0x0fb,0x16e,0x130,0x11a,0x2e2,0x2a3,0x19a,0x185,0x0f4,0x01f,0x079,0x12f,0x107) // 512
  537: 		// get the input sequence array
  539: 		$codewords = array(); // array of code-words
  545: 			// Text Alpha is the default mode, so remove the first code
  548: 		// count number of codewords
  551: 			// reached maximum data codeword capacity
  554: 		// build macro control block codewords
  557: 			// beginning of macro control block
  559: 			// segment index
  562: 			// file ID
  565: 			// optional fields
  582: 				// end of control block
  585: 			// update total codewords
  588: 		// set error correction level
  590: 		// number of codewords for error correction
  592: 		// calculate number of columns (number of codewords per row) and rows
  595: 		// adjust cols
  603: 		// adjust rows
  614: 			// set dimensions to get maximum capacity
  624: 		// calculate padding
  631: 				// add pading
  636: 			// add macro section
  639: 		// Symbol Length Descriptor (number of data codewords including Symbol Length Descriptor and pad codewords)
  641: 		// add symbol length description
  643: 		// calculate error correction
  645: 		// add error correction codewords
  647: 		// add horizontal quiet zones to start and stop patterns
  653: 		// build rows for vertical quiet zone
  657: 				// add vertical quiet rows
  661: 		$k = 0; // codeword index
  662: 		$cid = 0; // initial cluster
  663: 		// for each row
  665: 			// row start code
  681: 			// left row indicator
  683: 			// for each column
  702: 			// right row indicator
  704: 			// row stop code
  706: 			// convert the string to array
  708: 			// duplicate row to get the desired height
  719: 				// add vertical quiet rows
  743: 		$maxecl = 8; // starting error level
  744: 		// check for automatic levels
  758: 		// get maximum correction level
  759: 		$maxerrsize = (928 - $numcw); // available codewords for error
  781: 		// get error correction coefficients
  783: 		// number of error correction factors
  785: 		// maximum index for $rsfactors[$ecl]
  787: 		// initialize array of error correction codewords
  789: 		// for each data codeword
  817: 		$sequence_array = array(); // array to be returned
  819: 		// get numeric sequences
  826: 				// extract text sequence before the number sequence
  829: 				// get text sequences
  836: 						// extract byte sequence before the text sequence
  839: 							// add BYTE sequence
  850: 						// add numeric sequence
  857: 				// add numeric sequence
  874: 		$cw = array(); // array of codewords to return
  876: 			case 900: { // Text Compaction mode latch
  877: 				$submode = 0; // default Alpha sub-mode
  878: 				$txtarr = array(); // array of characters and sub-mode switching characters
  883: 						// we are on the same sub-mode
  886: 						// the sub-mode is changed
  888: 							// search new sub-mode
  890: 								// $s is the new submode
  892: 									// shift (temporary change only for this char)
  894: 										// shift to puntuaction
  897: 										// shift from lower to alpha
  901: 									// latch
  903: 									// set new submode
  906: 								// add characted code to array
  915: 					// add padding
  919: 				// calculate codewords
  926: 			case 924: { // Byte Compaction mode latch
  943: 						// tmp array for the 6 bytes block
  948: 							// prepend the value to the beginning of the array
  951: 						// append the result array at the end
  962: 			case 902: { // Numeric Compaction mode latch
  980: 			case 913: { // Byte Compaction mode shift
  986: 			// add the compaction mode codeword at the beginning
  992: } // end PDF417 class
  995: // END OF FILE

TCPDF-main\include\barcodes\qrcode.php:
     3: // File name   : qrcode.php
     4: // Version     : 1.0.010
     5: // Begin       : 2010-03-22
     6: // Last Update : 2012-07-25
     7: // Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
     8: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
     9: // -------------------------------------------------------------------
    10: // Copyright (C) 2010-2012 Nicola Asuni - Tecnick.com LTD
    12: // This file is part of TCPDF software library.
    14: // TCPDF is free software: you can redistribute it and/or modify it
    15: // under the terms of the GNU Lesser General Public License as
    16: // published by the Free Software Foundation, either version 3 of the
    17: // License, or (at your option) any later version.
    19: // TCPDF is distributed in the hope that it will be useful, but
    20: // WITHOUT ANY WARRANTY; without even the implied warranty of
    21: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    22: // See the GNU Lesser General Public License for more details.
    24: // You should have received a copy of the GNU Lesser General Public License
    25: // along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.
    27: // See LICENSE.TXT file for more information.
    28: // -------------------------------------------------------------------
    30: // DESCRIPTION :
    32: // Class to create QR-code arrays for TCPDF class.
    33: // QR Code symbol is a 2D barcode that can be scanned by
    34: // handy terminals such as a mobile phone with CCD.
    35: // The capacity of QR Code is up to 7000 digits or 4000
    36: // characters, and has high robustness.
    37: // This class supports QR Code model 2, described in
    38: // JIS (Japanese Industrial Standards) X0510:2004
    39: // or ISO/IEC 18004.
    40: // Currently the following features are not supported:
    41: // ECI and FNC1 mode, Micro QR Code, QR Code model 1,
    42: // Structured mode.
    44: // This class is derived from the following projects:
    45: // ---------------------------------------------------------
    46: // "PHP QR Code encoder"
    47: // License: GNU-LGPLv3
    48: // Copyright (C) 2010 by Dominik Dzienia <deltalab at poczta dot fm>
    49: // http://phpqrcode.sourceforge.net/
    50: // https://sourceforge.net/projects/phpqrcode/
    52: // The "PHP QR Code encoder" is based on
    53: // "C libqrencode library" (ver. 3.1.1)
    54: // License: GNU-LGPL 2.1
    55: // Copyright (C) 2006-2010 by Kentaro Fukuchi
    56: // http://megaui.net/fukuchi/works/qrencode/index.en.html
    58: // Reed-Solomon code encoder is written by Phil Karn, KA9Q.
    59: // Copyright (C) 2002-2006 Phil Karn, KA9Q
    61: // QR Code is registered trademark of DENSO WAVE INCORPORATED
    62: // http://www.denso-wave.com/qrcode/index-e.html
    63: // ---------------------------------------------------------
    82: // definitions
    90: 	// -----------------------------------------------------
    92: 	// Encoding modes (characters which can be encoded in QRcode)
   124: 	// -----------------------------------------------------
   126: 	// Levels of error correction.
   127: 	// QRcode has a function of an error correcting for miss reading that white is black.
   128: 	// Error correcting is defined in 4 level as below.
   150: 	// -----------------------------------------------------
   152: 	// Version. Size of QRcode is defined as version.
   153: 	// Version is from 1 to 40.
   154: 	// Version 1 is 21*21 matrix. And 4 modules increases whenever 1 version increases.
   155: 	// So version 40 is 177*177 matrix.
   167: 	// -----------------------------------------------------
   189: 	// -----------------------------------------------------
   191: 	// Structure (currently usupported)
   203: 	// -----------------------------------------------------
   205:     // Masks
   227: 	// -----------------------------------------------------
   229: 	// Optimization settings
   246: 	// -----------------------------------------------------
   248: } // end of definitions
   309: 	// FrameFiller
   347: 	// ---- QRrawcode ----
   397: 	// ---- QRmask ----
   405: 	// ---- QRsplit ----
   419: 	// Reed-Solomon items
   455: 		array( 21,   26, 0, array(   7,   10,   13,   17)), //  1
   459: 		array( 37,  134, 7, array(  26,   48,   72,   88)), //  5
   464: 		array( 57,  346, 0, array(  72,  130,  192,  224)), // 10
   469: 		array( 77,  655, 3, array( 132,  240,  360,  432)), // 15
   474: 		array( 97, 1085, 3, array( 224,  416,  600,  700)), // 20
   479: 		array(117, 1588, 4, array( 312,  588,  870, 1050)), // 25
   484: 		array(137, 2185, 3, array( 450,  812, 1200, 1440)), // 30
   489: 		array(157, 2876, 0, array( 570, 1064, 1590, 1890)), // 35
   494: 		array(177, 3706, 0, array( 750, 1372, 2040, 2430))  // 40
   515: 		array(array( 1,  0), array( 1,  0), array( 1,  0), array( 1,  0)), //  1
   519: 		array(array( 1,  0), array( 2,  0), array( 2,  2), array( 2,  2)), //  5
   524: 		array(array( 2,  2), array( 4,  1), array( 6,  2), array( 6,  2)), // 10
   529: 		array(array( 5,  1), array( 5,  5), array( 5,  7), array(11,  7)), // 15
   534: 		array(array( 3,  5), array( 3, 13), array(15,  5), array(15, 10)), // 20
   539: 		array(array( 8,  4), array( 8, 13), array( 7, 22), array(22, 13)), // 25
   544: 		array(array( 5, 10), array(19, 10), array(15, 25), array(23, 25)), // 30
   549: 		array(array(12,  7), array(12, 26), array(39, 14), array(22, 41)), // 35
   554: 		array(array(19,  6), array(18, 31), array(34, 34), array(20, 61))  // 40
   565: 		array( 0,  0), array(18,  0), array(22,  0), array(26,  0), array(30,  0), //  1- 5
   566: 		array(34,  0), array(22, 38), array(24, 42), array(26, 46), array(28, 50), //  6-10
   567: 		array(30, 54), array(32, 58), array(34, 62), array(26, 46), array(26, 48), // 11-15
   568: 		array(26, 50), array(30, 54), array(30, 56), array(30, 58), array(34, 62), // 16-20
   569: 		array(28, 50), array(26, 50), array(30, 54), array(28, 54), array(32, 58), // 21-25
   570: 		array(30, 58), array(34, 62), array(26, 50), array(30, 54), array(26, 52), // 26-30
   571: 		array(30, 56), array(34, 60), array(30, 58), array(34, 62), array(30, 54), // 31-35
   572: 		array(24, 50), array(28, 54), array(32, 58), array(26, 54), array(30, 58)  // 35-40
   601: 	// -------------------------------------------------
   602: 	// -------------------------------------------------
   618: 		// set error correction level
   665: 		// the frame is square (width = height)
   718: 		// inteleaved data and ecc codes
   728: 		// remainder bits
   734: 		// masking
   751: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
   753: 	// FrameFiller
   824: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
   826: 	// QRrawcode
   904: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
   906: 	// QRmask
  1227: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  1229: 	// QRsplit
  1297: 			+ $this->estimateBitsMode8(1)         // + 4 + l8
  1298: 			- $this->estimateBitsMode8($run + 1); // - 4 - l8
  1305: 			+ $this->estimateBitsModeAn(1)        // + 4 + la
  1306: 			- $this->estimateBitsModeAn($run + 1);// - 4 - la
  1329: 				$dif = $this->estimateBitsModeAn($p) // + 4 + la
  1331: 				- $this->estimateBitsModeAn($q); // - 4 - la
  1344: 			+ $this->estimateBitsMode8(1) // + 4 + l8
  1345: 			- $this->estimateBitsMode8($run + 1); // - 4 - l8
  1387: 				$dif = $this->estimateBitsMode8($p) // + 4 + l8
  1389: 				- $this->estimateBitsMode8($q); // - 4 - l8
  1400: 				$dif = $this->estimateBitsMode8($p)  // + 4 + l8
  1402: 				- $this->estimateBitsMode8($q); // - 4 - l8
  1477: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  1479: 	// QRinputItem
  1658: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  1660: 	// QRinput
  1784: 		$bits = (int)($size * 5.5); // (size / 2 ) * 11
  1806: 		return (int)($size * 6.5); // (size / 2 ) * 13
  2096: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  2098: 	// QRbitstream
  2236: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  2238: 	// QRspec
  2305: 		// the size of input data is greater than QR capacity, try to lover the error correction mode
  2349: 			$words *= 2; // the number of bytes is required
  2510: 		// Finder pattern
  2514: 		// Separator
  2526: 		// Format info
  2535: 		// Timing pattern
  2541: 		// Alignment pattern
  2543: 		// Version information
  2561: 		// and a little bit...
  2665: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  2667: 	// QRrs
  2692: 	// - - - - - - - - - - - - - - - - - - - - - - - - -
  2694: 	// QRrsItem
  2721: 		// Based on Reed solomon encoder by Phil Karn, KA9Q (GNU-LGPLv2)
  2723: 		// Check parameter ranges
  2745: 		// PHP style macro replacement ;)
  2748: 		// Generate Galois field lookup tables
  2749: 		$rs['index_of'][0] = $A0; // log(zero) = -inf
  2750: 		$rs['alpha_to'][$A0] = 0; // alpha**-inf = 0
  2762: 			// field generator polynomial is not primitive!
  2765: 		// Form RS code generator polynomial from its roots
  2771: 		// Find prim-th root of 1, used in decoding
  2773: 			; // intentional empty-body loop!
  2779: 			// Multiply rs->genpoly[] by  @**(root + x)
  2787: 			// rs->genpoly[0] can never be zero
  2790: 		// convert rs->genpoly[] to index form for quicker encoding
  2805: 		$MM       =& $rs['mm']; // bits per symbol
  2806: 		$NN       =& $rs['nn']; // the total number of symbols in a RS block
  2807: 		$ALPHA_TO =& $rs['alpha_to']; // the address of an array of NN elements to convert Galois field elements in index (log) form to polynomial form
  2808: 		$INDEX_OF =& $rs['index_of']; // the address of an array of NN elements to convert Galois field elements in polynomial form to index (log) form
  2809: 		$GENPOLY  =& $rs['genpoly']; // an array of NROOTS+1 elements containing the generator polynomial in index form
  2810: 		$NROOTS   =& $rs['nroots']; // the number of roots in the RS code generator polynomial, which is the same as the number of parity symbols in a block
  2811: 		$FCR      =& $rs['fcr']; // first consecutive root, index form
  2812: 		$PRIM     =& $rs['prim']; // primitive element, index form
  2813: 		$IPRIM    =& $rs['iprim']; // prim-th root of 1, index form
  2814: 		$PAD      =& $rs['pad']; // the number of pad symbols in a block
  2820: 				// feedback term is non-zero
  2821: 				// This line is unnecessary when GENPOLY[NROOTS] is unity, as it must
  2822: 				// always be for the polynomials constructed by init_rs()
  2828: 			// Shift
  2839: } // end QRcode class
  2842: // END OF FILE

TCPDF-main\tools\tcpdf_addfont.php:
    4: // File name   : tcpdf_addfont.php
    5: // Version     : 1.0.002
    6: // Begin       : 2013-05-13
    7: // Last Update : 2013-08-05
    8: // Authors     : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com
    9: //               Remi Collet
   10: // License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)
   11: // -------------------------------------------------------------------
   12: // Copyright (C) 2011-2013 Nicola Asuni - Tecnick.com LTD
   14: // This file is part of TCPDF software library.
   16: // TCPDF is free software: you can redistribute it and/or modify it
   17: // under the terms of the GNU Lesser General Public License as
   18: // published by the Free Software Foundation, either version 3 of the
   19: // License, or (at your option) any later version.
   21: // TCPDF is distributed in the hope that it will be useful, but
   22: // WITHOUT ANY WARRANTY; without even the implied warranty of
   23: // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   24: // See the GNU Lesser General Public License for more details.
   26: // You should have received a copy of the License
   27: // along with TCPDF. If not, see
   28: // <http://www.tecnick.com/pagefiles/tcpdf/LICENSE.TXT>.
   30: // See LICENSE.TXT file for more information.
   31: // -------------------------------------------------------------------
   33: // Description : This is a command line script to generate TCPDF fonts.
  128: // remove the name of the executing script
  131: // no options chosen
  136: // initialize the array of options
  139: // short input options
  152: // long input options
  165: // parse input options
  168: // import options (with some sanitization)
  227: 	} // end of switch
  228: } // end of while loop
  235: // check the output path
  245: // check if there are conversion errors
  268: // END OF FILE
